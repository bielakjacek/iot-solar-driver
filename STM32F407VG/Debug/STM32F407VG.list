
STM32F407VG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800b878  0800b878  0001b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ec  0800b9ec  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9ec  0800b9ec  0001b9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f4  0800b9f4  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9f8  0800b9f8  0001b9f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800b9fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  200001fc  0800bbf8  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  0800bbf8  00020c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020df9  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000415d  00000000  00000000  00041025  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  00045188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001828  00000000  00000000  00046b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026283  00000000  00000000  00048388  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016d8b  00000000  00000000  0006e60b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d99ac  00000000  00000000  00085396  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ed42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000730c  00000000  00000000  0015edc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b860 	.word	0x0800b860

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	0800b860 	.word	0x0800b860

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM4_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	timer_state=1;// ustawione na razie co jedną sekundę
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800057a:	2201      	movs	r2, #1
 800057c:	701a      	strb	r2, [r3, #0]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000218 	.word	0x20000218

08000590 <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	 receive_state = 1;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_UART_RxCpltCallback+0x1c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
 }
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000219 	.word	0x20000219

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f001 f829 	bl	800160c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f921 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fba1 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 80005c2:	f000 fb69 	bl	8000c98 <MX_DMA_Init>
  MX_I2C1_Init();
 80005c6:	f000 fa0d 	bl	80009e4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005ca:	f000 fa39 	bl	8000a40 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ce:	f000 fa67 	bl	8000aa0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005d2:	f00a f93b 	bl	800a84c <MX_USB_HOST_Init>
  MX_TIM10_Init();
 80005d6:	f000 fb0f 	bl	8000bf8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80005da:	f000 fb33 	bl	8000c44 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005de:	f000 f991 	bl	8000904 <MX_ADC1_Init>
  MX_TIM4_Init();
 80005e2:	f000 fa93 	bl	8000b0c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 80005e6:	4872      	ldr	r0, [pc, #456]	; (80007b0 <main+0x200>)
 80005e8:	f005 fc01 	bl	8005dee <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, ADC_Data, 3);
 80005ec:	2203      	movs	r2, #3
 80005ee:	4971      	ldr	r1, [pc, #452]	; (80007b4 <main+0x204>)
 80005f0:	4871      	ldr	r0, [pc, #452]	; (80007b8 <main+0x208>)
 80005f2:	f001 f8e3 	bl	80017bc <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim4,TIM_CHANNEL_2, &Duty, 1);
 80005f6:	2301      	movs	r3, #1
 80005f8:	4a70      	ldr	r2, [pc, #448]	; (80007bc <main+0x20c>)
 80005fa:	2104      	movs	r1, #4
 80005fc:	4870      	ldr	r0, [pc, #448]	; (80007c0 <main+0x210>)
 80005fe:	f005 fc4f 	bl	8005ea0 <HAL_TIM_PWM_Start_DMA>

  Duty=8;
 8000602:	4b6e      	ldr	r3, [pc, #440]	; (80007bc <main+0x20c>)
 8000604:	2208      	movs	r2, #8
 8000606:	701a      	strb	r2, [r3, #0]

 RCC->APB2LPENR|= ~(1<<RCC_APB2LPENR_TIM10LPEN_Pos);
 8000608:	4b6e      	ldr	r3, [pc, #440]	; (80007c4 <main+0x214>)
 800060a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800060c:	4a6d      	ldr	r2, [pc, #436]	; (80007c4 <main+0x214>)
 800060e:	f463 3300 	orn	r3, r3, #131072	; 0x20000
 8000612:	6653      	str	r3, [r2, #100]	; 0x64

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_state==1)//if TIM10 interrupt, transmitt data via uart:
 8000614:	4b6c      	ldr	r3, [pc, #432]	; (80007c8 <main+0x218>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d131      	bne.n	8000680 <main+0xd0>
	  	 {

		  battery=ADC_Data[0];//battery voltage level
 800061c:	4b65      	ldr	r3, [pc, #404]	; (80007b4 <main+0x204>)
 800061e:	881a      	ldrh	r2, [r3, #0]
 8000620:	4b6a      	ldr	r3, [pc, #424]	; (80007cc <main+0x21c>)
 8000622:	801a      	strh	r2, [r3, #0]
		  balance_level=ADC_Data[1];//light level given by photoresistor divider
 8000624:	4b63      	ldr	r3, [pc, #396]	; (80007b4 <main+0x204>)
 8000626:	885a      	ldrh	r2, [r3, #2]
 8000628:	4b69      	ldr	r3, [pc, #420]	; (80007d0 <main+0x220>)
 800062a:	801a      	strh	r2, [r3, #0]
		  charging=ADC_Data[2];//solar panel voltage level
 800062c:	4b61      	ldr	r3, [pc, #388]	; (80007b4 <main+0x204>)
 800062e:	889a      	ldrh	r2, [r3, #4]
 8000630:	4b68      	ldr	r3, [pc, #416]	; (80007d4 <main+0x224>)
 8000632:	801a      	strh	r2, [r3, #0]
		  //servo information is stored in static variable
		  //we have to know the last position!!!

		  //dataframe example: c00000b00000ll00000s00000

		  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin);//RED led informs that data is transmitted!
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	4867      	ldr	r0, [pc, #412]	; (80007d8 <main+0x228>)
 800063a:	f002 fac4 	bl	8002bc6 <HAL_GPIO_TogglePin>
		  size = sprintf(data, "c%db%dll%ds%d\n\r",charging,battery,balance_level,servo); // Stworzenie wiadomosci do wyslania
 800063e:	4b65      	ldr	r3, [pc, #404]	; (80007d4 <main+0x224>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	4b61      	ldr	r3, [pc, #388]	; (80007cc <main+0x21c>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	4b61      	ldr	r3, [pc, #388]	; (80007d0 <main+0x220>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b62      	ldr	r3, [pc, #392]	; (80007dc <main+0x22c>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	4603      	mov	r3, r0
 800065a:	460a      	mov	r2, r1
 800065c:	4960      	ldr	r1, [pc, #384]	; (80007e0 <main+0x230>)
 800065e:	4861      	ldr	r0, [pc, #388]	; (80007e4 <main+0x234>)
 8000660:	f00a fcfa 	bl	800b058 <siprintf>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	4b5f      	ldr	r3, [pc, #380]	; (80007e8 <main+0x238>)
 800066a:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, data, size);//data transmittion
 800066c:	4b5e      	ldr	r3, [pc, #376]	; (80007e8 <main+0x238>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	495c      	ldr	r1, [pc, #368]	; (80007e4 <main+0x234>)
 8000674:	485d      	ldr	r0, [pc, #372]	; (80007ec <main+0x23c>)
 8000676:	f006 fc56 	bl	8006f26 <HAL_UART_Transmit_IT>
		  timer_state=0;
 800067a:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <main+0x218>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]

	  	 }


		  if(receive_state==1)//if UART Rx Callback set servo and transmitt feedback message
 8000680:	4b5b      	ldr	r3, [pc, #364]	; (80007f0 <main+0x240>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d15b      	bne.n	8000740 <main+0x190>
		  {

			//if data received - turn on LED_Green for half of sec
			HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800068e:	4852      	ldr	r0, [pc, #328]	; (80007d8 <main+0x228>)
 8000690:	f002 fa80 	bl	8002b94 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000698:	f001 f82a 	bl	80016f0 <HAL_Delay>
			HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a2:	484d      	ldr	r0, [pc, #308]	; (80007d8 <main+0x228>)
 80006a4:	f002 fa76 	bl	8002b94 <HAL_GPIO_WritePin>
			//receiving data:
			HAL_UART_Receive_IT(&huart2,Received_data,10);
 80006a8:	220a      	movs	r2, #10
 80006aa:	4952      	ldr	r1, [pc, #328]	; (80007f4 <main+0x244>)
 80006ac:	484f      	ldr	r0, [pc, #316]	; (80007ec <main+0x23c>)
 80006ae:	f006 fc7f 	bl	8006fb0 <HAL_UART_Receive_IT>

			servo=atoi(&Received_data);//if servo data was received, example s4
 80006b2:	4850      	ldr	r0, [pc, #320]	; (80007f4 <main+0x244>)
 80006b4:	f00a fbd2 	bl	800ae5c <atoi>
 80006b8:	4603      	mov	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <main+0x22c>)
 80006be:	801a      	strh	r2, [r3, #0]

			if(servo == 1)
 80006c0:	4b46      	ldr	r3, [pc, #280]	; (80007dc <main+0x22c>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d106      	bne.n	80006d6 <main+0x126>
			{
			//sleep mode configuration:
			SCB->SCR |= ~(1<<SCB_SCR_SLEEPDEEP_Pos);
 80006c8:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <main+0x248>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <main+0x248>)
 80006ce:	f063 0304 	orn	r3, r3, #4
 80006d2:	6113      	str	r3, [r2, #16]
 80006d4:	e013      	b.n	80006fe <main+0x14e>

			}
			else if(servo>3 && servo<12) //example when 4 set servo
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <main+0x22c>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d90c      	bls.n	80006f8 <main+0x148>
 80006de:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <main+0x22c>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b0b      	cmp	r3, #11
 80006e4:	d808      	bhi.n	80006f8 <main+0x148>
			{
			mode = 1;
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <main+0x24c>)
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			Duty = servo;
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <main+0x22c>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b32      	ldr	r3, [pc, #200]	; (80007bc <main+0x20c>)
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e002      	b.n	80006fe <main+0x14e>
			}
			else mode=0;// example: when 0 automat
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <main+0x24c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]

			//feedback message:
			size = sprintf(data, "c%db%dll%ds%d\n\r",charging,battery,balance_level,servo); //feedback message  with extra servo data (updated)
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <main+0x224>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	4b31      	ldr	r3, [pc, #196]	; (80007cc <main+0x21c>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	4b31      	ldr	r3, [pc, #196]	; (80007d0 <main+0x220>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <main+0x22c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	9200      	str	r2, [sp, #0]
 8000718:	4603      	mov	r3, r0
 800071a:	460a      	mov	r2, r1
 800071c:	4930      	ldr	r1, [pc, #192]	; (80007e0 <main+0x230>)
 800071e:	4831      	ldr	r0, [pc, #196]	; (80007e4 <main+0x234>)
 8000720:	f00a fc9a 	bl	800b058 <siprintf>
 8000724:	4603      	mov	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b2f      	ldr	r3, [pc, #188]	; (80007e8 <main+0x238>)
 800072a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, data, size);
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <main+0x238>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	492c      	ldr	r1, [pc, #176]	; (80007e4 <main+0x234>)
 8000734:	482d      	ldr	r0, [pc, #180]	; (80007ec <main+0x23c>)
 8000736:	f006 fbf6 	bl	8006f26 <HAL_UART_Transmit_IT>
			receive_state=0;
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <main+0x240>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
		  }
		  if(receive_state==0 && mode==0 && timer_state==1)
 8000740:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <main+0x240>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d130      	bne.n	80007aa <main+0x1fa>
 8000748:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <main+0x24c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d12c      	bne.n	80007aa <main+0x1fa>
 8000750:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <main+0x218>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d128      	bne.n	80007aa <main+0x1fa>
		  {
			  const uint16_t neutral_pos= 450;
 8000758:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 800075c:	80fb      	strh	r3, [r7, #6]

			  if(abs(ADC_Data[1]-neutral_pos)>50)
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <main+0x204>)
 8000760:	885b      	ldrh	r3, [r3, #2]
 8000762:	461a      	mov	r2, r3
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	bfb8      	it	lt
 800076c:	425b      	neglt	r3, r3
 800076e:	2b32      	cmp	r3, #50	; 0x32
 8000770:	dd1b      	ble.n	80007aa <main+0x1fa>
			  {
			  	  if(ADC_Data[1]-neutral_pos>0)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <main+0x204>)
 8000774:	885b      	ldrh	r3, [r3, #2]
 8000776:	461a      	mov	r2, r3
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	dd0a      	ble.n	8000796 <main+0x1e6>
					{


					  if(Duty<11) Duty+=1;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <main+0x20c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b0a      	cmp	r3, #10
 8000786:	d810      	bhi.n	80007aa <main+0x1fa>
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <main+0x20c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	b2da      	uxtb	r2, r3
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0x20c>)
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e009      	b.n	80007aa <main+0x1fa>
					}
				  else
					 if(Duty>4) Duty-=1;
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <main+0x20c>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d905      	bls.n	80007aa <main+0x1fa>
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <main+0x20c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b05      	ldr	r3, [pc, #20]	; (80007bc <main+0x20c>)
 80007a8:	701a      	strb	r2, [r3, #0]




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007aa:	f00a f875 	bl	800a898 <MX_USB_HOST_Process>
	  if(timer_state==1)//if TIM10 interrupt, transmitt data via uart:
 80007ae:	e731      	b.n	8000614 <main+0x64>
 80007b0:	20000330 	.word	0x20000330
 80007b4:	20000514 	.word	0x20000514
 80007b8:	20000370 	.word	0x20000370
 80007bc:	2000021a 	.word	0x2000021a
 80007c0:	2000029c 	.word	0x2000029c
 80007c4:	40023800 	.word	0x40023800
 80007c8:	20000218 	.word	0x20000218
 80007cc:	2000021c 	.word	0x2000021c
 80007d0:	2000021e 	.word	0x2000021e
 80007d4:	20000220 	.word	0x20000220
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	20000222 	.word	0x20000222
 80007e0:	0800b878 	.word	0x0800b878
 80007e4:	20000418 	.word	0x20000418
 80007e8:	20000224 	.word	0x20000224
 80007ec:	200004d4 	.word	0x200004d4
 80007f0:	20000219 	.word	0x20000219
 80007f4:	20000564 	.word	0x20000564
 80007f8:	e000ed00 	.word	0xe000ed00
 80007fc:	20000226 	.word	0x20000226

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b098      	sub	sp, #96	; 0x60
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800080a:	2230      	movs	r2, #48	; 0x30
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f00a fb62 	bl	800aed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b31      	ldr	r3, [pc, #196]	; (80008fc <SystemClock_Config+0xfc>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a30      	ldr	r2, [pc, #192]	; (80008fc <SystemClock_Config+0xfc>)
 800083c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b2e      	ldr	r3, [pc, #184]	; (80008fc <SystemClock_Config+0xfc>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <SystemClock_Config+0x100>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a2a      	ldr	r2, [pc, #168]	; (8000900 <SystemClock_Config+0x100>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	4b28      	ldr	r3, [pc, #160]	; (8000900 <SystemClock_Config+0x100>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086a:	2301      	movs	r3, #1
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000878:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087e:	2308      	movs	r3, #8
 8000880:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000882:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000886:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000888:	2302      	movs	r3, #2
 800088a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800088c:	2307      	movs	r3, #7
 800088e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000894:	4618      	mov	r0, r3
 8000896:	f004 fc7b 	bl	8005190 <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008a0:	f000 fb2e 	bl	8000f00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	2105      	movs	r1, #5
 80008c2:	4618      	mov	r0, r3
 80008c4:	f004 fed4 	bl	8005670 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ce:	f000 fb17 	bl	8000f00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008d6:	23c0      	movs	r3, #192	; 0xc0
 80008d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	4618      	mov	r0, r3
 80008e4:	f005 f8b6 	bl	8005a54 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008ee:	f000 fb07 	bl	8000f00 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3760      	adds	r7, #96	; 0x60
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	463b      	mov	r3, r7
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000916:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000918:	4a30      	ldr	r2, [pc, #192]	; (80009dc <MX_ADC1_Init+0xd8>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <MX_ADC1_Init+0xd4>)
 800091e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000924:	4b2c      	ldr	r3, [pc, #176]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000926:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800092a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800092c:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_ADC1_Init+0xd4>)
 800092e:	2201      	movs	r2, #1
 8000930:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000932:	4b29      	ldr	r3, [pc, #164]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000934:	2201      	movs	r2, #1
 8000936:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000938:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_ADC1_Init+0xd4>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000942:	2200      	movs	r2, #0
 8000944:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000948:	4a25      	ldr	r2, [pc, #148]	; (80009e0 <MX_ADC1_Init+0xdc>)
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_ADC1_Init+0xd4>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000954:	2203      	movs	r2, #3
 8000956:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ADC1_Init+0xd4>)
 800095a:	2201      	movs	r2, #1
 800095c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000962:	2201      	movs	r2, #1
 8000964:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000966:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000968:	f000 fee4 	bl	8001734 <HAL_ADC_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000972:	f000 fac5 	bl	8000f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000976:	2301      	movs	r3, #1
 8000978:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800097e:	2304      	movs	r3, #4
 8000980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_ADC1_Init+0xd4>)
 8000988:	f001 f828 	bl	80019dc <HAL_ADC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000992:	f000 fab5 	bl	8000f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000996:	2308      	movs	r3, #8
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <MX_ADC1_Init+0xd4>)
 80009a4:	f001 f81a 	bl	80019dc <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009ae:	f000 faa7 	bl	8000f00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009b2:	2309      	movs	r3, #9
 80009b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009b6:	2303      	movs	r3, #3
 80009b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_ADC1_Init+0xd4>)
 80009c0:	f001 f80c 	bl	80019dc <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80009ca:	f000 fa99 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000370 	.word	0x20000370
 80009dc:	40012000 	.word	0x40012000
 80009e0:	0f000001 	.word	0x0f000001

080009e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f003 fddd 	bl	80045e0 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 fa68 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200002dc 	.word	0x200002dc
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <MX_I2S3_Init+0x58>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a50:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <MX_I2S3_Init+0x5c>)
 8000a6a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_I2S3_Init+0x54>)
 8000a80:	f003 fee6 	bl	8004850 <HAL_I2S_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a8a:	f000 fa39 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000051c 	.word	0x2000051c
 8000a98:	40003c00 	.word	0x40003c00
 8000a9c:	00017700 	.word	0x00017700

08000aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <MX_SPI1_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_SPI1_Init+0x64>)
 8000af2:	f005 f8ed 	bl	8005cd0 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 fa00 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000047c 	.word	0x2000047c
 8000b08:	40013000 	.word	0x40013000

08000b0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b3c:	4b2c      	ldr	r3, [pc, #176]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b3e:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <MX_TIM4_Init+0xe8>)
 8000b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16799;
 8000b42:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b44:	f244 129f 	movw	r2, #16799	; 0x419f
 8000b48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b29      	ldr	r3, [pc, #164]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b52:	2263      	movs	r2, #99	; 0x63
 8000b54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b56:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b62:	4823      	ldr	r0, [pc, #140]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b64:	f005 f918 	bl	8005d98 <HAL_TIM_Base_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b6e:	f000 f9c7 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481c      	ldr	r0, [pc, #112]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b80:	f005 fc6e 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000b8a:	f000 f9b9 	bl	8000f00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000b90:	f005 f951 	bl	8005e36 <HAL_TIM_PWM_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000b9a:	f000 f9b1 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4619      	mov	r1, r3
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000bae:	f006 f8dd 	bl	8006d6c <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000bb8:	f000 f9a2 	bl	8000f00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	; 0x60
 8000bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2204      	movs	r2, #4
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000bd4:	f005 fb7e 	bl	80062d4 <HAL_TIM_PWM_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000bde:	f000 f98f 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <MX_TIM4_Init+0xe4>)
 8000be4:	f000 fbb6 	bl	8001354 <HAL_TIM_MspPostInit>

}
 8000be8:	bf00      	nop
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000029c 	.word	0x2000029c
 8000bf4:	40000800 	.word	0x40000800

08000bf8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <MX_TIM10_Init+0x48>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 499;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c04:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000c08:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c12:	f248 323f 	movw	r2, #33599	; 0x833f
 8000c16:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_TIM10_Init+0x44>)
 8000c28:	f005 f8b6 	bl	8005d98 <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000c32:	f000 f965 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000330 	.word	0x20000330
 8000c40:	40014400 	.word	0x40014400

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f006 f906 	bl	8006e8c <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f000 f93b 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200004d4 	.word	0x200004d4
 8000c94:	40004400 	.word	0x40004400

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_DMA_Init+0x68>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <MX_DMA_Init+0x68>)
 8000ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_DMA_Init+0x68>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_DMA_Init+0x68>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <MX_DMA_Init+0x68>)
 8000cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_DMA_Init+0x68>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	200e      	movs	r0, #14
 8000cdc:	f001 f9f9 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f001 fa12 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2038      	movs	r0, #56	; 0x38
 8000cec:	f001 f9f1 	bl	80020d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cf0:	2038      	movs	r0, #56	; 0x38
 8000cf2:	f001 fa0a 	bl	800210a <HAL_NVIC_EnableIRQ>

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a70      	ldr	r2, [pc, #448]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	4b6a      	ldr	r3, [pc, #424]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a69      	ldr	r2, [pc, #420]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a62      	ldr	r2, [pc, #392]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b59      	ldr	r3, [pc, #356]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b55      	ldr	r3, [pc, #340]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a4d      	ldr	r2, [pc, #308]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b4b      	ldr	r3, [pc, #300]	; (8000ee4 <MX_GPIO_Init+0x1e0>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4848      	ldr	r0, [pc, #288]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000dc8:	f001 fee4 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4846      	ldr	r0, [pc, #280]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000dd2:	f001 fedf 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Red_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f245 0110 	movw	r1, #20496	; 0x5010
 8000ddc:	4844      	ldr	r0, [pc, #272]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000dde:	f001 fed9 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000de2:	2308      	movs	r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	483b      	ldr	r0, [pc, #236]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000dfa:	f001 fd31 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4835      	ldr	r0, [pc, #212]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000e16:	f001 fd23 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	482d      	ldr	r0, [pc, #180]	; (8000eec <MX_GPIO_Init+0x1e8>)
 8000e36:	f001 fd13 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	482a      	ldr	r0, [pc, #168]	; (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000e4e:	f001 fd07 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e52:	2304      	movs	r3, #4
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4825      	ldr	r0, [pc, #148]	; (8000efc <MX_GPIO_Init+0x1f8>)
 8000e66:	f001 fcfb 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0x1f8>)
 8000e88:	f001 fcea 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Green_Pin LED_Red_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin|Audio_RST_Pin;
 8000e8c:	f245 0310 	movw	r3, #20496	; 0x5010
 8000e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4812      	ldr	r0, [pc, #72]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000ea6:	f001 fcdb 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000ebe:	f001 fccf 	bl	8002860 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000ed6:	f001 fcc3 	bl	8002860 <HAL_GPIO_Init>

}
 8000eda:	bf00      	nop
 8000edc:	3730      	adds	r7, #48	; 0x30
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	10120000 	.word	0x10120000
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x6>

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x4c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f46:	2007      	movs	r0, #7
 8000f48:	f001 f8b8 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800

08000f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	; 0x28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <HAL_ADC_MspInit+0x110>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d171      	bne.n	800105e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b3b      	ldr	r3, [pc, #236]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a3a      	ldr	r2, [pc, #232]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b34      	ldr	r3, [pc, #208]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a33      	ldr	r2, [pc, #204]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a2c      	ldr	r2, [pc, #176]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <HAL_ADC_MspInit+0x114>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4823      	ldr	r0, [pc, #140]	; (8001070 <HAL_ADC_MspInit+0x118>)
 8000fe2:	f001 fc3d 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	481e      	ldr	r0, [pc, #120]	; (8001074 <HAL_ADC_MspInit+0x11c>)
 8000ffa:	f001 fc31 	bl	8002860 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ffe:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001000:	4a1e      	ldr	r2, [pc, #120]	; (800107c <HAL_ADC_MspInit+0x124>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <HAL_ADC_MspInit+0x120>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001024:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001028:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001034:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_ADC_MspInit+0x120>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001042:	480d      	ldr	r0, [pc, #52]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001044:	f001 f87c 	bl	8002140 <HAL_DMA_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800104e:	f7ff ff57 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_ADC_MspInit+0x120>)
 8001056:	639a      	str	r2, [r3, #56]	; 0x38
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_ADC_MspInit+0x120>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012000 	.word	0x40012000
 800106c:	40023800 	.word	0x40023800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	200003b8 	.word	0x200003b8
 800107c:	40026410 	.word	0x40026410

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_I2C_MspInit+0x84>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d12c      	bne.n	80010fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010be:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c4:	2312      	movs	r3, #18
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d0:	2304      	movs	r3, #4
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <HAL_I2C_MspInit+0x8c>)
 80010dc:	f001 fbc0 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ee:	6413      	str	r3, [r2, #64]	; 0x40
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_I2C_MspInit+0x88>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40005400 	.word	0x40005400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400

08001110 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a28      	ldr	r2, [pc, #160]	; (80011d0 <HAL_I2S_MspInit+0xc0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d14a      	bne.n	80011c8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b27      	ldr	r3, [pc, #156]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a26      	ldr	r2, [pc, #152]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 800113c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_I2S_MspInit+0xc4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001186:	2310      	movs	r3, #16
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001196:	2306      	movs	r3, #6
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <HAL_I2S_MspInit+0xc8>)
 80011a2:	f001 fb5d 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011a6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b8:	2306      	movs	r3, #6
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <HAL_I2S_MspInit+0xcc>)
 80011c4:	f001 fb4c 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40003c00 	.word	0x40003c00
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000
 80011dc:	40020800 	.word	0x40020800

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_SPI_MspInit+0x84>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12b      	bne.n	800125a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <HAL_SPI_MspInit+0x88>)
 800120c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b15      	ldr	r3, [pc, #84]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_SPI_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800123a:	23e0      	movs	r3, #224	; 0xe0
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	2300      	movs	r3, #0
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_SPI_MspInit+0x8c>)
 8001256:	f001 fb03 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800125a:	bf00      	nop
 800125c:	3728      	adds	r7, #40	; 0x28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40013000 	.word	0x40013000
 8001268:	40023800 	.word	0x40023800
 800126c:	40020000 	.word	0x40020000

08001270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_TIM_Base_MspInit+0xd0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d13f      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012a0:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_TIM_Base_MspInit+0xdc>)
 80012a2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ce:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d6:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80012e4:	4818      	ldr	r0, [pc, #96]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012e6:	f000 ff2b 	bl	8002140 <HAL_DMA_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80012f0:	f7ff fe06 	bl	8000f00 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_TIM_Base_MspInit+0xd8>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001300:	e01a      	b.n	8001338 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM10)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_TIM_Base_MspInit+0xe0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d115      	bne.n	8001338 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 8001312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001314:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 8001316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131a:	6453      	str	r3, [r2, #68]	; 0x44
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0xd4>)
 800131e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2019      	movs	r0, #25
 800132e:	f000 fed0 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001332:	2019      	movs	r0, #25
 8001334:	f000 fee9 	bl	800210a <HAL_NVIC_EnableIRQ>
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40000800 	.word	0x40000800
 8001344:	40023800 	.word	0x40023800
 8001348:	2000023c 	.word	0x2000023c
 800134c:	40026058 	.word	0x40026058
 8001350:	40014400 	.word	0x40014400

08001354 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 030c 	add.w	r3, r7, #12
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <HAL_TIM_MspPostInit+0x68>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d11e      	bne.n	80013b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_TIM_MspPostInit+0x6c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013a4:	2302      	movs	r3, #2
 80013a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_TIM_MspPostInit+0x70>)
 80013b0:	f001 fa56 	bl	8002860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3720      	adds	r7, #32
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40000800 	.word	0x40000800
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020c00 	.word	0x40020c00

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_UART_MspInit+0x94>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d133      	bne.n	8001452 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_UART_MspInit+0x98>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <HAL_UART_MspInit+0x98>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_UART_MspInit+0x98>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <HAL_UART_MspInit+0x98>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a14      	ldr	r2, [pc, #80]	; (8001460 <HAL_UART_MspInit+0x98>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_UART_MspInit+0x98>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001422:	230c      	movs	r3, #12
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001432:	2307      	movs	r3, #7
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_UART_MspInit+0x9c>)
 800143e:	f001 fa0f 	bl	8002860 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	2026      	movs	r0, #38	; 0x26
 8001448:	f000 fe43 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800144c:	2026      	movs	r0, #38	; 0x26
 800144e:	f000 fe5c 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40004400 	.word	0x40004400
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000

08001468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800146c:	e7fe      	b.n	800146c <NMI_Handler+0x4>

0800146e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <HardFault_Handler+0x4>

08001474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler+0x4>

0800147a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <BusFault_Handler+0x4>

08001480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b4:	f000 f8fc 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80014c0:	4802      	ldr	r0, [pc, #8]	; (80014cc <DMA1_Stream3_IRQHandler+0x10>)
 80014c2:	f000 ff65 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000023c 	.word	0x2000023c

080014d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014d6:	f004 fdf5 	bl	80060c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000330 	.word	0x20000330

080014e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART2_IRQHandler+0x10>)
 80014ea:	f005 fdb7 	bl	800705c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200004d4 	.word	0x200004d4

080014f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA2_Stream0_IRQHandler+0x10>)
 80014fe:	f000 ff47 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003b8 	.word	0x200003b8

0800150c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <OTG_FS_IRQHandler+0x10>)
 8001512:	f001 fe03 	bl	800311c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000094c 	.word	0x2000094c

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f009 fc88 	bl	800ae64 <__errno>
 8001554:	4602      	mov	r2, r0
 8001556:	230c      	movs	r3, #12
 8001558:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020000 	.word	0x20020000
 8001580:	00000400 	.word	0x00000400
 8001584:	20000228 	.word	0x20000228
 8001588:	20000c18 	.word	0x20000c18

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <SystemInit+0x28>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <SystemInit+0x28>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <SystemInit+0x28>)
 80015a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a6:	609a      	str	r2, [r3, #8]
#endif
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015be:	e003      	b.n	80015c8 <LoopCopyDataInit>

080015c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015c6:	3104      	adds	r1, #4

080015c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015d0:	d3f6      	bcc.n	80015c0 <CopyDataInit>
  ldr  r2, =_sbss
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015d4:	e002      	b.n	80015dc <LoopFillZerobss>

080015d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015d8:	f842 3b04 	str.w	r3, [r2], #4

080015dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015e0:	d3f9      	bcc.n	80015d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015e2:	f7ff ffd3 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015e6:	f009 fc43 	bl	800ae70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ea:	f7fe ffe1 	bl	80005b0 <main>
  bx  lr    
 80015ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015f4:	0800b9fc 	.word	0x0800b9fc
  ldr  r0, =_sdata
 80015f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015fc:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8001600:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8001604:	20000c14 	.word	0x20000c14

08001608 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC_IRQHandler>
	...

0800160c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_Init+0x40>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_Init+0x40>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0a      	ldr	r2, [pc, #40]	; (800164c <HAL_Init+0x40>)
 8001622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_Init+0x40>)
 800162e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001634:	2003      	movs	r0, #3
 8001636:	f000 fd41 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800163a:	2000      	movs	r0, #0
 800163c:	f000 f808 	bl	8001650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001640:	f7ff fc62 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001658:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_InitTick+0x54>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_InitTick+0x58>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001666:	fbb3 f3f1 	udiv	r3, r3, r1
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fd59 	bl	8002126 <HAL_SYSTICK_Config>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e00e      	b.n	800169c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d80a      	bhi.n	800169a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 fd21 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <HAL_InitTick+0x5c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x20>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <HAL_IncTick+0x24>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4413      	add	r3, r2
 80016c0:	4a04      	ldr	r2, [pc, #16]	; (80016d4 <HAL_IncTick+0x24>)
 80016c2:	6013      	str	r3, [r2, #0]
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000570 	.word	0x20000570

080016d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return uwTick;
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <HAL_GetTick+0x14>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000570 	.word	0x20000570

080016f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff ffee 	bl	80016d8 <HAL_GetTick>
 80016fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001708:	d005      	beq.n	8001716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_Delay+0x40>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001716:	bf00      	nop
 8001718:	f7ff ffde 	bl	80016d8 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	429a      	cmp	r2, r3
 8001726:	d8f7      	bhi.n	8001718 <HAL_Delay+0x28>
  {
  }
}
 8001728:	bf00      	nop
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e033      	b.n	80017b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fc00 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800177a:	f023 0302 	bic.w	r3, r3, #2
 800177e:	f043 0202 	orr.w	r2, r3, #2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 fa4a 	bl	8001c20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	f043 0201 	orr.w	r2, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40
 80017a2:	e001      	b.n	80017a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Start_DMA+0x1e>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e0cc      	b.n	8001974 <HAL_ADC_Start_DMA+0x1b8>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d018      	beq.n	8001822 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_ADC_Start_DMA+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5e      	ldr	r2, [pc, #376]	; (8001980 <HAL_ADC_Start_DMA+0x1c4>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0c9a      	lsrs	r2, r3, #18
 800180c:	4613      	mov	r3, r2
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001814:	e002      	b.n	800181c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3b01      	subs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 80a0 	bne.w	8001972 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800185c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001870:	d106      	bne.n	8001880 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f023 0206 	bic.w	r2, r3, #6
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
 800187e:	e002      	b.n	8001886 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800188e:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <HAL_ADC_Start_DMA+0x1c8>)
 8001890:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <HAL_ADC_Start_DMA+0x1cc>)
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	4a3b      	ldr	r2, [pc, #236]	; (800198c <HAL_ADC_Start_DMA+0x1d0>)
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	4a3a      	ldr	r2, [pc, #232]	; (8001990 <HAL_ADC_Start_DMA+0x1d4>)
 80018a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	334c      	adds	r3, #76	; 0x4c
 80018de:	4619      	mov	r1, r3
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f000 fcda 	bl	800229c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d12a      	bne.n	800194a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a26      	ldr	r2, [pc, #152]	; (8001994 <HAL_ADC_Start_DMA+0x1d8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d015      	beq.n	800192a <HAL_ADC_Start_DMA+0x16e>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_ADC_Start_DMA+0x1dc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d105      	bne.n	8001914 <HAL_ADC_Start_DMA+0x158>
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_ADC_Start_DMA+0x1c8>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a20      	ldr	r2, [pc, #128]	; (800199c <HAL_ADC_Start_DMA+0x1e0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d129      	bne.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_ADC_Start_DMA+0x1c8>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2b0f      	cmp	r3, #15
 8001928:	d823      	bhi.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11c      	bne.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	e013      	b.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a11      	ldr	r2, [pc, #68]	; (8001994 <HAL_ADC_Start_DMA+0x1d8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d10e      	bne.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d107      	bne.n	8001972 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001970:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	431bde83 	.word	0x431bde83
 8001984:	40012300 	.word	0x40012300
 8001988:	08001e19 	.word	0x08001e19
 800198c:	08001ed3 	.word	0x08001ed3
 8001990:	08001eef 	.word	0x08001eef
 8001994:	40012000 	.word	0x40012000
 8001998:	40012100 	.word	0x40012100
 800199c:	40012200 	.word	0x40012200

080019a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x1c>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e105      	b.n	8001c04 <HAL_ADC_ConfigChannel+0x228>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b09      	cmp	r3, #9
 8001a06:	d925      	bls.n	8001a54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68d9      	ldr	r1, [r3, #12]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1e      	subs	r3, #30
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43da      	mvns	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68d9      	ldr	r1, [r3, #12]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4403      	add	r3, r0
 8001a46:	3b1e      	subs	r3, #30
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	e022      	b.n	8001a9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6919      	ldr	r1, [r3, #16]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	461a      	mov	r2, r3
 8001a62:	4613      	mov	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	2207      	movs	r2, #7
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	400a      	ands	r2, r1
 8001a76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6919      	ldr	r1, [r3, #16]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4403      	add	r3, r0
 8001a90:	409a      	lsls	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d824      	bhi.n	8001aec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3b05      	subs	r3, #5
 8001ab4:	221f      	movs	r2, #31
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	3b05      	subs	r3, #5
 8001ade:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aea:	e04c      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	d824      	bhi.n	8001b3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	3b23      	subs	r3, #35	; 0x23
 8001b06:	221f      	movs	r2, #31
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	400a      	ands	r2, r1
 8001b14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3b23      	subs	r3, #35	; 0x23
 8001b30:	fa00 f203 	lsl.w	r2, r0, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3c:	e023      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3b41      	subs	r3, #65	; 0x41
 8001b50:	221f      	movs	r2, #31
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	3b41      	subs	r3, #65	; 0x41
 8001b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b86:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <HAL_ADC_ConfigChannel+0x234>)
 8001b88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <HAL_ADC_ConfigChannel+0x238>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d109      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1cc>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b12      	cmp	r3, #18
 8001b9a:	d105      	bne.n	8001ba8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_ADC_ConfigChannel+0x238>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d123      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x21e>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d003      	beq.n	8001bc2 <HAL_ADC_ConfigChannel+0x1e6>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b11      	cmp	r3, #17
 8001bc0:	d11b      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d111      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_ADC_ConfigChannel+0x23c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_ADC_ConfigChannel+0x240>)
 8001bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001be0:	0c9a      	lsrs	r2, r3, #18
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40012300 	.word	0x40012300
 8001c14:	40012000 	.word	0x40012000
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	431bde83 	.word	0x431bde83

08001c20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c28:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <ADC_Init+0x1f0>)
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	021a      	lsls	r2, r3, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6899      	ldr	r1, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <ADC_Init+0x1f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d022      	beq.n	8001cfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	e00f      	b.n	8001d1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0202 	bic.w	r2, r2, #2
 8001d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6899      	ldr	r1, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
 8001d38:	005a      	lsls	r2, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01b      	beq.n	8001d84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6859      	ldr	r1, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	3b01      	subs	r3, #1
 8001d78:	035a      	lsls	r2, r3, #13
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e007      	b.n	8001d94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	051a      	lsls	r2, r3, #20
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6899      	ldr	r1, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dd6:	025a      	lsls	r2, r3, #9
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6899      	ldr	r1, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	029a      	lsls	r2, r3, #10
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	609a      	str	r2, [r3, #8]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40012300 	.word	0x40012300
 8001e14:	0f000001 	.word	0x0f000001

08001e18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d13c      	bne.n	8001eac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12b      	bne.n	8001ea4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d127      	bne.n	8001ea4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d119      	bne.n	8001ea4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0220 	bic.w	r2, r2, #32
 8001e7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	f043 0201 	orr.w	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fd7b 	bl	80019a0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001eaa:	e00e      	b.n	8001eca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f7ff fd85 	bl	80019c8 <HAL_ADC_ErrorCallback>
}
 8001ebe:	e004      	b.n	8001eca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	4798      	blx	r3
}
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff fd67 	bl	80019b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fd5a 	bl	80019c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4e:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	60d3      	str	r3, [r2, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	; (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	; (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	; (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	; 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff8e 	bl	8001fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff29 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff3e 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff8e 	bl	8002010 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5d 	bl	8001fbc <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff31 	bl	8001f80 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800214c:	f7ff fac4 	bl	80016d8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e099      	b.n	8002290 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	e00f      	b.n	800219e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217e:	f7ff faab 	bl	80016d8 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d908      	bls.n	800219e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2203      	movs	r2, #3
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e078      	b.n	8002290 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1e8      	bne.n	800217e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_DMA_Init+0x158>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d107      	bne.n	8002208 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	4313      	orrs	r3, r2
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f023 0307 	bic.w	r3, r3, #7
 800221e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	4313      	orrs	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	2b04      	cmp	r3, #4
 8002230:	d117      	bne.n	8002262 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa91 	bl	800276c <DMA_CheckFifoParam>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800225e:	2301      	movs	r3, #1
 8002260:	e016      	b.n	8002290 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fa48 	bl	8002700 <DMA_CalcBaseAndBitshift>
 8002270:	4603      	mov	r3, r0
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002278:	223f      	movs	r2, #63	; 0x3f
 800227a:	409a      	lsls	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	f010803f 	.word	0xf010803f

0800229c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
 80022a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_DMA_Start_IT+0x26>
 80022be:	2302      	movs	r3, #2
 80022c0:	e040      	b.n	8002344 <HAL_DMA_Start_IT+0xa8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d12f      	bne.n	8002336 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2202      	movs	r2, #2
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f9da 	bl	80026a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0216 	orr.w	r2, r2, #22
 800230a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	e005      	b.n	8002342 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002342:	7dfb      	ldrb	r3, [r7, #23]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e00c      	b.n	8002384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2205      	movs	r2, #5
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0201 	bic.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x258>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a92      	ldr	r2, [pc, #584]	; (80025ec <HAL_DMA_IRQHandler+0x25c>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a9b      	lsrs	r3, r3, #10
 80023a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ba:	2208      	movs	r2, #8
 80023bc:	409a      	lsls	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01a      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d013      	beq.n	80023fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0204 	bic.w	r2, r2, #4
 80023e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e8:	2208      	movs	r2, #8
 80023ea:	409a      	lsls	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2201      	movs	r2, #1
 8002402:	409a      	lsls	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00b      	beq.n	8002432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2201      	movs	r2, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	f043 0202 	orr.w	r2, r3, #2
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002436:	2204      	movs	r2, #4
 8002438:	409a      	lsls	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00b      	beq.n	8002468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002454:	2204      	movs	r2, #4
 8002456:	409a      	lsls	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002460:	f043 0204 	orr.w	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246c:	2210      	movs	r2, #16
 800246e:	409a      	lsls	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d043      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d03c      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	2210      	movs	r2, #16
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d018      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	4798      	blx	r3
 80024be:	e01f      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01b      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	4798      	blx	r3
 80024d0:	e016      	b.n	8002500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0208 	bic.w	r2, r2, #8
 80024ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2220      	movs	r2, #32
 8002506:	409a      	lsls	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 808e 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8086 	beq.w	800262e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2220      	movs	r2, #32
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b05      	cmp	r3, #5
 8002538:	d136      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0216 	bic.w	r2, r2, #22
 8002548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_DMA_IRQHandler+0x1da>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257e:	223f      	movs	r2, #63	; 0x3f
 8002580:	409a      	lsls	r2, r3
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d07d      	beq.n	800269a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
        }
        return;
 80025a6:	e078      	b.n	800269a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01c      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d108      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d030      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e02b      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d027      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	4798      	blx	r3
 80025e6:	e022      	b.n	800262e <HAL_DMA_IRQHandler+0x29e>
 80025e8:	20000000 	.word	0x20000000
 80025ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10f      	bne.n	800261e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0210 	bic.w	r2, r2, #16
 800260c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002632:	2b00      	cmp	r3, #0
 8002634:	d032      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d022      	beq.n	8002688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2205      	movs	r2, #5
 8002646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3301      	adds	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	d307      	bcc.n	8002676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f2      	bne.n	800265a <HAL_DMA_IRQHandler+0x2ca>
 8002674:	e000      	b.n	8002678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e000      	b.n	800269c <HAL_DMA_IRQHandler+0x30c>
        return;
 800269a:	bf00      	nop
    }
  }
}
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop

080026a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b40      	cmp	r3, #64	; 0x40
 80026d0:	d108      	bne.n	80026e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026e2:	e007      	b.n	80026f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	60da      	str	r2, [r3, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	3b10      	subs	r3, #16
 8002710:	4a14      	ldr	r2, [pc, #80]	; (8002764 <DMA_CalcBaseAndBitshift+0x64>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	091b      	lsrs	r3, r3, #4
 8002718:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800271a:	4a13      	ldr	r2, [pc, #76]	; (8002768 <DMA_CalcBaseAndBitshift+0x68>)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d909      	bls.n	8002742 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	659a      	str	r2, [r3, #88]	; 0x58
 8002740:	e007      	b.n	8002752 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	aaaaaaab 	.word	0xaaaaaaab
 8002768:	0800b8a4 	.word	0x0800b8a4

0800276c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11f      	bne.n	80027c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b03      	cmp	r3, #3
 800278a:	d855      	bhi.n	8002838 <DMA_CheckFifoParam+0xcc>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <DMA_CheckFifoParam+0x28>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	080027a5 	.word	0x080027a5
 8002798:	080027b7 	.word	0x080027b7
 800279c:	080027a5 	.word	0x080027a5
 80027a0:	08002839 	.word	0x08002839
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d045      	beq.n	800283c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b4:	e042      	b.n	800283c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027be:	d13f      	bne.n	8002840 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c4:	e03c      	b.n	8002840 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ce:	d121      	bne.n	8002814 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d836      	bhi.n	8002844 <DMA_CheckFifoParam+0xd8>
 80027d6:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DMA_CheckFifoParam+0x70>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027f3 	.word	0x080027f3
 80027e4:	080027ed 	.word	0x080027ed
 80027e8:	08002805 	.word	0x08002805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e02f      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d024      	beq.n	8002848 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e021      	b.n	8002848 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800280c:	d11e      	bne.n	800284c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002812:	e01b      	b.n	800284c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <DMA_CheckFifoParam+0xb4>
 800281a:	2b03      	cmp	r3, #3
 800281c:	d003      	beq.n	8002826 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800281e:	e018      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
      break;
 8002824:	e015      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00e      	beq.n	8002850 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      break;
 8002836:	e00b      	b.n	8002850 <DMA_CheckFifoParam+0xe4>
      break;
 8002838:	bf00      	nop
 800283a:	e00a      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 800283c:	bf00      	nop
 800283e:	e008      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002840:	bf00      	nop
 8002842:	e006      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002844:	bf00      	nop
 8002846:	e004      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002848:	bf00      	nop
 800284a:	e002      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;   
 800284c:	bf00      	nop
 800284e:	e000      	b.n	8002852 <DMA_CheckFifoParam+0xe6>
      break;
 8002850:	bf00      	nop
    }
  } 
  
  return status; 
 8002852:	7bfb      	ldrb	r3, [r7, #15]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e16b      	b.n	8002b54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 815a 	bne.w	8002b4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d00b      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ae:	2b11      	cmp	r3, #17
 80028b0:	d003      	beq.n	80028ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d130      	bne.n	800291c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	2203      	movs	r2, #3
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0xfc>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b12      	cmp	r3, #18
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80b4 	beq.w	8002b4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b5f      	ldr	r3, [pc, #380]	; (8002b68 <HAL_GPIO_Init+0x308>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a5e      	ldr	r2, [pc, #376]	; (8002b68 <HAL_GPIO_Init+0x308>)
 80029f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <HAL_GPIO_Init+0x308>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a02:	4a5a      	ldr	r2, [pc, #360]	; (8002b6c <HAL_GPIO_Init+0x30c>)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	220f      	movs	r2, #15
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a51      	ldr	r2, [pc, #324]	; (8002b70 <HAL_GPIO_Init+0x310>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d02b      	beq.n	8002a86 <HAL_GPIO_Init+0x226>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a50      	ldr	r2, [pc, #320]	; (8002b74 <HAL_GPIO_Init+0x314>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d025      	beq.n	8002a82 <HAL_GPIO_Init+0x222>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4f      	ldr	r2, [pc, #316]	; (8002b78 <HAL_GPIO_Init+0x318>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01f      	beq.n	8002a7e <HAL_GPIO_Init+0x21e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	; (8002b7c <HAL_GPIO_Init+0x31c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0x21a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <HAL_GPIO_Init+0x320>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_GPIO_Init+0x216>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_GPIO_Init+0x324>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00d      	beq.n	8002a72 <HAL_GPIO_Init+0x212>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_GPIO_Init+0x328>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <HAL_GPIO_Init+0x20e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <HAL_GPIO_Init+0x32c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d101      	bne.n	8002a6a <HAL_GPIO_Init+0x20a>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e00e      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00c      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a6e:	2306      	movs	r3, #6
 8002a70:	e00a      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a72:	2305      	movs	r3, #5
 8002a74:	e008      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e004      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e002      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_GPIO_Init+0x228>
 8002a86:	2300      	movs	r3, #0
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f002 0203 	and.w	r2, r2, #3
 8002a8e:	0092      	lsls	r2, r2, #2
 8002a90:	4093      	lsls	r3, r2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a98:	4934      	ldr	r1, [pc, #208]	; (8002b6c <HAL_GPIO_Init+0x30c>)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	089b      	lsrs	r3, r3, #2
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aa6:	4b3a      	ldr	r3, [pc, #232]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aca:	4a31      	ldr	r2, [pc, #196]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002afa:	4b25      	ldr	r3, [pc, #148]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1e:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b48:	4a11      	ldr	r2, [pc, #68]	; (8002b90 <HAL_GPIO_Init+0x330>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3301      	adds	r3, #1
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b0f      	cmp	r3, #15
 8002b58:	f67f ae90 	bls.w	800287c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b5c:	bf00      	nop
 8002b5e:	3724      	adds	r7, #36	; 0x24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40013800 	.word	0x40013800
 8002b70:	40020000 	.word	0x40020000
 8002b74:	40020400 	.word	0x40020400
 8002b78:	40020800 	.word	0x40020800
 8002b7c:	40020c00 	.word	0x40020c00
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40021400 	.word	0x40021400
 8002b88:	40021800 	.word	0x40021800
 8002b8c:	40021c00 	.word	0x40021c00
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	401a      	ands	r2, r3
 8002bda:	887b      	ldrh	r3, [r7, #2]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d104      	bne.n	8002bea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002be0:	887b      	ldrh	r3, [r7, #2]
 8002be2:	041a      	lsls	r2, r3, #16
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002be8:	e002      	b.n	8002bf0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfe:	b08f      	sub	sp, #60	; 0x3c
 8002c00:	af0a      	add	r7, sp, #40	; 0x28
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e054      	b.n	8002cb8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f007 fe6d 	bl	800a908 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2203      	movs	r2, #3
 8002c32:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f005 f829 	bl	8007ca4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	687e      	ldr	r6, [r7, #4]
 8002c5a:	466d      	mov	r5, sp
 8002c5c:	f106 0410 	add.w	r4, r6, #16
 8002c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c70:	1d33      	adds	r3, r6, #4
 8002c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c74:	6838      	ldr	r0, [r7, #0]
 8002c76:	f004 ffa3 	bl	8007bc0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4618      	mov	r0, r3
 8002c82:	f005 f820 	bl	8007cc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	687e      	ldr	r6, [r7, #4]
 8002c8e:	466d      	mov	r5, sp
 8002c90:	f106 0410 	add.w	r4, r6, #16
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca4:	1d33      	adds	r3, r6, #4
 8002ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca8:	6838      	ldr	r0, [r7, #0]
 8002caa:	f005 f933 	bl	8007f14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cc0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af04      	add	r7, sp, #16
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	70fb      	strb	r3, [r7, #3]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	70bb      	strb	r3, [r7, #2]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_HCD_HC_Init+0x28>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e07f      	b.n	8002de8 <HAL_HCD_HC_Init+0x128>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333d      	adds	r3, #61	; 0x3d
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	3338      	adds	r3, #56	; 0x38
 8002d14:	787a      	ldrb	r2, [r7, #1]
 8002d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3340      	adds	r3, #64	; 0x40
 8002d28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d2a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3339      	adds	r3, #57	; 0x39
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333f      	adds	r3, #63	; 0x3f
 8002d50:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	78bb      	ldrb	r3, [r7, #2]
 8002d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d5e:	b2d8      	uxtb	r0, r3
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	440b      	add	r3, r1
 8002d6c:	333a      	adds	r3, #58	; 0x3a
 8002d6e:	4602      	mov	r2, r0
 8002d70:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da0a      	bge.n	8002d90 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	440b      	add	r3, r1
 8002d88:	333b      	adds	r3, #59	; 0x3b
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
 8002d8e:	e009      	b.n	8002da4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	440b      	add	r3, r1
 8002d9e:	333b      	adds	r3, #59	; 0x3b
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	440b      	add	r3, r1
 8002db2:	333c      	adds	r3, #60	; 0x3c
 8002db4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002db8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	787c      	ldrb	r4, [r7, #1]
 8002dc0:	78ba      	ldrb	r2, [r7, #2]
 8002dc2:	78f9      	ldrb	r1, [r7, #3]
 8002dc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	4623      	mov	r3, r4
 8002dd6:	f005 fa1f 	bl	8008218 <USB_HC_Init>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}

08002df0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_HCD_HC_Halt+0x1e>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e00f      	b.n	8002e2e <HAL_HCD_HC_Halt+0x3e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f005 fc5b 	bl	80086da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	70fb      	strb	r3, [r7, #3]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70bb      	strb	r3, [r7, #2]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	333b      	adds	r3, #59	; 0x3b
 8002e62:	78ba      	ldrb	r2, [r7, #2]
 8002e64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	333f      	adds	r3, #63	; 0x3f
 8002e76:	787a      	ldrb	r2, [r7, #1]
 8002e78:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e7a:	7c3b      	ldrb	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d114      	bne.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3342      	adds	r3, #66	; 0x42
 8002e90:	2203      	movs	r2, #3
 8002e92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	333d      	adds	r3, #61	; 0x3d
 8002ea4:	7f3a      	ldrb	r2, [r7, #28]
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e009      	b.n	8002ebe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3342      	adds	r3, #66	; 0x42
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	f200 80d6 	bhi.w	8003072 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	0800305d 	.word	0x0800305d
 8002ed4:	08002f49 	.word	0x08002f49
 8002ed8:	08002fd3 	.word	0x08002fd3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002edc:	7c3b      	ldrb	r3, [r7, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 80c9 	bne.w	8003076 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002ee4:	78bb      	ldrb	r3, [r7, #2]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80c5 	bne.w	8003076 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002eec:	8b3b      	ldrh	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	440b      	add	r3, r1
 8002f00:	3351      	adds	r3, #81	; 0x51
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	440b      	add	r3, r1
 8002f14:	3351      	adds	r3, #81	; 0x51
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10a      	bne.n	8002f32 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	440b      	add	r3, r1
 8002f2a:	3342      	adds	r3, #66	; 0x42
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f30:	e0a1      	b.n	8003076 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	440b      	add	r3, r1
 8002f40:	3342      	adds	r3, #66	; 0x42
 8002f42:	2202      	movs	r2, #2
 8002f44:	701a      	strb	r2, [r3, #0]
      break;
 8002f46:	e096      	b.n	8003076 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f48:	78bb      	ldrb	r3, [r7, #2]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d120      	bne.n	8002f90 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3351      	adds	r3, #81	; 0x51
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	3342      	adds	r3, #66	; 0x42
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f78:	e07e      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	3342      	adds	r3, #66	; 0x42
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	701a      	strb	r2, [r3, #0]
      break;
 8002f8e:	e073      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	3350      	adds	r3, #80	; 0x50
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10a      	bne.n	8002fbc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	3342      	adds	r3, #66	; 0x42
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
      break;
 8002fba:	e05d      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fbc:	78fa      	ldrb	r2, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	3342      	adds	r3, #66	; 0x42
 8002fcc:	2202      	movs	r2, #2
 8002fce:	701a      	strb	r2, [r3, #0]
      break;
 8002fd0:	e052      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002fd2:	78bb      	ldrb	r3, [r7, #2]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d120      	bne.n	800301a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3351      	adds	r3, #81	; 0x51
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10a      	bne.n	8003004 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3342      	adds	r3, #66	; 0x42
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003002:	e039      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	440b      	add	r3, r1
 8003012:	3342      	adds	r3, #66	; 0x42
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
      break;
 8003018:	e02e      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	440b      	add	r3, r1
 8003028:	3350      	adds	r3, #80	; 0x50
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10a      	bne.n	8003046 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3342      	adds	r3, #66	; 0x42
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
      break;
 8003044:	e018      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	3342      	adds	r3, #66	; 0x42
 8003056:	2202      	movs	r2, #2
 8003058:	701a      	strb	r2, [r3, #0]
      break;
 800305a:	e00d      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	3342      	adds	r3, #66	; 0x42
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
      break;
 8003070:	e002      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003076:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	440b      	add	r3, r1
 8003086:	3344      	adds	r3, #68	; 0x44
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	8b39      	ldrh	r1, [r7, #24]
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4403      	add	r3, r0
 800309c:	3348      	adds	r3, #72	; 0x48
 800309e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	440b      	add	r3, r1
 80030ae:	335c      	adds	r3, #92	; 0x5c
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	334c      	adds	r3, #76	; 0x4c
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3339      	adds	r3, #57	; 0x39
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	335d      	adds	r3, #93	; 0x5d
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	3338      	adds	r3, #56	; 0x38
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	18d1      	adds	r1, r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	f005 f98e 	bl	800842c <USB_HC_StartXfer>
 8003110:	4603      	mov	r3, r0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 feab 	bl	8007e8e <USB_GetMode>
 8003138:	4603      	mov	r3, r0
 800313a:	2b01      	cmp	r3, #1
 800313c:	f040 80ef 	bne.w	800331e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f004 fe8f 	bl	8007e68 <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80e5 	beq.w	800331c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f004 fe86 	bl	8007e68 <USB_ReadInterrupts>
 800315c:	4603      	mov	r3, r0
 800315e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003166:	d104      	bne.n	8003172 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003170:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fe76 	bl	8007e68 <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003186:	d104      	bne.n	8003192 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003190:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 fe66 	bl	8007e68 <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a6:	d104      	bne.n	80031b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f004 fe56 	bl	8007e68 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d103      	bne.n	80031ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2202      	movs	r2, #2
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f004 fe48 	bl	8007e68 <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e2:	d115      	bne.n	8003210 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d108      	bne.n	8003210 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f007 fc00 	bl	800aa04 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2101      	movs	r1, #1
 800320a:	4618      	mov	r0, r3
 800320c:	f004 ff3e 	bl	800808c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fe27 	bl	8007e68 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003224:	d102      	bne.n	800322c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f001 f966 	bl	80044f8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fe19 	bl	8007e68 <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b08      	cmp	r3, #8
 800323e:	d106      	bne.n	800324e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f007 fbc3 	bl	800a9cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2208      	movs	r2, #8
 800324c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f004 fe08 	bl	8007e68 <USB_ReadInterrupts>
 8003258:	4603      	mov	r3, r0
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003262:	d138      	bne.n	80032d6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f005 fa25 	bl	80086b8 <USB_HC_ReadInterrupt>
 800326e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	e025      	b.n	80032c2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	fa22 f303 	lsr.w	r3, r2, r3
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d018      	beq.n	80032bc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800329c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a0:	d106      	bne.n	80032b0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8cf 	bl	800344c <HCD_HC_IN_IRQHandler>
 80032ae:	e005      	b.n	80032bc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	4619      	mov	r1, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fcfd 	bl	8003cb6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3d4      	bcc.n	8003276 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fdc4 	bl	8007e68 <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d101      	bne.n	80032ee <HAL_HCD_IRQHandler+0x1d2>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_HCD_IRQHandler+0x1d4>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d014      	beq.n	800331e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0210 	bic.w	r2, r2, #16
 8003302:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f001 f84b 	bl	80043a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0210 	orr.w	r2, r2, #16
 8003318:	619a      	str	r2, [r3, #24]
 800331a:	e000      	b.n	800331e <HAL_HCD_IRQHandler+0x202>
      return;
 800331c:	bf00      	nop
    }
  }
}
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_HCD_Start+0x16>
 8003336:	2302      	movs	r3, #2
 8003338:	e013      	b.n	8003362 <HAL_HCD_Start+0x3e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f004 fc9b 	bl	8007c82 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fefe 	bl	8008154 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_HCD_Stop+0x16>
 800337c:	2302      	movs	r3, #2
 800337e:	e00d      	b.n	800339c <HAL_HCD_Stop+0x32>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f005 fadf 	bl	8008950 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fea5 	bl	8008100 <USB_ResetPort>
 80033b6:	4603      	mov	r3, r0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	335c      	adds	r3, #92	; 0x5c
 80033dc:	781b      	ldrb	r3, [r3, #0]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	440b      	add	r3, r1
 8003404:	334c      	adds	r3, #76	; 0x4c
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fee7 	bl	80081f4 <USB_GetCurrentFrame>
 8003426:	4603      	mov	r3, r0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fec2 	bl	80081c6 <USB_GetHostSpeed>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d119      	bne.n	80034b0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2304      	movs	r3, #4
 800348c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	0151      	lsls	r1, r2, #5
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	440a      	add	r2, r1
 80034a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	60d3      	str	r3, [r2, #12]
 80034ae:	e0ce      	b.n	800364e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034c6:	d12c      	bne.n	8003522 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	461a      	mov	r2, r3
 80034d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	440b      	add	r3, r1
 80034ea:	335d      	adds	r3, #93	; 0x5d
 80034ec:	2207      	movs	r2, #7
 80034ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	440a      	add	r2, r1
 8003506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f005 f8dd 	bl	80086da <USB_HC_Halt>
 8003520:	e095      	b.n	800364e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d109      	bne.n	800354c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	461a      	mov	r2, r3
 8003546:	2320      	movs	r3, #32
 8003548:	6093      	str	r3, [r2, #8]
 800354a:	e080      	b.n	800364e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b08      	cmp	r3, #8
 8003560:	d134      	bne.n	80035cc <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	0151      	lsls	r1, r2, #5
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	440a      	add	r2, r1
 8003578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	440b      	add	r3, r1
 8003590:	335d      	adds	r3, #93	; 0x5d
 8003592:	2205      	movs	r2, #5
 8003594:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a2:	461a      	mov	r2, r3
 80035a4:	2310      	movs	r3, #16
 80035a6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	461a      	mov	r2, r3
 80035b6:	2308      	movs	r3, #8
 80035b8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f005 f888 	bl	80086da <USB_HC_Halt>
 80035ca:	e040      	b.n	800364e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e2:	d134      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f005 f863 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	2310      	movs	r3, #16
 8003624:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	440b      	add	r3, r1
 8003634:	335d      	adds	r3, #93	; 0x5d
 8003636:	2208      	movs	r2, #8
 8003638:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800364c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003664:	d122      	bne.n	80036ac <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f005 f822 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036aa:	e300      	b.n	8003cae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	f040 80fd 	bne.w	80038be <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01b      	beq.n	8003704 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	440b      	add	r3, r1
 80036da:	3348      	adds	r3, #72	; 0x48
 80036dc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0159      	lsls	r1, r3, #5
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	440b      	add	r3, r1
 80036e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036f0:	1ad1      	subs	r1, r2, r3
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4403      	add	r3, r0
 8003700:	334c      	adds	r3, #76	; 0x4c
 8003702:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	440b      	add	r3, r1
 8003712:	335d      	adds	r3, #93	; 0x5d
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	3358      	adds	r3, #88	; 0x58
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	4413      	add	r3, r2
 8003734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003738:	461a      	mov	r2, r3
 800373a:	2301      	movs	r3, #1
 800373c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	333f      	adds	r3, #63	; 0x3f
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	333f      	adds	r3, #63	; 0x3f
 8003764:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003766:	2b02      	cmp	r3, #2
 8003768:	d121      	bne.n	80037ae <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	4413      	add	r3, r2
 8003772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	440a      	add	r2, r1
 8003780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f004 ffa0 	bl	80086da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a6:	461a      	mov	r2, r3
 80037a8:	2310      	movs	r3, #16
 80037aa:	6093      	str	r3, [r2, #8]
 80037ac:	e070      	b.n	8003890 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	333f      	adds	r3, #63	; 0x3f
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d12a      	bne.n	800381a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	0151      	lsls	r1, r2, #5
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	440a      	add	r2, r1
 80037da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	335c      	adds	r3, #92	; 0x5c
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	b2d8      	uxtb	r0, r3
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	335c      	adds	r3, #92	; 0x5c
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	4601      	mov	r1, r0
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f007 f904 	bl	800aa20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003818:	e03a      	b.n	8003890 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4613      	mov	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	333f      	adds	r3, #63	; 0x3f
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d12f      	bne.n	8003890 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	335c      	adds	r3, #92	; 0x5c
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	3350      	adds	r3, #80	; 0x50
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	f083 0301 	eor.w	r3, r3, #1
 800385a:	b2d8      	uxtb	r0, r3
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	440b      	add	r3, r1
 800386a:	3350      	adds	r3, #80	; 0x50
 800386c:	4602      	mov	r2, r0
 800386e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	b2d8      	uxtb	r0, r3
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	335c      	adds	r3, #92	; 0x5c
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4601      	mov	r1, r0
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f007 f8c8 	bl	800aa20 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	440b      	add	r3, r1
 800389e:	3350      	adds	r3, #80	; 0x50
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2d8      	uxtb	r0, r3
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3350      	adds	r3, #80	; 0x50
 80038b8:	4602      	mov	r2, r0
 80038ba:	701a      	strb	r2, [r3, #0]
}
 80038bc:	e1f7      	b.n	8003cae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	f040 811a 	bne.w	8003b0a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f0:	f023 0302 	bic.w	r3, r3, #2
 80038f4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	440b      	add	r3, r1
 8003904:	335d      	adds	r3, #93	; 0x5d
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10a      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	440b      	add	r3, r1
 800391a:	335c      	adds	r3, #92	; 0x5c
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
 8003920:	e0d9      	b.n	8003ad6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	335d      	adds	r3, #93	; 0x5d
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b05      	cmp	r3, #5
 8003936:	d10a      	bne.n	800394e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	335c      	adds	r3, #92	; 0x5c
 8003948:	2205      	movs	r2, #5
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e0c3      	b.n	8003ad6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	335d      	adds	r3, #93	; 0x5d
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b06      	cmp	r3, #6
 8003962:	d00a      	beq.n	800397a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	440b      	add	r3, r1
 8003972:	335d      	adds	r3, #93	; 0x5d
 8003974:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003976:	2b08      	cmp	r3, #8
 8003978:	d156      	bne.n	8003a28 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	3358      	adds	r3, #88	; 0x58
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1c59      	adds	r1, r3, #1
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4403      	add	r3, r0
 800399c:	3358      	adds	r3, #88	; 0x58
 800399e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	440b      	add	r3, r1
 80039ae:	3358      	adds	r3, #88	; 0x58
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d914      	bls.n	80039e0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	440b      	add	r3, r1
 80039c4:	3358      	adds	r3, #88	; 0x58
 80039c6:	2200      	movs	r2, #0
 80039c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	440b      	add	r3, r1
 80039d8:	335c      	adds	r3, #92	; 0x5c
 80039da:	2204      	movs	r2, #4
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e009      	b.n	80039f4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	440b      	add	r3, r1
 80039ee:	335c      	adds	r3, #92	; 0x5c
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a0a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a12:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	461a      	mov	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e056      	b.n	8003ad6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	440b      	add	r3, r1
 8003a36:	335d      	adds	r3, #93	; 0x5d
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d123      	bne.n	8003a86 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	440b      	add	r3, r1
 8003a4c:	335c      	adds	r3, #92	; 0x5c
 8003a4e:	2202      	movs	r2, #2
 8003a50:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a68:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a70:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	e027      	b.n	8003ad6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	335d      	adds	r3, #93	; 0x5d
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b07      	cmp	r3, #7
 8003a9a:	d11c      	bne.n	8003ad6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3358      	adds	r3, #88	; 0x58
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4403      	add	r3, r0
 8003abe:	3358      	adds	r3, #88	; 0x58
 8003ac0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	4413      	add	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	440b      	add	r3, r1
 8003ad0:	335c      	adds	r3, #92	; 0x5c
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	b2d8      	uxtb	r0, r3
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	335c      	adds	r3, #92	; 0x5c
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	461a      	mov	r2, r3
 8003b00:	4601      	mov	r1, r0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f006 ff8c 	bl	800aa20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b08:	e0d1      	b.n	8003cae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1c:	2b80      	cmp	r3, #128	; 0x80
 8003b1e:	d13e      	bne.n	8003b9e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003b40:	6879      	ldr	r1, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3358      	adds	r3, #88	; 0x58
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	1c59      	adds	r1, r3, #1
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4403      	add	r3, r0
 8003b62:	3358      	adds	r3, #88	; 0x58
 8003b64:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	440b      	add	r3, r1
 8003b74:	335d      	adds	r3, #93	; 0x5d
 8003b76:	2206      	movs	r2, #6
 8003b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 fda8 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b96:	461a      	mov	r2, r3
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	6093      	str	r3, [r2, #8]
}
 8003b9c:	e087      	b.n	8003cae <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 0310 	and.w	r3, r3, #16
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d17c      	bne.n	8003cae <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	333f      	adds	r3, #63	; 0x3f
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d122      	bne.n	8003c10 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	3358      	adds	r3, #88	; 0x58
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 fd66 	bl	80086da <USB_HC_Halt>
 8003c0e:	e045      	b.n	8003c9c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	333f      	adds	r3, #63	; 0x3f
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	440b      	add	r3, r1
 8003c34:	333f      	adds	r3, #63	; 0x3f
 8003c36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d12f      	bne.n	8003c9c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	440b      	add	r3, r1
 8003c4a:	3358      	adds	r3, #88	; 0x58
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d121      	bne.n	8003c9c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	440b      	add	r3, r1
 8003c66:	335d      	adds	r3, #93	; 0x5d
 8003c68:	2203      	movs	r2, #3
 8003c6a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c86:	f043 0302 	orr.w	r3, r3, #2
 8003c8a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fd1f 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2310      	movs	r3, #16
 8003cac:	6093      	str	r3, [r2, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d119      	bne.n	8003d1a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	0151      	lsls	r1, r2, #5
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	440a      	add	r2, r1
 8003d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d12:	f043 0302 	orr.w	r3, r3, #2
 8003d16:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003d18:	e33e      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d141      	bne.n	8003db4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2320      	movs	r3, #32
 8003d40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4613      	mov	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4413      	add	r3, r2
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	440b      	add	r3, r1
 8003d50:	333d      	adds	r3, #61	; 0x3d
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	f040 831f 	bne.w	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	440b      	add	r3, r1
 8003d68:	333d      	adds	r3, #61	; 0x3d
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	440b      	add	r3, r1
 8003d7c:	335c      	adds	r3, #92	; 0x5c
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	0151      	lsls	r1, r2, #5
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	440a      	add	r2, r1
 8003d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d9c:	f043 0302 	orr.w	r3, r3, #2
 8003da0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	4611      	mov	r1, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f004 fc94 	bl	80086da <USB_HC_Halt>
}
 8003db2:	e2f1      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d13f      	bne.n	8003e4a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	335d      	adds	r3, #93	; 0x5d
 8003dda:	2204      	movs	r2, #4
 8003ddc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	440b      	add	r3, r1
 8003dec:	333d      	adds	r3, #61	; 0x3d
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	440b      	add	r3, r1
 8003e00:	3358      	adds	r3, #88	; 0x58
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	0151      	lsls	r1, r2, #5
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	440a      	add	r2, r1
 8003e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f004 fc52 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e42:	461a      	mov	r2, r3
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	6093      	str	r3, [r2, #8]
}
 8003e48:	e2a6      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e60:	d122      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	0151      	lsls	r1, r2, #5
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	440a      	add	r2, r1
 8003e78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e7c:	f043 0302 	orr.w	r3, r3, #2
 8003e80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f004 fc24 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ea4:	6093      	str	r3, [r2, #8]
}
 8003ea6:	e277      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d135      	bne.n	8003f2a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3358      	adds	r3, #88	; 0x58
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eec:	f043 0302 	orr.w	r3, r3, #2
 8003ef0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 fbec 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	461a      	mov	r2, r3
 8003f10:	2301      	movs	r3, #1
 8003f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	335d      	adds	r3, #93	; 0x5d
 8003f24:	2201      	movs	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
}
 8003f28:	e236      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d12b      	bne.n	8003f98 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2308      	movs	r3, #8
 8003f50:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 fbac 	bl	80086da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4613      	mov	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	440b      	add	r3, r1
 8003f90:	335d      	adds	r3, #93	; 0x5d
 8003f92:	2205      	movs	r2, #5
 8003f94:	701a      	strb	r2, [r3, #0]
}
 8003f96:	e1ff      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d155      	bne.n	800405a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	440b      	add	r3, r1
 8003fbc:	3358      	adds	r3, #88	; 0x58
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	440b      	add	r3, r1
 8003fd0:	335d      	adds	r3, #93	; 0x5d
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	333d      	adds	r3, #61	; 0x3d
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d114      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	333c      	adds	r3, #60	; 0x3c
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	440b      	add	r3, r1
 8004010:	333d      	adds	r3, #61	; 0x3d
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	0151      	lsls	r1, r2, #5
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	440a      	add	r2, r1
 800402c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fb4a 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4413      	add	r3, r2
 800404e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004052:	461a      	mov	r2, r3
 8004054:	2310      	movs	r3, #16
 8004056:	6093      	str	r3, [r2, #8]
}
 8004058:	e19e      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4413      	add	r3, r2
 8004062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b80      	cmp	r3, #128	; 0x80
 800406e:	d12b      	bne.n	80040c8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	440a      	add	r2, r1
 8004086:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f004 fb1d 	bl	80086da <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	440b      	add	r3, r1
 80040ae:	335d      	adds	r3, #93	; 0x5d
 80040b0:	2206      	movs	r2, #6
 80040b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c0:	461a      	mov	r2, r3
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	6093      	str	r3, [r2, #8]
}
 80040c6:	e167      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040de:	d135      	bne.n	800414c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f004 fae5 	bl	80086da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4413      	add	r3, r2
 8004118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411c:	461a      	mov	r2, r3
 800411e:	2310      	movs	r3, #16
 8004120:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004134:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	440b      	add	r3, r1
 8004144:	335d      	adds	r3, #93	; 0x5d
 8004146:	2208      	movs	r2, #8
 8004148:	701a      	strb	r2, [r3, #0]
}
 800414a:	e125      	b.n	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	4413      	add	r3, r2
 8004154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	f040 811a 	bne.w	8004398 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	440a      	add	r2, r1
 800417a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417e:	f023 0302 	bic.w	r3, r3, #2
 8004182:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	440b      	add	r3, r1
 8004192:	335d      	adds	r3, #93	; 0x5d
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d137      	bne.n	800420a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	335c      	adds	r3, #92	; 0x5c
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	333f      	adds	r3, #63	; 0x3f
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d00b      	beq.n	80041dc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	440b      	add	r3, r1
 80041d2:	333f      	adds	r3, #63	; 0x3f
 80041d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	f040 80c5 	bne.w	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	3351      	adds	r3, #81	; 0x51
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2d8      	uxtb	r0, r3
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	3351      	adds	r3, #81	; 0x51
 8004204:	4602      	mov	r2, r0
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e0ad      	b.n	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	440b      	add	r3, r1
 8004218:	335d      	adds	r3, #93	; 0x5d
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b03      	cmp	r3, #3
 800421e:	d10a      	bne.n	8004236 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	440b      	add	r3, r1
 800422e:	335c      	adds	r3, #92	; 0x5c
 8004230:	2202      	movs	r2, #2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e097      	b.n	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	440b      	add	r3, r1
 8004244:	335d      	adds	r3, #93	; 0x5d
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d10a      	bne.n	8004262 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	440b      	add	r3, r1
 800425a:	335c      	adds	r3, #92	; 0x5c
 800425c:	2202      	movs	r2, #2
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e081      	b.n	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	335d      	adds	r3, #93	; 0x5d
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10a      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	335c      	adds	r3, #92	; 0x5c
 8004288:	2205      	movs	r2, #5
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e06b      	b.n	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	440b      	add	r3, r1
 800429c:	335d      	adds	r3, #93	; 0x5d
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	2b06      	cmp	r3, #6
 80042a2:	d00a      	beq.n	80042ba <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	440b      	add	r3, r1
 80042b2:	335d      	adds	r3, #93	; 0x5d
 80042b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d155      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	3358      	adds	r3, #88	; 0x58
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	1c59      	adds	r1, r3, #1
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4403      	add	r3, r0
 80042dc:	3358      	adds	r3, #88	; 0x58
 80042de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	3358      	adds	r3, #88	; 0x58
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d914      	bls.n	8004320 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	3358      	adds	r3, #88	; 0x58
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	335c      	adds	r3, #92	; 0x5c
 800431a:	2204      	movs	r2, #4
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e009      	b.n	8004334 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	335c      	adds	r3, #92	; 0x5c
 8004330:	2202      	movs	r2, #2
 8004332:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4413      	add	r3, r2
 800433c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800434a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004352:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4413      	add	r3, r2
 800436e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004372:	461a      	mov	r2, r3
 8004374:	2302      	movs	r3, #2
 8004376:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	b2d8      	uxtb	r0, r3
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	335c      	adds	r3, #92	; 0x5c
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4601      	mov	r1, r0
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f006 fb44 	bl	800aa20 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004398:	bf00      	nop
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	0c5b      	lsrs	r3, r3, #17
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d003      	beq.n	80043e4 <HCD_RXQLVL_IRQHandler+0x44>
 80043dc:	2b05      	cmp	r3, #5
 80043de:	f000 8082 	beq.w	80044e6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043e2:	e083      	b.n	80044ec <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d07f      	beq.n	80044ea <HCD_RXQLVL_IRQHandler+0x14a>
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	440b      	add	r3, r1
 80043f8:	3344      	adds	r3, #68	; 0x44
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d074      	beq.n	80044ea <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4613      	mov	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	440b      	add	r3, r1
 8004412:	3344      	adds	r3, #68	; 0x44
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	b292      	uxth	r2, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f003 fcfb 	bl	8007e16 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	440b      	add	r3, r1
 800442e:	3344      	adds	r3, #68	; 0x44
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	18d1      	adds	r1, r2, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4403      	add	r3, r0
 8004444:	3344      	adds	r3, #68	; 0x44
 8004446:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	440b      	add	r3, r1
 8004456:	334c      	adds	r3, #76	; 0x4c
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	18d1      	adds	r1, r2, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4403      	add	r3, r0
 800446c:	334c      	adds	r3, #76	; 0x4c
 800446e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447c:	691a      	ldr	r2, [r3, #16]
 800447e:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <HCD_RXQLVL_IRQHandler+0x154>)
 8004480:	4013      	ands	r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d031      	beq.n	80044ea <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800449c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	440b      	add	r3, r1
 80044c6:	3350      	adds	r3, #80	; 0x50
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	f083 0301 	eor.w	r3, r3, #1
 80044ce:	b2d8      	uxtb	r0, r3
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4613      	mov	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	440b      	add	r3, r1
 80044de:	3350      	adds	r3, #80	; 0x50
 80044e0:	4602      	mov	r2, r0
 80044e2:	701a      	strb	r2, [r3, #0]
      break;
 80044e4:	e001      	b.n	80044ea <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044ea:	bf00      	nop
  }
}
 80044ec:	bf00      	nop
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	1ff80000 	.word	0x1ff80000

080044f8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004524:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d10b      	bne.n	8004548 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d102      	bne.n	8004540 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f006 fa54 	bl	800a9e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f043 0302 	orr.w	r3, r3, #2
 8004546:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d132      	bne.n	80045b8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f043 0308 	orr.w	r3, r3, #8
 8004558:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b04      	cmp	r3, #4
 8004562:	d126      	bne.n	80045b2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b02      	cmp	r3, #2
 800456a:	d113      	bne.n	8004594 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004572:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004576:	d106      	bne.n	8004586 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2102      	movs	r1, #2
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fd84 	bl	800808c <USB_InitFSLSPClkSel>
 8004584:	e011      	b.n	80045aa <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f003 fd7d 	bl	800808c <USB_InitFSLSPClkSel>
 8004592:	e00a      	b.n	80045aa <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a2:	461a      	mov	r2, r3
 80045a4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80045a8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f006 fa46 	bl	800aa3c <HAL_HCD_PortEnabled_Callback>
 80045b0:	e002      	b.n	80045b8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f006 fa50 	bl	800aa58 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d103      	bne.n	80045ca <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0320 	orr.w	r3, r3, #32
 80045c8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045d0:	461a      	mov	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	6013      	str	r3, [r2, #0]
}
 80045d6:	bf00      	nop
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e11f      	b.n	8004832 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fd3a 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	; 0x24
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004644:	f001 f9de 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8004648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4a7b      	ldr	r2, [pc, #492]	; (800483c <HAL_I2C_Init+0x25c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d807      	bhi.n	8004664 <HAL_I2C_Init+0x84>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_I2C_Init+0x260>)
 8004658:	4293      	cmp	r3, r2
 800465a:	bf94      	ite	ls
 800465c:	2301      	movls	r3, #1
 800465e:	2300      	movhi	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e006      	b.n	8004672 <HAL_I2C_Init+0x92>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4a77      	ldr	r2, [pc, #476]	; (8004844 <HAL_I2C_Init+0x264>)
 8004668:	4293      	cmp	r3, r2
 800466a:	bf94      	ite	ls
 800466c:	2301      	movls	r3, #1
 800466e:	2300      	movhi	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e0db      	b.n	8004832 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a72      	ldr	r2, [pc, #456]	; (8004848 <HAL_I2C_Init+0x268>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	0c9b      	lsrs	r3, r3, #18
 8004684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	4a64      	ldr	r2, [pc, #400]	; (800483c <HAL_I2C_Init+0x25c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d802      	bhi.n	80046b4 <HAL_I2C_Init+0xd4>
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	3301      	adds	r3, #1
 80046b2:	e009      	b.n	80046c8 <HAL_I2C_Init+0xe8>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046ba:	fb02 f303 	mul.w	r3, r2, r3
 80046be:	4a63      	ldr	r2, [pc, #396]	; (800484c <HAL_I2C_Init+0x26c>)
 80046c0:	fba2 2303 	umull	r2, r3, r2, r3
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	3301      	adds	r3, #1
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4956      	ldr	r1, [pc, #344]	; (800483c <HAL_I2C_Init+0x25c>)
 80046e4:	428b      	cmp	r3, r1
 80046e6:	d80d      	bhi.n	8004704 <HAL_I2C_Init+0x124>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e59      	subs	r1, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	bf38      	it	cc
 8004700:	2304      	movcc	r3, #4
 8004702:	e04f      	b.n	80047a4 <HAL_I2C_Init+0x1c4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d111      	bne.n	8004730 <HAL_I2C_Init+0x150>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e58      	subs	r0, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	440b      	add	r3, r1
 800471a:	fbb0 f3f3 	udiv	r3, r0, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e012      	b.n	8004756 <HAL_I2C_Init+0x176>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	0099      	lsls	r1, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Init+0x17e>
 800475a:	2301      	movs	r3, #1
 800475c:	e022      	b.n	80047a4 <HAL_I2C_Init+0x1c4>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <HAL_I2C_Init+0x1a4>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1e58      	subs	r0, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	440b      	add	r3, r1
 8004774:	fbb0 f3f3 	udiv	r3, r0, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004782:	e00f      	b.n	80047a4 <HAL_I2C_Init+0x1c4>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	0099      	lsls	r1, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	fbb0 f3f3 	udiv	r3, r0, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	6809      	ldr	r1, [r1, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6911      	ldr	r1, [r2, #16]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	4311      	orrs	r1, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	000186a0 	.word	0x000186a0
 8004840:	001e847f 	.word	0x001e847f
 8004844:	003d08ff 	.word	0x003d08ff
 8004848:	431bde83 	.word	0x431bde83
 800484c:	10624dd3 	.word	0x10624dd3

08004850 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e128      	b.n	8004ab4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a90      	ldr	r2, [pc, #576]	; (8004abc <HAL_I2S_Init+0x26c>)
 800487a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fc fc47 	bl	8001110 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6812      	ldr	r2, [r2, #0]
 8004894:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004898:	f023 030f 	bic.w	r3, r3, #15
 800489c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2202      	movs	r2, #2
 80048a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d060      	beq.n	8004970 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80048b6:	2310      	movs	r3, #16
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e001      	b.n	80048c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80048bc:	2320      	movs	r3, #32
 80048be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	d802      	bhi.n	80048ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80048ce:	2001      	movs	r0, #1
 80048d0:	f001 f9a2 	bl	8005c18 <HAL_RCCEx_GetPeriphCLKFreq>
 80048d4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048de:	d125      	bne.n	800492c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	461a      	mov	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	3305      	adds	r3, #5
 8004906:	613b      	str	r3, [r7, #16]
 8004908:	e01f      	b.n	800494a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	fbb2 f2f3 	udiv	r2, r2, r3
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	3305      	adds	r3, #5
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e00e      	b.n	800494a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	fbb2 f2f3 	udiv	r2, r2, r3
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	3305      	adds	r3, #5
 8004948:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4a5c      	ldr	r2, [pc, #368]	; (8004ac0 <HAL_I2S_Init+0x270>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	08db      	lsrs	r3, r3, #3
 8004954:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e003      	b.n	8004978 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004970:	2302      	movs	r3, #2
 8004972:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d902      	bls.n	8004984 <HAL_I2S_Init+0x134>
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2bff      	cmp	r3, #255	; 0xff
 8004982:	d907      	bls.n	8004994 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f043 0210 	orr.w	r2, r3, #16
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e08f      	b.n	8004ab4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	ea42 0103 	orr.w	r1, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049b2:	f023 030f 	bic.w	r3, r3, #15
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6851      	ldr	r1, [r2, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	4311      	orrs	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68d2      	ldr	r2, [r2, #12]
 80049c4:	4311      	orrs	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6992      	ldr	r2, [r2, #24]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d161      	bne.n	8004aa4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a38      	ldr	r2, [pc, #224]	; (8004ac4 <HAL_I2S_Init+0x274>)
 80049e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a37      	ldr	r2, [pc, #220]	; (8004ac8 <HAL_I2S_Init+0x278>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d101      	bne.n	80049f4 <HAL_I2S_Init+0x1a4>
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_I2S_Init+0x27c>)
 80049f2:	e001      	b.n	80049f8 <HAL_I2S_Init+0x1a8>
 80049f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6812      	ldr	r2, [r2, #0]
 80049fe:	4932      	ldr	r1, [pc, #200]	; (8004ac8 <HAL_I2S_Init+0x278>)
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d101      	bne.n	8004a08 <HAL_I2S_Init+0x1b8>
 8004a04:	4a31      	ldr	r2, [pc, #196]	; (8004acc <HAL_I2S_Init+0x27c>)
 8004a06:	e001      	b.n	8004a0c <HAL_I2S_Init+0x1bc>
 8004a08:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a0c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a10:	f023 030f 	bic.w	r3, r3, #15
 8004a14:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_I2S_Init+0x278>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_I2S_Init+0x1d4>
 8004a20:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <HAL_I2S_Init+0x27c>)
 8004a22:	e001      	b.n	8004a28 <HAL_I2S_Init+0x1d8>
 8004a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a28:	2202      	movs	r2, #2
 8004a2a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <HAL_I2S_Init+0x278>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_I2S_Init+0x1ea>
 8004a36:	4b25      	ldr	r3, [pc, #148]	; (8004acc <HAL_I2S_Init+0x27c>)
 8004a38:	e001      	b.n	8004a3e <HAL_I2S_Init+0x1ee>
 8004a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4a:	d003      	beq.n	8004a54 <HAL_I2S_Init+0x204>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d103      	bne.n	8004a5c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e001      	b.n	8004a60 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	b299      	uxth	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004a76:	4303      	orrs	r3, r0
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	897b      	ldrh	r3, [r7, #10]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a8c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <HAL_I2S_Init+0x278>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d101      	bne.n	8004a9c <HAL_I2S_Init+0x24c>
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_I2S_Init+0x27c>)
 8004a9a:	e001      	b.n	8004aa0 <HAL_I2S_Init+0x250>
 8004a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aa0:	897a      	ldrh	r2, [r7, #10]
 8004aa2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3720      	adds	r7, #32
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	08004bc7 	.word	0x08004bc7
 8004ac0:	cccccccd 	.word	0xcccccccd
 8004ac4:	08004cdd 	.word	0x08004cdd
 8004ac8:	40003800 	.word	0x40003800
 8004acc:	40003400 	.word	0x40003400

08004ad0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	881a      	ldrh	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c9a      	adds	r2, r3, #2
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10e      	bne.n	8004b60 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b50:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff ffb8 	bl	8004ad0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10e      	bne.n	8004bbe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff93 	bl	8004ae4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d13a      	bne.n	8004c58 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d109      	bne.n	8004c00 <I2S_IRQHandler+0x3a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b40      	cmp	r3, #64	; 0x40
 8004bf8:	d102      	bne.n	8004c00 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ffb4 	bl	8004b68 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d126      	bne.n	8004c58 <I2S_IRQHandler+0x92>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f003 0320 	and.w	r3, r3, #32
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d11f      	bne.n	8004c58 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c26:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004c28:	2300      	movs	r3, #0
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	613b      	str	r3, [r7, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	f043 0202 	orr.w	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff ff50 	bl	8004af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d136      	bne.n	8004cd2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d109      	bne.n	8004c82 <I2S_IRQHandler+0xbc>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d102      	bne.n	8004c82 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff45 	bl	8004b0c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d122      	bne.n	8004cd2 <I2S_IRQHandler+0x10c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d11b      	bne.n	8004cd2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ca8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc4:	f043 0204 	orr.w	r2, r3, #4
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff13 	bl	8004af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4aa2      	ldr	r2, [pc, #648]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004cf6:	4ba2      	ldr	r3, [pc, #648]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cf8:	e001      	b.n	8004cfe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a9b      	ldr	r2, [pc, #620]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d101      	bne.n	8004d18 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d14:	4b9a      	ldr	r3, [pc, #616]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d16:	e001      	b.n	8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004d18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d28:	d004      	beq.n	8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f040 8099 	bne.w	8004e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d107      	bne.n	8004d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f925 	bl	8004f98 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9c8 	bl	80050f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d13a      	bne.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d035      	beq.n	8004de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7e      	ldr	r2, [pc, #504]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004d86:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d88:	e001      	b.n	8004d8e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4979      	ldr	r1, [pc, #484]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d96:	428b      	cmp	r3, r1
 8004d98:	d101      	bne.n	8004d9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004d9a:	4b79      	ldr	r3, [pc, #484]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d9c:	e001      	b.n	8004da2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004da6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004db6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	f043 0202 	orr.w	r2, r3, #2
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fe88 	bl	8004af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	f040 80be 	bne.w	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80b8 	beq.w	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e0e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a59      	ldr	r2, [pc, #356]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004e1a:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e1c:	e001      	b.n	8004e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4954      	ldr	r1, [pc, #336]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e2a:	428b      	cmp	r3, r1
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004e2e:	4b54      	ldr	r3, [pc, #336]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e30:	e001      	b.n	8004e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e3a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	60bb      	str	r3, [r7, #8]
 8004e48:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f043 0204 	orr.w	r2, r3, #4
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7ff fe4a 	bl	8004af8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e64:	e084      	b.n	8004f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d107      	bne.n	8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f8be 	bl	8004ffc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f8fd 	bl	8005094 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d12f      	bne.n	8004f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d02a      	beq.n	8004f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ebc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2e      	ldr	r2, [pc, #184]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ec8:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eca:	e001      	b.n	8004ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ecc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4929      	ldr	r1, [pc, #164]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004edc:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ede:	e001      	b.n	8004ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004ee0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	f043 0202 	orr.w	r2, r3, #2
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f7ff fdfa 	bl	8004af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d131      	bne.n	8004f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d02c      	beq.n	8004f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004f22:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f24:	e001      	b.n	8004f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4912      	ldr	r1, [pc, #72]	; (8004f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f32:	428b      	cmp	r3, r1
 8004f34:	d101      	bne.n	8004f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f38:	e001      	b.n	8004f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f52:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f60:	f043 0204 	orr.w	r2, r3, #4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fdc5 	bl	8004af8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f6e:	e000      	b.n	8004f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f70:	bf00      	nop
}
 8004f72:	bf00      	nop
 8004f74:	3720      	adds	r7, #32
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40003800 	.word	0x40003800
 8004f80:	40003400 	.word	0x40003400

08004f84 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c99      	adds	r1, r3, #2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6251      	str	r1, [r2, #36]	; 0x24
 8004faa:	881a      	ldrh	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d113      	bne.n	8004ff2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fd8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ffc9 	bl	8004f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	1c99      	adds	r1, r3, #2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	6251      	str	r1, [r2, #36]	; 0x24
 800500e:	8819      	ldrh	r1, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1d      	ldr	r2, [pc, #116]	; (800508c <I2SEx_TxISR_I2SExt+0x90>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <I2SEx_TxISR_I2SExt+0x22>
 800501a:	4b1d      	ldr	r3, [pc, #116]	; (8005090 <I2SEx_TxISR_I2SExt+0x94>)
 800501c:	e001      	b.n	8005022 <I2SEx_TxISR_I2SExt+0x26>
 800501e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005022:	460a      	mov	r2, r1
 8005024:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d121      	bne.n	8005082 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a12      	ldr	r2, [pc, #72]	; (800508c <I2SEx_TxISR_I2SExt+0x90>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d101      	bne.n	800504c <I2SEx_TxISR_I2SExt+0x50>
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <I2SEx_TxISR_I2SExt+0x94>)
 800504a:	e001      	b.n	8005050 <I2SEx_TxISR_I2SExt+0x54>
 800504c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	490d      	ldr	r1, [pc, #52]	; (800508c <I2SEx_TxISR_I2SExt+0x90>)
 8005058:	428b      	cmp	r3, r1
 800505a:	d101      	bne.n	8005060 <I2SEx_TxISR_I2SExt+0x64>
 800505c:	4b0c      	ldr	r3, [pc, #48]	; (8005090 <I2SEx_TxISR_I2SExt+0x94>)
 800505e:	e001      	b.n	8005064 <I2SEx_TxISR_I2SExt+0x68>
 8005060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005068:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff81 	bl	8004f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005082:	bf00      	nop
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40003800 	.word	0x40003800
 8005090:	40003400 	.word	0x40003400

08005094 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68d8      	ldr	r0, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	1c99      	adds	r1, r3, #2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80050ac:	b282      	uxth	r2, r0
 80050ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d113      	bne.n	80050f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7ff ff4a 	bl	8004f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a20      	ldr	r2, [pc, #128]	; (8005188 <I2SEx_RxISR_I2SExt+0x90>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <I2SEx_RxISR_I2SExt+0x16>
 800510a:	4b20      	ldr	r3, [pc, #128]	; (800518c <I2SEx_RxISR_I2SExt+0x94>)
 800510c:	e001      	b.n	8005112 <I2SEx_RxISR_I2SExt+0x1a>
 800510e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005112:	68d8      	ldr	r0, [r3, #12]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	1c99      	adds	r1, r3, #2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800511e:	b282      	uxth	r2, r0
 8005120:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005134:	b29b      	uxth	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d121      	bne.n	800517e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a12      	ldr	r2, [pc, #72]	; (8005188 <I2SEx_RxISR_I2SExt+0x90>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <I2SEx_RxISR_I2SExt+0x50>
 8005144:	4b11      	ldr	r3, [pc, #68]	; (800518c <I2SEx_RxISR_I2SExt+0x94>)
 8005146:	e001      	b.n	800514c <I2SEx_RxISR_I2SExt+0x54>
 8005148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	490d      	ldr	r1, [pc, #52]	; (8005188 <I2SEx_RxISR_I2SExt+0x90>)
 8005154:	428b      	cmp	r3, r1
 8005156:	d101      	bne.n	800515c <I2SEx_RxISR_I2SExt+0x64>
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <I2SEx_RxISR_I2SExt+0x94>)
 800515a:	e001      	b.n	8005160 <I2SEx_RxISR_I2SExt+0x68>
 800515c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005160:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005164:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ff03 	bl	8004f84 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800517e:	bf00      	nop
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40003800 	.word	0x40003800
 800518c:	40003400 	.word	0x40003400

08005190 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e25b      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d075      	beq.n	800529a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051ae:	4ba3      	ldr	r3, [pc, #652]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d00c      	beq.n	80051d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4ba0      	ldr	r3, [pc, #640]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d112      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051c6:	4b9d      	ldr	r3, [pc, #628]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d2:	d10b      	bne.n	80051ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	4b99      	ldr	r3, [pc, #612]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05b      	beq.n	8005298 <HAL_RCC_OscConfig+0x108>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d157      	bne.n	8005298 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e236      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f4:	d106      	bne.n	8005204 <HAL_RCC_OscConfig+0x74>
 80051f6:	4b91      	ldr	r3, [pc, #580]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a90      	ldr	r2, [pc, #576]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0x98>
 800520e:	4b8b      	ldr	r3, [pc, #556]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a8a      	ldr	r2, [pc, #552]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b88      	ldr	r3, [pc, #544]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a87      	ldr	r2, [pc, #540]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xb0>
 8005228:	4b84      	ldr	r3, [pc, #528]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a83      	ldr	r2, [pc, #524]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b81      	ldr	r3, [pc, #516]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a80      	ldr	r2, [pc, #512]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fc fa46 	bl	80016d8 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fc fa42 	bl	80016d8 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e1fb      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005262:	4b76      	ldr	r3, [pc, #472]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xc0>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005270:	f7fc fa32 	bl	80016d8 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005278:	f7fc fa2e 	bl	80016d8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e1e7      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528a:	4b6c      	ldr	r3, [pc, #432]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0xe8>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d063      	beq.n	800536e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052a6:	4b65      	ldr	r3, [pc, #404]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b62      	ldr	r3, [pc, #392]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d11c      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052be:	4b5f      	ldr	r3, [pc, #380]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d116      	bne.n	80052f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	4b5c      	ldr	r3, [pc, #368]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d005      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e1bb      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b56      	ldr	r3, [pc, #344]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4952      	ldr	r1, [pc, #328]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052f6:	e03a      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005300:	4b4f      	ldr	r3, [pc, #316]	; (8005440 <HAL_RCC_OscConfig+0x2b0>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fc f9e7 	bl	80016d8 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800530e:	f7fc f9e3 	bl	80016d8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e19c      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005320:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532c:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	4940      	ldr	r1, [pc, #256]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800533c:	4313      	orrs	r3, r2
 800533e:	600b      	str	r3, [r1, #0]
 8005340:	e015      	b.n	800536e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005342:	4b3f      	ldr	r3, [pc, #252]	; (8005440 <HAL_RCC_OscConfig+0x2b0>)
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fc f9c6 	bl	80016d8 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005350:	f7fc f9c2 	bl	80016d8 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b02      	cmp	r3, #2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e17b      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005362:	4b36      	ldr	r3, [pc, #216]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1f0      	bne.n	8005350 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d030      	beq.n	80053dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005382:	4b30      	ldr	r3, [pc, #192]	; (8005444 <HAL_RCC_OscConfig+0x2b4>)
 8005384:	2201      	movs	r2, #1
 8005386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005388:	f7fc f9a6 	bl	80016d8 <HAL_GetTick>
 800538c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fc f9a2 	bl	80016d8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e15b      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053a2:	4b26      	ldr	r3, [pc, #152]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80053a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0f0      	beq.n	8005390 <HAL_RCC_OscConfig+0x200>
 80053ae:	e015      	b.n	80053dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_RCC_OscConfig+0x2b4>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b6:	f7fc f98f 	bl	80016d8 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053be:	f7fc f98b 	bl	80016d8 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e144      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d0:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80053d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 80a0 	beq.w	800552a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4b13      	ldr	r3, [pc, #76]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	4b0f      	ldr	r3, [pc, #60]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a0e      	ldr	r2, [pc, #56]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	; 0x40
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_OscConfig+0x2b8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d121      	bne.n	800546a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005426:	4b08      	ldr	r3, [pc, #32]	; (8005448 <HAL_RCC_OscConfig+0x2b8>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a07      	ldr	r2, [pc, #28]	; (8005448 <HAL_RCC_OscConfig+0x2b8>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005432:	f7fc f951 	bl	80016d8 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	e011      	b.n	800545e <HAL_RCC_OscConfig+0x2ce>
 800543a:	bf00      	nop
 800543c:	40023800 	.word	0x40023800
 8005440:	42470000 	.word	0x42470000
 8005444:	42470e80 	.word	0x42470e80
 8005448:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544c:	f7fc f944 	bl	80016d8 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0fd      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545e:	4b81      	ldr	r3, [pc, #516]	; (8005664 <HAL_RCC_OscConfig+0x4d4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d106      	bne.n	8005480 <HAL_RCC_OscConfig+0x2f0>
 8005472:	4b7d      	ldr	r3, [pc, #500]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	4a7c      	ldr	r2, [pc, #496]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	6713      	str	r3, [r2, #112]	; 0x70
 800547e:	e01c      	b.n	80054ba <HAL_RCC_OscConfig+0x32a>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b05      	cmp	r3, #5
 8005486:	d10c      	bne.n	80054a2 <HAL_RCC_OscConfig+0x312>
 8005488:	4b77      	ldr	r3, [pc, #476]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	4a76      	ldr	r2, [pc, #472]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6713      	str	r3, [r2, #112]	; 0x70
 8005494:	4b74      	ldr	r3, [pc, #464]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005498:	4a73      	ldr	r2, [pc, #460]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	6713      	str	r3, [r2, #112]	; 0x70
 80054a0:	e00b      	b.n	80054ba <HAL_RCC_OscConfig+0x32a>
 80054a2:	4b71      	ldr	r3, [pc, #452]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4a70      	ldr	r2, [pc, #448]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	6713      	str	r3, [r2, #112]	; 0x70
 80054ae:	4b6e      	ldr	r3, [pc, #440]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	4a6d      	ldr	r2, [pc, #436]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d015      	beq.n	80054ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fc f909 	bl	80016d8 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054ca:	f7fc f905 	bl	80016d8 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	4293      	cmp	r3, r2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0bc      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e0:	4b61      	ldr	r3, [pc, #388]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ee      	beq.n	80054ca <HAL_RCC_OscConfig+0x33a>
 80054ec:	e014      	b.n	8005518 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ee:	f7fc f8f3 	bl	80016d8 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054f4:	e00a      	b.n	800550c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fc f8ef 	bl	80016d8 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	; 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e0a6      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800550c:	4b56      	ldr	r3, [pc, #344]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ee      	bne.n	80054f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d105      	bne.n	800552a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800551e:	4b52      	ldr	r3, [pc, #328]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	4a51      	ldr	r2, [pc, #324]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005528:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8092 	beq.w	8005658 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005534:	4b4c      	ldr	r3, [pc, #304]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b08      	cmp	r3, #8
 800553e:	d05c      	beq.n	80055fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d141      	bne.n	80055cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b48      	ldr	r3, [pc, #288]	; (800566c <HAL_RCC_OscConfig+0x4dc>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fc f8c3 	bl	80016d8 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005556:	f7fc f8bf 	bl	80016d8 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e078      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005568:	4b3f      	ldr	r3, [pc, #252]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1f0      	bne.n	8005556 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69da      	ldr	r2, [r3, #28]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a1b      	ldr	r3, [r3, #32]
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	019b      	lsls	r3, r3, #6
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	3b01      	subs	r3, #1
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	061b      	lsls	r3, r3, #24
 8005598:	4933      	ldr	r1, [pc, #204]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 800559a:	4313      	orrs	r3, r2
 800559c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800559e:	4b33      	ldr	r3, [pc, #204]	; (800566c <HAL_RCC_OscConfig+0x4dc>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fc f898 	bl	80016d8 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc f894 	bl	80016d8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e04d      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055be:	4b2a      	ldr	r3, [pc, #168]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x41c>
 80055ca:	e045      	b.n	8005658 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055cc:	4b27      	ldr	r3, [pc, #156]	; (800566c <HAL_RCC_OscConfig+0x4dc>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d2:	f7fc f881 	bl	80016d8 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055da:	f7fc f87d 	bl	80016d8 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e036      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ec:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f0      	bne.n	80055da <HAL_RCC_OscConfig+0x44a>
 80055f8:	e02e      	b.n	8005658 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e029      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005606:	4b18      	ldr	r3, [pc, #96]	; (8005668 <HAL_RCC_OscConfig+0x4d8>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	429a      	cmp	r2, r3
 8005618:	d11c      	bne.n	8005654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d115      	bne.n	8005654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800562e:	4013      	ands	r3, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005634:	4293      	cmp	r3, r2
 8005636:	d10d      	bne.n	8005654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d106      	bne.n	8005654 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d001      	beq.n	8005658 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40007000 	.word	0x40007000
 8005668:	40023800 	.word	0x40023800
 800566c:	42470060 	.word	0x42470060

08005670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0cc      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005684:	4b68      	ldr	r3, [pc, #416]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 030f 	and.w	r3, r3, #15
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90c      	bls.n	80056ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005692:	4b65      	ldr	r3, [pc, #404]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	4b63      	ldr	r3, [pc, #396]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0b8      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c4:	4b59      	ldr	r3, [pc, #356]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4a58      	ldr	r2, [pc, #352]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056dc:	4b53      	ldr	r3, [pc, #332]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	4a52      	ldr	r2, [pc, #328]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056e8:	4b50      	ldr	r3, [pc, #320]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	494d      	ldr	r1, [pc, #308]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d044      	beq.n	8005790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d107      	bne.n	800571e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800570e:	4b47      	ldr	r3, [pc, #284]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e07f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d003      	beq.n	800572e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572a:	2b03      	cmp	r3, #3
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3f      	ldr	r3, [pc, #252]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800573e:	4b3b      	ldr	r3, [pc, #236]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e067      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800574e:	4b37      	ldr	r3, [pc, #220]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4934      	ldr	r1, [pc, #208]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005760:	f7fb ffba 	bl	80016d8 <HAL_GetTick>
 8005764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005766:	e00a      	b.n	800577e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005768:	f7fb ffb6 	bl	80016d8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	f241 3288 	movw	r2, #5000	; 0x1388
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e04f      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577e:	4b2b      	ldr	r3, [pc, #172]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 020c 	and.w	r2, r3, #12
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	429a      	cmp	r2, r3
 800578e:	d1eb      	bne.n	8005768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005790:	4b25      	ldr	r3, [pc, #148]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	429a      	cmp	r2, r3
 800579c:	d20c      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579e:	4b22      	ldr	r3, [pc, #136]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	b2d2      	uxtb	r2, r2
 80057a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	4b20      	ldr	r3, [pc, #128]	; (8005828 <HAL_RCC_ClockConfig+0x1b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 030f 	and.w	r3, r3, #15
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e032      	b.n	800581e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b19      	ldr	r3, [pc, #100]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b12      	ldr	r3, [pc, #72]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	490e      	ldr	r1, [pc, #56]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057f6:	f000 f821 	bl	800583c <HAL_RCC_GetSysClockFreq>
 80057fa:	4601      	mov	r1, r0
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCC_ClockConfig+0x1bc>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	091b      	lsrs	r3, r3, #4
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	4a0a      	ldr	r2, [pc, #40]	; (8005830 <HAL_RCC_ClockConfig+0x1c0>)
 8005808:	5cd3      	ldrb	r3, [r2, r3]
 800580a:	fa21 f303 	lsr.w	r3, r1, r3
 800580e:	4a09      	ldr	r2, [pc, #36]	; (8005834 <HAL_RCC_ClockConfig+0x1c4>)
 8005810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005812:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1c8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f7fb ff1a 	bl	8001650 <HAL_InitTick>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	40023c00 	.word	0x40023c00
 800582c:	40023800 	.word	0x40023800
 8005830:	0800b88c 	.word	0x0800b88c
 8005834:	20000000 	.word	0x20000000
 8005838:	20000004 	.word	0x20000004

0800583c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	2300      	movs	r3, #0
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	2300      	movs	r3, #0
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005852:	4b63      	ldr	r3, [pc, #396]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	f003 030c 	and.w	r3, r3, #12
 800585a:	2b04      	cmp	r3, #4
 800585c:	d007      	beq.n	800586e <HAL_RCC_GetSysClockFreq+0x32>
 800585e:	2b08      	cmp	r3, #8
 8005860:	d008      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x38>
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 80b4 	bne.w	80059d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005868:	4b5e      	ldr	r3, [pc, #376]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800586a:	60bb      	str	r3, [r7, #8]
       break;
 800586c:	e0b3      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800586e:	4b5e      	ldr	r3, [pc, #376]	; (80059e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005870:	60bb      	str	r3, [r7, #8]
      break;
 8005872:	e0b0      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005874:	4b5a      	ldr	r3, [pc, #360]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800587c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800587e:	4b58      	ldr	r3, [pc, #352]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d04a      	beq.n	8005920 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800588a:	4b55      	ldr	r3, [pc, #340]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	099b      	lsrs	r3, r3, #6
 8005890:	f04f 0400 	mov.w	r4, #0
 8005894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	ea03 0501 	and.w	r5, r3, r1
 80058a0:	ea04 0602 	and.w	r6, r4, r2
 80058a4:	4629      	mov	r1, r5
 80058a6:	4632      	mov	r2, r6
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	f04f 0400 	mov.w	r4, #0
 80058b0:	0154      	lsls	r4, r2, #5
 80058b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058b6:	014b      	lsls	r3, r1, #5
 80058b8:	4619      	mov	r1, r3
 80058ba:	4622      	mov	r2, r4
 80058bc:	1b49      	subs	r1, r1, r5
 80058be:	eb62 0206 	sbc.w	r2, r2, r6
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	f04f 0400 	mov.w	r4, #0
 80058ca:	0194      	lsls	r4, r2, #6
 80058cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058d0:	018b      	lsls	r3, r1, #6
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	eb64 0402 	sbc.w	r4, r4, r2
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	00e2      	lsls	r2, r4, #3
 80058e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058e6:	00d9      	lsls	r1, r3, #3
 80058e8:	460b      	mov	r3, r1
 80058ea:	4614      	mov	r4, r2
 80058ec:	195b      	adds	r3, r3, r5
 80058ee:	eb44 0406 	adc.w	r4, r4, r6
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	0262      	lsls	r2, r4, #9
 80058fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005900:	0259      	lsls	r1, r3, #9
 8005902:	460b      	mov	r3, r1
 8005904:	4614      	mov	r4, r2
 8005906:	4618      	mov	r0, r3
 8005908:	4621      	mov	r1, r4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f04f 0400 	mov.w	r4, #0
 8005910:	461a      	mov	r2, r3
 8005912:	4623      	mov	r3, r4
 8005914:	f7fa fcac 	bl	8000270 <__aeabi_uldivmod>
 8005918:	4603      	mov	r3, r0
 800591a:	460c      	mov	r4, r1
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e049      	b.n	80059b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005920:	4b2f      	ldr	r3, [pc, #188]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	099b      	lsrs	r3, r3, #6
 8005926:	f04f 0400 	mov.w	r4, #0
 800592a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800592e:	f04f 0200 	mov.w	r2, #0
 8005932:	ea03 0501 	and.w	r5, r3, r1
 8005936:	ea04 0602 	and.w	r6, r4, r2
 800593a:	4629      	mov	r1, r5
 800593c:	4632      	mov	r2, r6
 800593e:	f04f 0300 	mov.w	r3, #0
 8005942:	f04f 0400 	mov.w	r4, #0
 8005946:	0154      	lsls	r4, r2, #5
 8005948:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800594c:	014b      	lsls	r3, r1, #5
 800594e:	4619      	mov	r1, r3
 8005950:	4622      	mov	r2, r4
 8005952:	1b49      	subs	r1, r1, r5
 8005954:	eb62 0206 	sbc.w	r2, r2, r6
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	f04f 0400 	mov.w	r4, #0
 8005960:	0194      	lsls	r4, r2, #6
 8005962:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005966:	018b      	lsls	r3, r1, #6
 8005968:	1a5b      	subs	r3, r3, r1
 800596a:	eb64 0402 	sbc.w	r4, r4, r2
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	f04f 0200 	mov.w	r2, #0
 8005976:	00e2      	lsls	r2, r4, #3
 8005978:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800597c:	00d9      	lsls	r1, r3, #3
 800597e:	460b      	mov	r3, r1
 8005980:	4614      	mov	r4, r2
 8005982:	195b      	adds	r3, r3, r5
 8005984:	eb44 0406 	adc.w	r4, r4, r6
 8005988:	f04f 0100 	mov.w	r1, #0
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	02a2      	lsls	r2, r4, #10
 8005992:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005996:	0299      	lsls	r1, r3, #10
 8005998:	460b      	mov	r3, r1
 800599a:	4614      	mov	r4, r2
 800599c:	4618      	mov	r0, r3
 800599e:	4621      	mov	r1, r4
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f04f 0400 	mov.w	r4, #0
 80059a6:	461a      	mov	r2, r3
 80059a8:	4623      	mov	r3, r4
 80059aa:	f7fa fc61 	bl	8000270 <__aeabi_uldivmod>
 80059ae:	4603      	mov	r3, r0
 80059b0:	460c      	mov	r4, r1
 80059b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	3301      	adds	r3, #1
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	60bb      	str	r3, [r7, #8]
      break;
 80059ce:	e002      	b.n	80059d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059d0:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059d2:	60bb      	str	r3, [r7, #8]
      break;
 80059d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059d6:	68bb      	ldr	r3, [r7, #8]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059e0:	40023800 	.word	0x40023800
 80059e4:	00f42400 	.word	0x00f42400
 80059e8:	007a1200 	.word	0x007a1200

080059ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <HAL_RCC_GetHCLKFreq+0x14>)
 80059f2:	681b      	ldr	r3, [r3, #0]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20000000 	.word	0x20000000

08005a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a08:	f7ff fff0 	bl	80059ec <HAL_RCC_GetHCLKFreq>
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	0a9b      	lsrs	r3, r3, #10
 8005a14:	f003 0307 	and.w	r3, r3, #7
 8005a18:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a1a:	5cd3      	ldrb	r3, [r2, r3]
 8005a1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	40023800 	.word	0x40023800
 8005a28:	0800b89c 	.word	0x0800b89c

08005a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a30:	f7ff ffdc 	bl	80059ec <HAL_RCC_GetHCLKFreq>
 8005a34:	4601      	mov	r1, r0
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	0b5b      	lsrs	r3, r3, #13
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	4a03      	ldr	r2, [pc, #12]	; (8005a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a42:	5cd3      	ldrb	r3, [r2, r3]
 8005a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	0800b89c 	.word	0x0800b89c

08005a54 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d105      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d035      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a7c:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a82:	f7fb fe29 	bl	80016d8 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a8a:	f7fb fe25 	bl	80016d8 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0b0      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a9c:	4b5b      	ldr	r3, [pc, #364]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1f0      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	019a      	lsls	r2, r3, #6
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	071b      	lsls	r3, r3, #28
 8005ab4:	4955      	ldr	r1, [pc, #340]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005abc:	4b52      	ldr	r3, [pc, #328]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ac2:	f7fb fe09 	bl	80016d8 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005aca:	f7fb fe05 	bl	80016d8 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e090      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005adc:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f0      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 8083 	beq.w	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	4a43      	ldr	r2, [pc, #268]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b04:	6413      	str	r3, [r2, #64]	; 0x40
 8005b06:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a3e      	ldr	r2, [pc, #248]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b1e:	f7fb fddb 	bl	80016d8 <HAL_GetTick>
 8005b22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fb fdd7 	bl	80016d8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e062      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b38:	4b35      	ldr	r3, [pc, #212]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0f0      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b44:	4b31      	ldr	r3, [pc, #196]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d028      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b62:	4b2a      	ldr	r3, [pc, #168]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6c:	4b29      	ldr	r3, [pc, #164]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b72:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b78:	4a24      	ldr	r2, [pc, #144]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b7e:	4b23      	ldr	r3, [pc, #140]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d114      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fb fda5 	bl	80016d8 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fb fda1 	bl	80016d8 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e02a      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bc0:	d10d      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005bc2:	4b12      	ldr	r3, [pc, #72]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd6:	490d      	ldr	r1, [pc, #52]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a0a      	ldr	r2, [pc, #40]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	4905      	ldr	r1, [pc, #20]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	42470068 	.word	0x42470068
 8005c0c:	40023800 	.word	0x40023800
 8005c10:	40007000 	.word	0x40007000
 8005c14:	42470e40 	.word	0x42470e40

08005c18 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d13d      	bne.n	8005cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005c36:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c3e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d004      	beq.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d12f      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005c4c:	617b      	str	r3, [r7, #20]
          break;
 8005c4e:	e02f      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005c50:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c5c:	d108      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c5e:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	e007      	b.n	8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005c70:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c78:	4a14      	ldr	r2, [pc, #80]	; (8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005c80:	4b0f      	ldr	r3, [pc, #60]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c86:	099b      	lsrs	r3, r3, #6
 8005c88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005c94:	4b0a      	ldr	r3, [pc, #40]	; (8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9a:	0f1b      	lsrs	r3, r3, #28
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca6:	617b      	str	r3, [r7, #20]
          break;
 8005ca8:	e002      	b.n	8005cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
          break;
 8005cae:	bf00      	nop
        }
      }
      break;
 8005cb0:	bf00      	nop
    }
  }
  return frequency;
 8005cb2:	697b      	ldr	r3, [r7, #20]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	371c      	adds	r7, #28
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	00bb8000 	.word	0x00bb8000
 8005cc8:	007a1200 	.word	0x007a1200
 8005ccc:	00f42400 	.word	0x00f42400

08005cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e056      	b.n	8005d90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb fa6f 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	ea42 0103 	orr.w	r1, r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	0c1b      	lsrs	r3, r3, #16
 8005d60:	f003 0104 	and.w	r1, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e01d      	b.n	8005de6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fb fa56 	bl	8001270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 fcb8 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b06      	cmp	r3, #6
 8005e16:	d007      	beq.n	8005e28 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e01d      	b.n	8005e84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f815 	bl	8005e8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 fc69 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e0f3      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start_DMA+0x3a>
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e0e5      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b0c      	cmp	r3, #12
 8005ee6:	f200 80ad 	bhi.w	8006044 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005eea:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <HAL_TIM_PWM_Start_DMA+0x50>)
 8005eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef0:	08005f25 	.word	0x08005f25
 8005ef4:	08006045 	.word	0x08006045
 8005ef8:	08006045 	.word	0x08006045
 8005efc:	08006045 	.word	0x08006045
 8005f00:	08005f6d 	.word	0x08005f6d
 8005f04:	08006045 	.word	0x08006045
 8005f08:	08006045 	.word	0x08006045
 8005f0c:	08006045 	.word	0x08006045
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08006045 	.word	0x08006045
 8005f18:	08006045 	.word	0x08006045
 8005f1c:	08006045 	.word	0x08006045
 8005f20:	08005ffd 	.word	0x08005ffd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4a61      	ldr	r2, [pc, #388]	; (80060b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005f2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	4a60      	ldr	r2, [pc, #384]	; (80060b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 8005f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	4a5f      	ldr	r2, [pc, #380]	; (80060b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 8005f3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3334      	adds	r3, #52	; 0x34
 8005f48:	461a      	mov	r2, r3
 8005f4a:	887b      	ldrh	r3, [r7, #2]
 8005f4c:	f7fc f9a6 	bl	800229c <HAL_DMA_Start_IT>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e0a5      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f68:	60da      	str	r2, [r3, #12]
      break;
 8005f6a:	e06c      	b.n	8006046 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	4a4f      	ldr	r2, [pc, #316]	; (80060b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	4a4e      	ldr	r2, [pc, #312]	; (80060b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f80:	4a4d      	ldr	r2, [pc, #308]	; (80060b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 8005f82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3338      	adds	r3, #56	; 0x38
 8005f90:	461a      	mov	r2, r3
 8005f92:	887b      	ldrh	r3, [r7, #2]
 8005f94:	f7fc f982 	bl	800229c <HAL_DMA_Start_IT>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e081      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb0:	60da      	str	r2, [r3, #12]
      break;
 8005fb2:	e048      	b.n	8006046 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a3d      	ldr	r2, [pc, #244]	; (80060b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005fba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a3c      	ldr	r2, [pc, #240]	; (80060b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 8005fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	4a3b      	ldr	r2, [pc, #236]	; (80060b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 8005fca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	333c      	adds	r3, #60	; 0x3c
 8005fd8:	461a      	mov	r2, r3
 8005fda:	887b      	ldrh	r3, [r7, #2]
 8005fdc:	f7fc f95e 	bl	800229c <HAL_DMA_Start_IT>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e05d      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff8:	60da      	str	r2, [r3, #12]
      break;
 8005ffa:	e024      	b.n	8006046 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4a2b      	ldr	r2, [pc, #172]	; (80060b0 <HAL_TIM_PWM_Start_DMA+0x210>)
 8006002:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <HAL_TIM_PWM_Start_DMA+0x214>)
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <HAL_TIM_PWM_Start_DMA+0x218>)
 8006012:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3340      	adds	r3, #64	; 0x40
 8006020:	461a      	mov	r2, r3
 8006022:	887b      	ldrh	r3, [r7, #2]
 8006024:	f7fc f93a 	bl	800229c <HAL_DMA_Start_IT>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e039      	b.n	80060a6 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68da      	ldr	r2, [r3, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006040:	60da      	str	r2, [r3, #12]
      break;
 8006042:	e000      	b.n	8006046 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8006044:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2201      	movs	r2, #1
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fe66 	bl	8006d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_TIM_PWM_Start_DMA+0x21c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a17      	ldr	r2, [pc, #92]	; (80060c0 <HAL_TIM_PWM_Start_DMA+0x220>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d101      	bne.n	800606c <HAL_TIM_PWM_Start_DMA+0x1cc>
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <HAL_TIM_PWM_Start_DMA+0x1ce>
 800606c:	2300      	movs	r3, #0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	2b06      	cmp	r3, #6
 8006092:	d007      	beq.n	80060a4 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	0800666b 	.word	0x0800666b
 80060b4:	080066db 	.word	0x080066db
 80060b8:	08006647 	.word	0x08006647
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d122      	bne.n	8006120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d11b      	bne.n	8006120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0202 	mvn.w	r2, #2
 80060f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa6b 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa5d 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fa6e 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0304 	and.w	r3, r3, #4
 800612a:	2b04      	cmp	r3, #4
 800612c:	d122      	bne.n	8006174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b04      	cmp	r3, #4
 800613a:	d11b      	bne.n	8006174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0204 	mvn.w	r2, #4
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa41 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa33 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa44 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b08      	cmp	r3, #8
 8006180:	d122      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d11b      	bne.n	80061c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0208 	mvn.w	r2, #8
 8006198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2204      	movs	r2, #4
 800619e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa17 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 80061b4:	e005      	b.n	80061c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fa09 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa1a 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	2b10      	cmp	r3, #16
 80061d4:	d122      	bne.n	800621c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d11b      	bne.n	800621c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f06f 0210 	mvn.w	r2, #16
 80061ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2208      	movs	r2, #8
 80061f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f9ed 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 8006208:	e005      	b.n	8006216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9df 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f9f0 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b01      	cmp	r3, #1
 8006228:	d10e      	bne.n	8006248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0201 	mvn.w	r2, #1
 8006240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7fa f994 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006252:	2b80      	cmp	r3, #128	; 0x80
 8006254:	d10e      	bne.n	8006274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006260:	2b80      	cmp	r3, #128	; 0x80
 8006262:	d107      	bne.n	8006274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800626c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fe02 	bl	8006e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d10e      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d107      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f9bf 	bl	800661e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d10e      	bne.n	80062cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0320 	and.w	r3, r3, #32
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d107      	bne.n	80062cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0220 	mvn.w	r2, #32
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fdcc 	bl	8006e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0b4      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x184>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b0c      	cmp	r3, #12
 8006302:	f200 809f 	bhi.w	8006444 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	08006341 	.word	0x08006341
 8006310:	08006445 	.word	0x08006445
 8006314:	08006445 	.word	0x08006445
 8006318:	08006445 	.word	0x08006445
 800631c:	08006381 	.word	0x08006381
 8006320:	08006445 	.word	0x08006445
 8006324:	08006445 	.word	0x08006445
 8006328:	08006445 	.word	0x08006445
 800632c:	080063c3 	.word	0x080063c3
 8006330:	08006445 	.word	0x08006445
 8006334:	08006445 	.word	0x08006445
 8006338:	08006445 	.word	0x08006445
 800633c:	08006403 	.word	0x08006403
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68b9      	ldr	r1, [r7, #8]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 faa0 	bl	800688c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	699a      	ldr	r2, [r3, #24]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0208 	orr.w	r2, r2, #8
 800635a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0204 	bic.w	r2, r2, #4
 800636a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6999      	ldr	r1, [r3, #24]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	619a      	str	r2, [r3, #24]
      break;
 800637e:	e062      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 faf0 	bl	800696c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	619a      	str	r2, [r3, #24]
      break;
 80063c0:	e041      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fb45 	bl	8006a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69da      	ldr	r2, [r3, #28]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f042 0208 	orr.w	r2, r2, #8
 80063dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0204 	bic.w	r2, r2, #4
 80063ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69d9      	ldr	r1, [r3, #28]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	61da      	str	r2, [r3, #28]
      break;
 8006400:	e021      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fb99 	bl	8006b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	021a      	lsls	r2, r3, #8
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	61da      	str	r2, [r3, #28]
      break;
 8006442:	e000      	b.n	8006446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006444:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIM_ConfigClockSource+0x18>
 8006474:	2302      	movs	r3, #2
 8006476:	e0a6      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x166>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d067      	beq.n	8006580 <HAL_TIM_ConfigClockSource+0x120>
 80064b0:	2b40      	cmp	r3, #64	; 0x40
 80064b2:	d80b      	bhi.n	80064cc <HAL_TIM_ConfigClockSource+0x6c>
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d073      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x140>
 80064b8:	2b10      	cmp	r3, #16
 80064ba:	d802      	bhi.n	80064c2 <HAL_TIM_ConfigClockSource+0x62>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d06f      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80064c0:	e078      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d06c      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x140>
 80064c6:	2b30      	cmp	r3, #48	; 0x30
 80064c8:	d06a      	beq.n	80065a0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80064ca:	e073      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064cc:	2b70      	cmp	r3, #112	; 0x70
 80064ce:	d00d      	beq.n	80064ec <HAL_TIM_ConfigClockSource+0x8c>
 80064d0:	2b70      	cmp	r3, #112	; 0x70
 80064d2:	d804      	bhi.n	80064de <HAL_TIM_ConfigClockSource+0x7e>
 80064d4:	2b50      	cmp	r3, #80	; 0x50
 80064d6:	d033      	beq.n	8006540 <HAL_TIM_ConfigClockSource+0xe0>
 80064d8:	2b60      	cmp	r3, #96	; 0x60
 80064da:	d041      	beq.n	8006560 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80064dc:	e06a      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80064de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e2:	d066      	beq.n	80065b2 <HAL_TIM_ConfigClockSource+0x152>
 80064e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e8:	d017      	beq.n	800651a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80064ea:	e063      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	6899      	ldr	r1, [r3, #8]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f000 fbf0 	bl	8006ce0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800650e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]
      break;
 8006518:	e04c      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6818      	ldr	r0, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6899      	ldr	r1, [r3, #8]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f000 fbd9 	bl	8006ce0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800653c:	609a      	str	r2, [r3, #8]
      break;
 800653e:	e039      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6859      	ldr	r1, [r3, #4]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	461a      	mov	r2, r3
 800654e:	f000 fb4d 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2150      	movs	r1, #80	; 0x50
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fba6 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800655e:	e029      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6818      	ldr	r0, [r3, #0]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	6859      	ldr	r1, [r3, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	461a      	mov	r2, r3
 800656e:	f000 fb6c 	bl	8006c4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2160      	movs	r1, #96	; 0x60
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fb96 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800657e:	e019      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	461a      	mov	r2, r3
 800658e:	f000 fb2d 	bl	8006bec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2140      	movs	r1, #64	; 0x40
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fb86 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 800659e:	e009      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4619      	mov	r1, r3
 80065aa:	4610      	mov	r0, r2
 80065ac:	f000 fb7d 	bl	8006caa <TIM_ITRx_SetConfig>
      break;
 80065b0:	e000      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80065b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f7ff ffe8 	bl	8006632 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	429a      	cmp	r2, r3
 8006688:	d103      	bne.n	8006692 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	771a      	strb	r2, [r3, #28]
 8006690:	e019      	b.n	80066c6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d103      	bne.n	80066a4 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2202      	movs	r2, #2
 80066a0:	771a      	strb	r2, [r3, #28]
 80066a2:	e010      	b.n	80066c6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d103      	bne.n	80066b6 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2204      	movs	r2, #4
 80066b2:	771a      	strb	r2, [r3, #28]
 80066b4:	e007      	b.n	80066c6 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d102      	bne.n	80066c6 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2208      	movs	r2, #8
 80066c4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff ff95 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	771a      	strb	r2, [r3, #28]
}
 80066d2:	bf00      	nop
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d103      	bne.n	8006702 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	771a      	strb	r2, [r3, #28]
 8006700:	e019      	b.n	8006736 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	429a      	cmp	r2, r3
 800670a:	d103      	bne.n	8006714 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2202      	movs	r2, #2
 8006710:	771a      	strb	r2, [r3, #28]
 8006712:	e010      	b.n	8006736 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	429a      	cmp	r2, r3
 800671c:	d103      	bne.n	8006726 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2204      	movs	r2, #4
 8006722:	771a      	strb	r2, [r3, #28]
 8006724:	e007      	b.n	8006736 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	429a      	cmp	r2, r3
 800672e:	d102      	bne.n	8006736 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2208      	movs	r2, #8
 8006734:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff ff67 	bl	800660a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	771a      	strb	r2, [r3, #28]
}
 8006742:	bf00      	nop
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a40      	ldr	r2, [pc, #256]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d013      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d00f      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a3d      	ldr	r2, [pc, #244]	; (8006864 <TIM_Base_SetConfig+0x118>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a3b      	ldr	r2, [pc, #236]	; (800686c <TIM_Base_SetConfig+0x120>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a3a      	ldr	r2, [pc, #232]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d108      	bne.n	800679e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a2f      	ldr	r2, [pc, #188]	; (8006860 <TIM_Base_SetConfig+0x114>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ac:	d027      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a2c      	ldr	r2, [pc, #176]	; (8006864 <TIM_Base_SetConfig+0x118>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d023      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a2b      	ldr	r2, [pc, #172]	; (8006868 <TIM_Base_SetConfig+0x11c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01f      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2a      	ldr	r2, [pc, #168]	; (800686c <TIM_Base_SetConfig+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a29      	ldr	r2, [pc, #164]	; (8006870 <TIM_Base_SetConfig+0x124>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d017      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a28      	ldr	r2, [pc, #160]	; (8006874 <TIM_Base_SetConfig+0x128>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d013      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a27      	ldr	r2, [pc, #156]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00f      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <TIM_Base_SetConfig+0x130>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d00b      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a25      	ldr	r2, [pc, #148]	; (8006880 <TIM_Base_SetConfig+0x134>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a24      	ldr	r2, [pc, #144]	; (8006884 <TIM_Base_SetConfig+0x138>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a23      	ldr	r2, [pc, #140]	; (8006888 <TIM_Base_SetConfig+0x13c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d108      	bne.n	8006810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <TIM_Base_SetConfig+0x114>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_Base_SetConfig+0xf8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a0c      	ldr	r2, [pc, #48]	; (8006870 <TIM_Base_SetConfig+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d103      	bne.n	800684c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	691a      	ldr	r2, [r3, #16]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	615a      	str	r2, [r3, #20]
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40000400 	.word	0x40000400
 8006868:	40000800 	.word	0x40000800
 800686c:	40000c00 	.word	0x40000c00
 8006870:	40010400 	.word	0x40010400
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800
 8006880:	40001800 	.word	0x40001800
 8006884:	40001c00 	.word	0x40001c00
 8006888:	40002000 	.word	0x40002000

0800688c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	f023 0201 	bic.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 0302 	bic.w	r3, r3, #2
 80068d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a20      	ldr	r2, [pc, #128]	; (8006964 <TIM_OC1_SetConfig+0xd8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d003      	beq.n	80068f0 <TIM_OC1_SetConfig+0x64>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <TIM_OC1_SetConfig+0xdc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d10c      	bne.n	800690a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f023 0308 	bic.w	r3, r3, #8
 80068f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0304 	bic.w	r3, r3, #4
 8006908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a15      	ldr	r2, [pc, #84]	; (8006964 <TIM_OC1_SetConfig+0xd8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d003      	beq.n	800691a <TIM_OC1_SetConfig+0x8e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <TIM_OC1_SetConfig+0xdc>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d111      	bne.n	800693e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	621a      	str	r2, [r3, #32]
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400

0800696c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0210 	bic.w	r2, r3, #16
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0320 	bic.w	r3, r3, #32
 80069b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a22      	ldr	r2, [pc, #136]	; (8006a50 <TIM_OC2_SetConfig+0xe4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_OC2_SetConfig+0x68>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a21      	ldr	r2, [pc, #132]	; (8006a54 <TIM_OC2_SetConfig+0xe8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10d      	bne.n	80069f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a17      	ldr	r2, [pc, #92]	; (8006a50 <TIM_OC2_SetConfig+0xe4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC2_SetConfig+0x94>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <TIM_OC2_SetConfig+0xe8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d113      	bne.n	8006a28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0303 	bic.w	r3, r3, #3
 8006a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <TIM_OC3_SetConfig+0xe0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d003      	beq.n	8006abe <TIM_OC3_SetConfig+0x66>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a20      	ldr	r2, [pc, #128]	; (8006b3c <TIM_OC3_SetConfig+0xe4>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d10d      	bne.n	8006ada <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a16      	ldr	r2, [pc, #88]	; (8006b38 <TIM_OC3_SetConfig+0xe0>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC3_SetConfig+0x92>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a15      	ldr	r2, [pc, #84]	; (8006b3c <TIM_OC3_SetConfig+0xe4>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d113      	bne.n	8006b12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	011b      	lsls	r3, r3, #4
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40010400 	.word	0x40010400

08006b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a12      	ldr	r2, [pc, #72]	; (8006be4 <TIM_OC4_SetConfig+0xa4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <TIM_OC4_SetConfig+0x68>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a11      	ldr	r2, [pc, #68]	; (8006be8 <TIM_OC4_SetConfig+0xa8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d109      	bne.n	8006bbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	019b      	lsls	r3, r3, #6
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40010400 	.word	0x40010400

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0210 	bic.w	r2, r3, #16
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	031b      	lsls	r3, r3, #12
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	621a      	str	r2, [r3, #32]
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b085      	sub	sp, #20
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cc2:	683a      	ldr	r2, [r7, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f043 0307 	orr.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f003 031f 	and.w	r3, r3, #31
 8006d32:	2201      	movs	r2, #1
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1a      	ldr	r2, [r3, #32]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	401a      	ands	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a1a      	ldr	r2, [r3, #32]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	f003 031f 	and.w	r3, r3, #31
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	fa01 f303 	lsl.w	r3, r1, r3
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	371c      	adds	r7, #28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
	...

08006d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d80:	2302      	movs	r3, #2
 8006d82:	e05a      	b.n	8006e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a21      	ldr	r2, [pc, #132]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d022      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd0:	d01d      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d018      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a1b      	ldr	r2, [pc, #108]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d013      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a1a      	ldr	r2, [pc, #104]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d00e      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d009      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a17      	ldr	r2, [pc, #92]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d004      	beq.n	8006e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a15      	ldr	r2, [pc, #84]	; (8006e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10c      	bne.n	8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40000400 	.word	0x40000400
 8006e50:	40000800 	.word	0x40000800
 8006e54:	40000c00 	.word	0x40000c00
 8006e58:	40010400 	.word	0x40010400
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40001800 	.word	0x40001800

08006e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e03f      	b.n	8006f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fa fa88 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2224      	movs	r2, #36	; 0x24
 8006ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 faf9 	bl	80074c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695a      	ldr	r2, [r3, #20]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68da      	ldr	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	60f8      	str	r0, [r7, #12]
 8006f2e:	60b9      	str	r1, [r7, #8]
 8006f30:	4613      	mov	r3, r2
 8006f32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d130      	bne.n	8006fa2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_UART_Transmit_IT+0x26>
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e029      	b.n	8006fa4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_UART_Transmit_IT+0x38>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e022      	b.n	8006fa4 <HAL_UART_Transmit_IT+0x7e>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	88fa      	ldrh	r2, [r7, #6]
 8006f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	88fa      	ldrh	r2, [r7, #6]
 8006f76:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2221      	movs	r2, #33	; 0x21
 8006f82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	e000      	b.n	8006fa4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
  }
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d140      	bne.n	800704c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_UART_Receive_IT+0x26>
 8006fd0:	88fb      	ldrh	r3, [r7, #6]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e039      	b.n	800704e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d101      	bne.n	8006fe8 <HAL_UART_Receive_IT+0x38>
 8006fe4:	2302      	movs	r3, #2
 8006fe6:	e032      	b.n	800704e <HAL_UART_Receive_IT+0x9e>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	88fa      	ldrh	r2, [r7, #6]
 8006ffa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	88fa      	ldrh	r2, [r7, #6]
 8007000:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2222      	movs	r2, #34	; 0x22
 800700c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007026:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695a      	ldr	r2, [r3, #20]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0220 	orr.w	r2, r2, #32
 8007046:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
	...

0800705c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10d      	bne.n	80070ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_UART_IRQHandler+0x52>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f98c 	bl	80073c4 <UART_Receive_IT>
      return;
 80070ac:	e0d1      	b.n	8007252 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80b0 	beq.w	8007216 <HAL_UART_IRQHandler+0x1ba>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d105      	bne.n	80070cc <HAL_UART_IRQHandler+0x70>
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80a5 	beq.w	8007216 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00a      	beq.n	80070ec <HAL_UART_IRQHandler+0x90>
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d005      	beq.n	80070ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e4:	f043 0201 	orr.w	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_UART_IRQHandler+0xb0>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007104:	f043 0202 	orr.w	r2, r3, #2
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <HAL_UART_IRQHandler+0xd0>
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007124:	f043 0204 	orr.w	r2, r3, #4
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00f      	beq.n	8007156 <HAL_UART_IRQHandler+0xfa>
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <HAL_UART_IRQHandler+0xee>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d005      	beq.n	8007156 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	f043 0208 	orr.w	r2, r3, #8
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d078      	beq.n	8007250 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d007      	beq.n	8007178 <HAL_UART_IRQHandler+0x11c>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f926 	bl	80073c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b40      	cmp	r3, #64	; 0x40
 8007184:	bf0c      	ite	eq
 8007186:	2301      	moveq	r3, #1
 8007188:	2300      	movne	r3, #0
 800718a:	b2db      	uxtb	r3, r3
 800718c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <HAL_UART_IRQHandler+0x144>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d031      	beq.n	8007204 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f86f 	bl	8007284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	d123      	bne.n	80071fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695a      	ldr	r2, [r3, #20]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d013      	beq.n	80071f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	4a21      	ldr	r2, [pc, #132]	; (8007258 <HAL_UART_IRQHandler+0x1fc>)
 80071d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fb f8b7 	bl	800234c <HAL_DMA_Abort_IT>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d016      	beq.n	8007212 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071ee:	4610      	mov	r0, r2
 80071f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f2:	e00e      	b.n	8007212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f83b 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071fa:	e00a      	b.n	8007212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f837 	bl	8007270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007202:	e006      	b.n	8007212 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f833 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007210:	e01e      	b.n	8007250 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007212:	bf00      	nop
    return;
 8007214:	e01c      	b.n	8007250 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_UART_IRQHandler+0x1d6>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f85c 	bl	80072e8 <UART_Transmit_IT>
    return;
 8007230:	e00f      	b.n	8007252 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_UART_IRQHandler+0x1f6>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f8a4 	bl	8007394 <UART_EndTransmit_IT>
    return;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007250:	bf00      	nop
  }
}
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	080072c1 	.word	0x080072c1

0800725c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800729a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7ff ffc8 	bl	8007270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072e0:	bf00      	nop
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	2b21      	cmp	r3, #33	; 0x21
 80072fa:	d144      	bne.n	8007386 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007304:	d11a      	bne.n	800733c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800731a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	1c9a      	adds	r2, r3, #2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	621a      	str	r2, [r3, #32]
 800732e:	e00e      	b.n	800734e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	621a      	str	r2, [r3, #32]
 800733a:	e008      	b.n	800734e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	1c59      	adds	r1, r3, #1
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6211      	str	r1, [r2, #32]
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29b      	uxth	r3, r3
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10f      	bne.n	8007382 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007370:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68da      	ldr	r2, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007380:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	e000      	b.n	8007388 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007386:	2302      	movs	r3, #2
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f7ff ff51 	bl	800725c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80073ba:	2300      	movs	r3, #0
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	2b22      	cmp	r3, #34	; 0x22
 80073d6:	d171      	bne.n	80074bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d123      	bne.n	800742a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10e      	bne.n	800740e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007406:	1c9a      	adds	r2, r3, #2
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	629a      	str	r2, [r3, #40]	; 0x28
 800740c:	e029      	b.n	8007462 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	b29b      	uxth	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	629a      	str	r2, [r3, #40]	; 0x28
 8007428:	e01b      	b.n	8007462 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10a      	bne.n	8007448 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6858      	ldr	r0, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743c:	1c59      	adds	r1, r3, #1
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6291      	str	r1, [r2, #40]	; 0x28
 8007442:	b2c2      	uxtb	r2, r0
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	e00c      	b.n	8007462 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	1c58      	adds	r0, r3, #1
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	6288      	str	r0, [r1, #40]	; 0x28
 800745a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007466:	b29b      	uxth	r3, r3
 8007468:	3b01      	subs	r3, #1
 800746a:	b29b      	uxth	r3, r3
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4619      	mov	r1, r3
 8007470:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007472:	2b00      	cmp	r3, #0
 8007474:	d120      	bne.n	80074b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0220 	bic.w	r2, r2, #32
 8007484:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68da      	ldr	r2, [r3, #12]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007494:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	695a      	ldr	r2, [r3, #20]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0201 	bic.w	r2, r2, #1
 80074a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2220      	movs	r2, #32
 80074aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f7f9 f86e 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e002      	b.n	80074be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800750a:	f023 030c 	bic.w	r3, r3, #12
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	68f9      	ldr	r1, [r7, #12]
 8007514:	430b      	orrs	r3, r1
 8007516:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	f040 818b 	bne.w	8007850 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4ac1      	ldr	r2, [pc, #772]	; (8007844 <UART_SetConfig+0x37c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d005      	beq.n	8007550 <UART_SetConfig+0x88>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4abf      	ldr	r2, [pc, #764]	; (8007848 <UART_SetConfig+0x380>)
 800754a:	4293      	cmp	r3, r2
 800754c:	f040 80bd 	bne.w	80076ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007550:	f7fe fa6c 	bl	8005a2c <HAL_RCC_GetPCLK2Freq>
 8007554:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	461d      	mov	r5, r3
 800755a:	f04f 0600 	mov.w	r6, #0
 800755e:	46a8      	mov	r8, r5
 8007560:	46b1      	mov	r9, r6
 8007562:	eb18 0308 	adds.w	r3, r8, r8
 8007566:	eb49 0409 	adc.w	r4, r9, r9
 800756a:	4698      	mov	r8, r3
 800756c:	46a1      	mov	r9, r4
 800756e:	eb18 0805 	adds.w	r8, r8, r5
 8007572:	eb49 0906 	adc.w	r9, r9, r6
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007582:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007586:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800758a:	4688      	mov	r8, r1
 800758c:	4691      	mov	r9, r2
 800758e:	eb18 0005 	adds.w	r0, r8, r5
 8007592:	eb49 0106 	adc.w	r1, r9, r6
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	461d      	mov	r5, r3
 800759c:	f04f 0600 	mov.w	r6, #0
 80075a0:	196b      	adds	r3, r5, r5
 80075a2:	eb46 0406 	adc.w	r4, r6, r6
 80075a6:	461a      	mov	r2, r3
 80075a8:	4623      	mov	r3, r4
 80075aa:	f7f8 fe61 	bl	8000270 <__aeabi_uldivmod>
 80075ae:	4603      	mov	r3, r0
 80075b0:	460c      	mov	r4, r1
 80075b2:	461a      	mov	r2, r3
 80075b4:	4ba5      	ldr	r3, [pc, #660]	; (800784c <UART_SetConfig+0x384>)
 80075b6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ba:	095b      	lsrs	r3, r3, #5
 80075bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	461d      	mov	r5, r3
 80075c4:	f04f 0600 	mov.w	r6, #0
 80075c8:	46a9      	mov	r9, r5
 80075ca:	46b2      	mov	sl, r6
 80075cc:	eb19 0309 	adds.w	r3, r9, r9
 80075d0:	eb4a 040a 	adc.w	r4, sl, sl
 80075d4:	4699      	mov	r9, r3
 80075d6:	46a2      	mov	sl, r4
 80075d8:	eb19 0905 	adds.w	r9, r9, r5
 80075dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80075e0:	f04f 0100 	mov.w	r1, #0
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075f4:	4689      	mov	r9, r1
 80075f6:	4692      	mov	sl, r2
 80075f8:	eb19 0005 	adds.w	r0, r9, r5
 80075fc:	eb4a 0106 	adc.w	r1, sl, r6
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	461d      	mov	r5, r3
 8007606:	f04f 0600 	mov.w	r6, #0
 800760a:	196b      	adds	r3, r5, r5
 800760c:	eb46 0406 	adc.w	r4, r6, r6
 8007610:	461a      	mov	r2, r3
 8007612:	4623      	mov	r3, r4
 8007614:	f7f8 fe2c 	bl	8000270 <__aeabi_uldivmod>
 8007618:	4603      	mov	r3, r0
 800761a:	460c      	mov	r4, r1
 800761c:	461a      	mov	r2, r3
 800761e:	4b8b      	ldr	r3, [pc, #556]	; (800784c <UART_SetConfig+0x384>)
 8007620:	fba3 1302 	umull	r1, r3, r3, r2
 8007624:	095b      	lsrs	r3, r3, #5
 8007626:	2164      	movs	r1, #100	; 0x64
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	3332      	adds	r3, #50	; 0x32
 8007632:	4a86      	ldr	r2, [pc, #536]	; (800784c <UART_SetConfig+0x384>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	095b      	lsrs	r3, r3, #5
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007640:	4498      	add	r8, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	461d      	mov	r5, r3
 8007646:	f04f 0600 	mov.w	r6, #0
 800764a:	46a9      	mov	r9, r5
 800764c:	46b2      	mov	sl, r6
 800764e:	eb19 0309 	adds.w	r3, r9, r9
 8007652:	eb4a 040a 	adc.w	r4, sl, sl
 8007656:	4699      	mov	r9, r3
 8007658:	46a2      	mov	sl, r4
 800765a:	eb19 0905 	adds.w	r9, r9, r5
 800765e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007662:	f04f 0100 	mov.w	r1, #0
 8007666:	f04f 0200 	mov.w	r2, #0
 800766a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800766e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007672:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007676:	4689      	mov	r9, r1
 8007678:	4692      	mov	sl, r2
 800767a:	eb19 0005 	adds.w	r0, r9, r5
 800767e:	eb4a 0106 	adc.w	r1, sl, r6
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	461d      	mov	r5, r3
 8007688:	f04f 0600 	mov.w	r6, #0
 800768c:	196b      	adds	r3, r5, r5
 800768e:	eb46 0406 	adc.w	r4, r6, r6
 8007692:	461a      	mov	r2, r3
 8007694:	4623      	mov	r3, r4
 8007696:	f7f8 fdeb 	bl	8000270 <__aeabi_uldivmod>
 800769a:	4603      	mov	r3, r0
 800769c:	460c      	mov	r4, r1
 800769e:	461a      	mov	r2, r3
 80076a0:	4b6a      	ldr	r3, [pc, #424]	; (800784c <UART_SetConfig+0x384>)
 80076a2:	fba3 1302 	umull	r1, r3, r3, r2
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	2164      	movs	r1, #100	; 0x64
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	3332      	adds	r3, #50	; 0x32
 80076b4:	4a65      	ldr	r2, [pc, #404]	; (800784c <UART_SetConfig+0x384>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	f003 0207 	and.w	r2, r3, #7
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4442      	add	r2, r8
 80076c6:	609a      	str	r2, [r3, #8]
 80076c8:	e26f      	b.n	8007baa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076ca:	f7fe f99b 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 80076ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	461d      	mov	r5, r3
 80076d4:	f04f 0600 	mov.w	r6, #0
 80076d8:	46a8      	mov	r8, r5
 80076da:	46b1      	mov	r9, r6
 80076dc:	eb18 0308 	adds.w	r3, r8, r8
 80076e0:	eb49 0409 	adc.w	r4, r9, r9
 80076e4:	4698      	mov	r8, r3
 80076e6:	46a1      	mov	r9, r4
 80076e8:	eb18 0805 	adds.w	r8, r8, r5
 80076ec:	eb49 0906 	adc.w	r9, r9, r6
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007700:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007704:	4688      	mov	r8, r1
 8007706:	4691      	mov	r9, r2
 8007708:	eb18 0005 	adds.w	r0, r8, r5
 800770c:	eb49 0106 	adc.w	r1, r9, r6
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	461d      	mov	r5, r3
 8007716:	f04f 0600 	mov.w	r6, #0
 800771a:	196b      	adds	r3, r5, r5
 800771c:	eb46 0406 	adc.w	r4, r6, r6
 8007720:	461a      	mov	r2, r3
 8007722:	4623      	mov	r3, r4
 8007724:	f7f8 fda4 	bl	8000270 <__aeabi_uldivmod>
 8007728:	4603      	mov	r3, r0
 800772a:	460c      	mov	r4, r1
 800772c:	461a      	mov	r2, r3
 800772e:	4b47      	ldr	r3, [pc, #284]	; (800784c <UART_SetConfig+0x384>)
 8007730:	fba3 2302 	umull	r2, r3, r3, r2
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	461d      	mov	r5, r3
 800773e:	f04f 0600 	mov.w	r6, #0
 8007742:	46a9      	mov	r9, r5
 8007744:	46b2      	mov	sl, r6
 8007746:	eb19 0309 	adds.w	r3, r9, r9
 800774a:	eb4a 040a 	adc.w	r4, sl, sl
 800774e:	4699      	mov	r9, r3
 8007750:	46a2      	mov	sl, r4
 8007752:	eb19 0905 	adds.w	r9, r9, r5
 8007756:	eb4a 0a06 	adc.w	sl, sl, r6
 800775a:	f04f 0100 	mov.w	r1, #0
 800775e:	f04f 0200 	mov.w	r2, #0
 8007762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800776a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800776e:	4689      	mov	r9, r1
 8007770:	4692      	mov	sl, r2
 8007772:	eb19 0005 	adds.w	r0, r9, r5
 8007776:	eb4a 0106 	adc.w	r1, sl, r6
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	461d      	mov	r5, r3
 8007780:	f04f 0600 	mov.w	r6, #0
 8007784:	196b      	adds	r3, r5, r5
 8007786:	eb46 0406 	adc.w	r4, r6, r6
 800778a:	461a      	mov	r2, r3
 800778c:	4623      	mov	r3, r4
 800778e:	f7f8 fd6f 	bl	8000270 <__aeabi_uldivmod>
 8007792:	4603      	mov	r3, r0
 8007794:	460c      	mov	r4, r1
 8007796:	461a      	mov	r2, r3
 8007798:	4b2c      	ldr	r3, [pc, #176]	; (800784c <UART_SetConfig+0x384>)
 800779a:	fba3 1302 	umull	r1, r3, r3, r2
 800779e:	095b      	lsrs	r3, r3, #5
 80077a0:	2164      	movs	r1, #100	; 0x64
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	3332      	adds	r3, #50	; 0x32
 80077ac:	4a27      	ldr	r2, [pc, #156]	; (800784c <UART_SetConfig+0x384>)
 80077ae:	fba2 2303 	umull	r2, r3, r2, r3
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077ba:	4498      	add	r8, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	461d      	mov	r5, r3
 80077c0:	f04f 0600 	mov.w	r6, #0
 80077c4:	46a9      	mov	r9, r5
 80077c6:	46b2      	mov	sl, r6
 80077c8:	eb19 0309 	adds.w	r3, r9, r9
 80077cc:	eb4a 040a 	adc.w	r4, sl, sl
 80077d0:	4699      	mov	r9, r3
 80077d2:	46a2      	mov	sl, r4
 80077d4:	eb19 0905 	adds.w	r9, r9, r5
 80077d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80077dc:	f04f 0100 	mov.w	r1, #0
 80077e0:	f04f 0200 	mov.w	r2, #0
 80077e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077f0:	4689      	mov	r9, r1
 80077f2:	4692      	mov	sl, r2
 80077f4:	eb19 0005 	adds.w	r0, r9, r5
 80077f8:	eb4a 0106 	adc.w	r1, sl, r6
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	461d      	mov	r5, r3
 8007802:	f04f 0600 	mov.w	r6, #0
 8007806:	196b      	adds	r3, r5, r5
 8007808:	eb46 0406 	adc.w	r4, r6, r6
 800780c:	461a      	mov	r2, r3
 800780e:	4623      	mov	r3, r4
 8007810:	f7f8 fd2e 	bl	8000270 <__aeabi_uldivmod>
 8007814:	4603      	mov	r3, r0
 8007816:	460c      	mov	r4, r1
 8007818:	461a      	mov	r2, r3
 800781a:	4b0c      	ldr	r3, [pc, #48]	; (800784c <UART_SetConfig+0x384>)
 800781c:	fba3 1302 	umull	r1, r3, r3, r2
 8007820:	095b      	lsrs	r3, r3, #5
 8007822:	2164      	movs	r1, #100	; 0x64
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	00db      	lsls	r3, r3, #3
 800782c:	3332      	adds	r3, #50	; 0x32
 800782e:	4a07      	ldr	r2, [pc, #28]	; (800784c <UART_SetConfig+0x384>)
 8007830:	fba2 2303 	umull	r2, r3, r2, r3
 8007834:	095b      	lsrs	r3, r3, #5
 8007836:	f003 0207 	and.w	r2, r3, #7
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4442      	add	r2, r8
 8007840:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007842:	e1b2      	b.n	8007baa <UART_SetConfig+0x6e2>
 8007844:	40011000 	.word	0x40011000
 8007848:	40011400 	.word	0x40011400
 800784c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4ad7      	ldr	r2, [pc, #860]	; (8007bb4 <UART_SetConfig+0x6ec>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d005      	beq.n	8007866 <UART_SetConfig+0x39e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4ad6      	ldr	r2, [pc, #856]	; (8007bb8 <UART_SetConfig+0x6f0>)
 8007860:	4293      	cmp	r3, r2
 8007862:	f040 80d1 	bne.w	8007a08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007866:	f7fe f8e1 	bl	8005a2c <HAL_RCC_GetPCLK2Freq>
 800786a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	469a      	mov	sl, r3
 8007870:	f04f 0b00 	mov.w	fp, #0
 8007874:	46d0      	mov	r8, sl
 8007876:	46d9      	mov	r9, fp
 8007878:	eb18 0308 	adds.w	r3, r8, r8
 800787c:	eb49 0409 	adc.w	r4, r9, r9
 8007880:	4698      	mov	r8, r3
 8007882:	46a1      	mov	r9, r4
 8007884:	eb18 080a 	adds.w	r8, r8, sl
 8007888:	eb49 090b 	adc.w	r9, r9, fp
 800788c:	f04f 0100 	mov.w	r1, #0
 8007890:	f04f 0200 	mov.w	r2, #0
 8007894:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007898:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800789c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078a0:	4688      	mov	r8, r1
 80078a2:	4691      	mov	r9, r2
 80078a4:	eb1a 0508 	adds.w	r5, sl, r8
 80078a8:	eb4b 0609 	adc.w	r6, fp, r9
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	4619      	mov	r1, r3
 80078b2:	f04f 0200 	mov.w	r2, #0
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	f04f 0400 	mov.w	r4, #0
 80078be:	0094      	lsls	r4, r2, #2
 80078c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80078c4:	008b      	lsls	r3, r1, #2
 80078c6:	461a      	mov	r2, r3
 80078c8:	4623      	mov	r3, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	4631      	mov	r1, r6
 80078ce:	f7f8 fccf 	bl	8000270 <__aeabi_uldivmod>
 80078d2:	4603      	mov	r3, r0
 80078d4:	460c      	mov	r4, r1
 80078d6:	461a      	mov	r2, r3
 80078d8:	4bb8      	ldr	r3, [pc, #736]	; (8007bbc <UART_SetConfig+0x6f4>)
 80078da:	fba3 2302 	umull	r2, r3, r3, r2
 80078de:	095b      	lsrs	r3, r3, #5
 80078e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	469b      	mov	fp, r3
 80078e8:	f04f 0c00 	mov.w	ip, #0
 80078ec:	46d9      	mov	r9, fp
 80078ee:	46e2      	mov	sl, ip
 80078f0:	eb19 0309 	adds.w	r3, r9, r9
 80078f4:	eb4a 040a 	adc.w	r4, sl, sl
 80078f8:	4699      	mov	r9, r3
 80078fa:	46a2      	mov	sl, r4
 80078fc:	eb19 090b 	adds.w	r9, r9, fp
 8007900:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007904:	f04f 0100 	mov.w	r1, #0
 8007908:	f04f 0200 	mov.w	r2, #0
 800790c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007910:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007914:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007918:	4689      	mov	r9, r1
 800791a:	4692      	mov	sl, r2
 800791c:	eb1b 0509 	adds.w	r5, fp, r9
 8007920:	eb4c 060a 	adc.w	r6, ip, sl
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4619      	mov	r1, r3
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	f04f 0400 	mov.w	r4, #0
 8007936:	0094      	lsls	r4, r2, #2
 8007938:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800793c:	008b      	lsls	r3, r1, #2
 800793e:	461a      	mov	r2, r3
 8007940:	4623      	mov	r3, r4
 8007942:	4628      	mov	r0, r5
 8007944:	4631      	mov	r1, r6
 8007946:	f7f8 fc93 	bl	8000270 <__aeabi_uldivmod>
 800794a:	4603      	mov	r3, r0
 800794c:	460c      	mov	r4, r1
 800794e:	461a      	mov	r2, r3
 8007950:	4b9a      	ldr	r3, [pc, #616]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007952:	fba3 1302 	umull	r1, r3, r3, r2
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	2164      	movs	r1, #100	; 0x64
 800795a:	fb01 f303 	mul.w	r3, r1, r3
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	3332      	adds	r3, #50	; 0x32
 8007964:	4a95      	ldr	r2, [pc, #596]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007966:	fba2 2303 	umull	r2, r3, r2, r3
 800796a:	095b      	lsrs	r3, r3, #5
 800796c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007970:	4498      	add	r8, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	469b      	mov	fp, r3
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	46d9      	mov	r9, fp
 800797c:	46e2      	mov	sl, ip
 800797e:	eb19 0309 	adds.w	r3, r9, r9
 8007982:	eb4a 040a 	adc.w	r4, sl, sl
 8007986:	4699      	mov	r9, r3
 8007988:	46a2      	mov	sl, r4
 800798a:	eb19 090b 	adds.w	r9, r9, fp
 800798e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007992:	f04f 0100 	mov.w	r1, #0
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800799e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079a6:	4689      	mov	r9, r1
 80079a8:	4692      	mov	sl, r2
 80079aa:	eb1b 0509 	adds.w	r5, fp, r9
 80079ae:	eb4c 060a 	adc.w	r6, ip, sl
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	f04f 0400 	mov.w	r4, #0
 80079c4:	0094      	lsls	r4, r2, #2
 80079c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079ca:	008b      	lsls	r3, r1, #2
 80079cc:	461a      	mov	r2, r3
 80079ce:	4623      	mov	r3, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	4631      	mov	r1, r6
 80079d4:	f7f8 fc4c 	bl	8000270 <__aeabi_uldivmod>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	461a      	mov	r2, r3
 80079de:	4b77      	ldr	r3, [pc, #476]	; (8007bbc <UART_SetConfig+0x6f4>)
 80079e0:	fba3 1302 	umull	r1, r3, r3, r2
 80079e4:	095b      	lsrs	r3, r3, #5
 80079e6:	2164      	movs	r1, #100	; 0x64
 80079e8:	fb01 f303 	mul.w	r3, r1, r3
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	3332      	adds	r3, #50	; 0x32
 80079f2:	4a72      	ldr	r2, [pc, #456]	; (8007bbc <UART_SetConfig+0x6f4>)
 80079f4:	fba2 2303 	umull	r2, r3, r2, r3
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4442      	add	r2, r8
 8007a04:	609a      	str	r2, [r3, #8]
 8007a06:	e0d0      	b.n	8007baa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a08:	f7fd fffc 	bl	8005a04 <HAL_RCC_GetPCLK1Freq>
 8007a0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	469a      	mov	sl, r3
 8007a12:	f04f 0b00 	mov.w	fp, #0
 8007a16:	46d0      	mov	r8, sl
 8007a18:	46d9      	mov	r9, fp
 8007a1a:	eb18 0308 	adds.w	r3, r8, r8
 8007a1e:	eb49 0409 	adc.w	r4, r9, r9
 8007a22:	4698      	mov	r8, r3
 8007a24:	46a1      	mov	r9, r4
 8007a26:	eb18 080a 	adds.w	r8, r8, sl
 8007a2a:	eb49 090b 	adc.w	r9, r9, fp
 8007a2e:	f04f 0100 	mov.w	r1, #0
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a42:	4688      	mov	r8, r1
 8007a44:	4691      	mov	r9, r2
 8007a46:	eb1a 0508 	adds.w	r5, sl, r8
 8007a4a:	eb4b 0609 	adc.w	r6, fp, r9
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	4619      	mov	r1, r3
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	f04f 0300 	mov.w	r3, #0
 8007a5c:	f04f 0400 	mov.w	r4, #0
 8007a60:	0094      	lsls	r4, r2, #2
 8007a62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a66:	008b      	lsls	r3, r1, #2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	4631      	mov	r1, r6
 8007a70:	f7f8 fbfe 	bl	8000270 <__aeabi_uldivmod>
 8007a74:	4603      	mov	r3, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b50      	ldr	r3, [pc, #320]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007a7c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	469b      	mov	fp, r3
 8007a8a:	f04f 0c00 	mov.w	ip, #0
 8007a8e:	46d9      	mov	r9, fp
 8007a90:	46e2      	mov	sl, ip
 8007a92:	eb19 0309 	adds.w	r3, r9, r9
 8007a96:	eb4a 040a 	adc.w	r4, sl, sl
 8007a9a:	4699      	mov	r9, r3
 8007a9c:	46a2      	mov	sl, r4
 8007a9e:	eb19 090b 	adds.w	r9, r9, fp
 8007aa2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007aa6:	f04f 0100 	mov.w	r1, #0
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aba:	4689      	mov	r9, r1
 8007abc:	4692      	mov	sl, r2
 8007abe:	eb1b 0509 	adds.w	r5, fp, r9
 8007ac2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	4619      	mov	r1, r3
 8007acc:	f04f 0200 	mov.w	r2, #0
 8007ad0:	f04f 0300 	mov.w	r3, #0
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	0094      	lsls	r4, r2, #2
 8007ada:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ade:	008b      	lsls	r3, r1, #2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4623      	mov	r3, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	f7f8 fbc2 	bl	8000270 <__aeabi_uldivmod>
 8007aec:	4603      	mov	r3, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	461a      	mov	r2, r3
 8007af2:	4b32      	ldr	r3, [pc, #200]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007af4:	fba3 1302 	umull	r1, r3, r3, r2
 8007af8:	095b      	lsrs	r3, r3, #5
 8007afa:	2164      	movs	r1, #100	; 0x64
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	3332      	adds	r3, #50	; 0x32
 8007b06:	4a2d      	ldr	r2, [pc, #180]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007b08:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0c:	095b      	lsrs	r3, r3, #5
 8007b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b12:	4498      	add	r8, r3
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	469b      	mov	fp, r3
 8007b18:	f04f 0c00 	mov.w	ip, #0
 8007b1c:	46d9      	mov	r9, fp
 8007b1e:	46e2      	mov	sl, ip
 8007b20:	eb19 0309 	adds.w	r3, r9, r9
 8007b24:	eb4a 040a 	adc.w	r4, sl, sl
 8007b28:	4699      	mov	r9, r3
 8007b2a:	46a2      	mov	sl, r4
 8007b2c:	eb19 090b 	adds.w	r9, r9, fp
 8007b30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b34:	f04f 0100 	mov.w	r1, #0
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b48:	4689      	mov	r9, r1
 8007b4a:	4692      	mov	sl, r2
 8007b4c:	eb1b 0509 	adds.w	r5, fp, r9
 8007b50:	eb4c 060a 	adc.w	r6, ip, sl
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	f04f 0400 	mov.w	r4, #0
 8007b66:	0094      	lsls	r4, r2, #2
 8007b68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b6c:	008b      	lsls	r3, r1, #2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4623      	mov	r3, r4
 8007b72:	4628      	mov	r0, r5
 8007b74:	4631      	mov	r1, r6
 8007b76:	f7f8 fb7b 	bl	8000270 <__aeabi_uldivmod>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4b0e      	ldr	r3, [pc, #56]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007b82:	fba3 1302 	umull	r1, r3, r3, r2
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2164      	movs	r1, #100	; 0x64
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	3332      	adds	r3, #50	; 0x32
 8007b94:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <UART_SetConfig+0x6f4>)
 8007b96:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f003 020f 	and.w	r2, r3, #15
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4442      	add	r2, r8
 8007ba6:	609a      	str	r2, [r3, #8]
}
 8007ba8:	e7ff      	b.n	8007baa <UART_SetConfig+0x6e2>
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb4:	40011000 	.word	0x40011000
 8007bb8:	40011400 	.word	0x40011400
 8007bbc:	51eb851f 	.word	0x51eb851f

08007bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	f107 001c 	add.w	r0, r7, #28
 8007bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d122      	bne.n	8007c1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007bec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d105      	bne.n	8007c12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f94a 	bl	8007eac <USB_CoreReset>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
 8007c1c:	e01a      	b.n	8007c54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f93e 	bl	8007eac <USB_CoreReset>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	639a      	str	r2, [r3, #56]	; 0x38
 8007c46:	e005      	b.n	8007c54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d10b      	bne.n	8007c72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f043 0206 	orr.w	r2, r3, #6
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f043 0220 	orr.w	r2, r3, #32
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c7e:	b004      	add	sp, #16
 8007c80:	4770      	bx	lr

08007c82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f043 0201 	orr.w	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f023 0201 	bic.w	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr

08007cc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d106      	bne.n	8007cf2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	60da      	str	r2, [r3, #12]
 8007cf0:	e00b      	b.n	8007d0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]
 8007d04:	e001      	b.n	8007d0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e003      	b.n	8007d12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007d0a:	2032      	movs	r0, #50	; 0x32
 8007d0c:	f7f9 fcf0 	bl	80016f0 <HAL_Delay>

  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	019b      	lsls	r3, r3, #6
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a09      	ldr	r2, [pc, #36]	; (8007d64 <USB_FlushTxFifo+0x48>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	d0f0      	beq.n	8007d36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	00030d40 	.word	0x00030d40

08007d68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2210      	movs	r2, #16
 8007d78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a09      	ldr	r2, [pc, #36]	; (8007da8 <USB_FlushRxFifo+0x40>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d901      	bls.n	8007d8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e006      	b.n	8007d9a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d0f0      	beq.n	8007d7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	00030d40 	.word	0x00030d40

08007dac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b089      	sub	sp, #36	; 0x24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4611      	mov	r1, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	460b      	mov	r3, r1
 8007dbc:	71fb      	strb	r3, [r7, #7]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d11a      	bne.n	8007e08 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dd2:	88bb      	ldrh	r3, [r7, #4]
 8007dd4:	3303      	adds	r3, #3
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	e00f      	b.n	8007e00 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	031a      	lsls	r2, r3, #12
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dec:	461a      	mov	r2, r3
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3304      	adds	r3, #4
 8007df8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61bb      	str	r3, [r7, #24]
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d3eb      	bcc.n	8007de0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3724      	adds	r7, #36	; 0x24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b089      	sub	sp, #36	; 0x24
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	60f8      	str	r0, [r7, #12]
 8007e1e:	60b9      	str	r1, [r7, #8]
 8007e20:	4613      	mov	r3, r2
 8007e22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007e2c:	88fb      	ldrh	r3, [r7, #6]
 8007e2e:	3303      	adds	r3, #3
 8007e30:	089b      	lsrs	r3, r3, #2
 8007e32:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	e00b      	b.n	8007e52 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	61bb      	str	r3, [r7, #24]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3ef      	bcc.n	8007e3a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007e5a:	69fb      	ldr	r3, [r7, #28]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3724      	adds	r7, #36	; 0x24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b083      	sub	sp, #12
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
	...

08007eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <USB_CoreReset+0x64>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01b      	b.n	8007f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	daf2      	bge.n	8007eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <USB_CoreReset+0x64>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e006      	b.n	8007f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d0f0      	beq.n	8007ee2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	00030d40 	.word	0x00030d40

08007f14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f14:	b084      	sub	sp, #16
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	f107 001c 	add.w	r0, r7, #28
 8007f22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f30:	461a      	mov	r2, r3
 8007f32:	2300      	movs	r3, #0
 8007f34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d018      	beq.n	8007f98 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d10a      	bne.n	8007f82 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f7a:	f043 0304 	orr.w	r3, r3, #4
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	e014      	b.n	8007fac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f90:	f023 0304 	bic.w	r3, r3, #4
 8007f94:	6013      	str	r3, [r2, #0]
 8007f96:	e009      	b.n	8007fac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007fa6:	f023 0304 	bic.w	r3, r3, #4
 8007faa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007fac:	2110      	movs	r1, #16
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff feb4 	bl	8007d1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff fed7 	bl	8007d68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	e015      	b.n	8007fec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	015a      	lsls	r2, r3, #5
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4413      	add	r3, r2
 8007fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d3e5      	bcc.n	8007fc0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007ff4:	2101      	movs	r1, #1
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8ac 	bl	8008154 <USB_DriveVbus>

  HAL_Delay(200U);
 8007ffc:	20c8      	movs	r0, #200	; 0xc8
 8007ffe:	f7f9 fb77 	bl	80016f0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f04f 32ff 	mov.w	r2, #4294967295
 800800e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008022:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a14      	ldr	r2, [pc, #80]	; (8008078 <USB_HostInit+0x164>)
 8008028:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a13      	ldr	r2, [pc, #76]	; (800807c <USB_HostInit+0x168>)
 800802e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008032:	e009      	b.n	8008048 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2280      	movs	r2, #128	; 0x80
 8008038:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a10      	ldr	r2, [pc, #64]	; (8008080 <USB_HostInit+0x16c>)
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a10      	ldr	r2, [pc, #64]	; (8008084 <USB_HostInit+0x170>)
 8008044:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d105      	bne.n	800805a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	f043 0210 	orr.w	r2, r3, #16
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <USB_HostInit+0x174>)
 8008060:	4313      	orrs	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008072:	b004      	add	sp, #16
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	01000200 	.word	0x01000200
 800807c:	00e00300 	.word	0x00e00300
 8008080:	00600080 	.word	0x00600080
 8008084:	004000e0 	.word	0x004000e0
 8008088:	a3200008 	.word	0xa3200008

0800808c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	68f9      	ldr	r1, [r7, #12]
 80080c0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80080c4:	4313      	orrs	r3, r2
 80080c6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d107      	bne.n	80080de <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080d4:	461a      	mov	r2, r3
 80080d6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080da:	6053      	str	r3, [r2, #4]
 80080dc:	e009      	b.n	80080f2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d106      	bne.n	80080f2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080ea:	461a      	mov	r2, r3
 80080ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80080f0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800810c:	2300      	movs	r3, #0
 800810e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008120:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800812a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008130:	2064      	movs	r0, #100	; 0x64
 8008132:	f7f9 fadd 	bl	80016f0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800813e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008142:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008144:	200a      	movs	r0, #10
 8008146:	f7f9 fad3 	bl	80016f0 <HAL_Delay>

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	460b      	mov	r3, r1
 800815e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008178:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d109      	bne.n	8008198 <USB_DriveVbus+0x44>
 8008184:	78fb      	ldrb	r3, [r7, #3]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d106      	bne.n	8008198 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008192:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008196:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800819e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a2:	d109      	bne.n	80081b8 <USB_DriveVbus+0x64>
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80081b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	0c5b      	lsrs	r3, r3, #17
 80081e4:	f003 0303 	and.w	r3, r3, #3
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	b29b      	uxth	r3, r3
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
	...

08008218 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	4608      	mov	r0, r1
 8008222:	4611      	mov	r1, r2
 8008224:	461a      	mov	r2, r3
 8008226:	4603      	mov	r3, r0
 8008228:	70fb      	strb	r3, [r7, #3]
 800822a:	460b      	mov	r3, r1
 800822c:	70bb      	strb	r3, [r7, #2]
 800822e:	4613      	mov	r3, r2
 8008230:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008246:	461a      	mov	r2, r3
 8008248:	f04f 33ff 	mov.w	r3, #4294967295
 800824c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800824e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008252:	2b03      	cmp	r3, #3
 8008254:	d87e      	bhi.n	8008354 <USB_HC_Init+0x13c>
 8008256:	a201      	add	r2, pc, #4	; (adr r2, 800825c <USB_HC_Init+0x44>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	0800826d 	.word	0x0800826d
 8008260:	08008317 	.word	0x08008317
 8008264:	0800826d 	.word	0x0800826d
 8008268:	080082d9 	.word	0x080082d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800826c:	78fb      	ldrb	r3, [r7, #3]
 800826e:	015a      	lsls	r2, r3, #5
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4413      	add	r3, r2
 8008274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008278:	461a      	mov	r2, r3
 800827a:	f240 439d 	movw	r3, #1181	; 0x49d
 800827e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008280:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008284:	2b00      	cmp	r3, #0
 8008286:	da10      	bge.n	80082aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082a6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80082a8:	e057      	b.n	800835a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d051      	beq.n	800835a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80082d4:	60d3      	str	r3, [r2, #12]
      break;
 80082d6:	e040      	b.n	800835a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e4:	461a      	mov	r2, r3
 80082e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80082ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da34      	bge.n	800835e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	78fa      	ldrb	r2, [r7, #3]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	440a      	add	r2, r1
 800830a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800830e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008312:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008314:	e023      	b.n	800835e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4413      	add	r3, r2
 800831e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008322:	461a      	mov	r2, r3
 8008324:	f240 2325 	movw	r3, #549	; 0x225
 8008328:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800832a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800832e:	2b00      	cmp	r3, #0
 8008330:	da17      	bge.n	8008362 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	4413      	add	r3, r2
 800833a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	78fa      	ldrb	r2, [r7, #3]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	440a      	add	r2, r1
 8008348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800834c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008350:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008352:	e006      	b.n	8008362 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
      break;
 8008358:	e004      	b.n	8008364 <USB_HC_Init+0x14c>
      break;
 800835a:	bf00      	nop
 800835c:	e002      	b.n	8008364 <USB_HC_Init+0x14c>
      break;
 800835e:	bf00      	nop
 8008360:	e000      	b.n	8008364 <USB_HC_Init+0x14c>
      break;
 8008362:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	f003 030f 	and.w	r3, r3, #15
 8008372:	2101      	movs	r1, #1
 8008374:	fa01 f303 	lsl.w	r3, r1, r3
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800837e:	4313      	orrs	r3, r2
 8008380:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800838e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008392:	2b00      	cmp	r3, #0
 8008394:	da03      	bge.n	800839e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e001      	b.n	80083a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80083a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d103      	bne.n	80083b2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80083aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e001      	b.n	80083b6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083b6:	787b      	ldrb	r3, [r7, #1]
 80083b8:	059b      	lsls	r3, r3, #22
 80083ba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083be:	78bb      	ldrb	r3, [r7, #2]
 80083c0:	02db      	lsls	r3, r3, #11
 80083c2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083cc:	049b      	lsls	r3, r3, #18
 80083ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80083d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80083da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083e0:	78fb      	ldrb	r3, [r7, #3]
 80083e2:	0159      	lsls	r1, r3, #5
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	440b      	add	r3, r1
 80083e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083f2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80083f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083f8:	2b03      	cmp	r3, #3
 80083fa:	d10f      	bne.n	800841c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	015a      	lsls	r2, r3, #5
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4413      	add	r3, r2
 8008404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	78fa      	ldrb	r2, [r7, #3]
 800840c:	0151      	lsls	r1, r2, #5
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	440a      	add	r2, r1
 8008412:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800841a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
}
 800841e:	4618      	mov	r0, r3
 8008420:	371c      	adds	r7, #28
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop

0800842c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08c      	sub	sp, #48	; 0x30
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	785b      	ldrb	r3, [r3, #1]
 8008442:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008448:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008452:	2b00      	cmp	r3, #0
 8008454:	d028      	beq.n	80084a8 <USB_HC_StartXfer+0x7c>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	791b      	ldrb	r3, [r3, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d124      	bne.n	80084a8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10b      	bne.n	800847c <USB_HC_StartXfer+0x50>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	795b      	ldrb	r3, [r3, #5]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d107      	bne.n	800847c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	4619      	mov	r1, r3
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 fa30 	bl	80088d8 <USB_DoPing>
      return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e114      	b.n	80086a6 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d112      	bne.n	80084a8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	6a3a      	ldr	r2, [r7, #32]
 8008496:	440a      	add	r2, r1
 8008498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800849c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80084a0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2200      	movs	r2, #0
 80084a6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d018      	beq.n	80084e2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	8912      	ldrh	r2, [r2, #8]
 80084b8:	4413      	add	r3, r2
 80084ba:	3b01      	subs	r3, #1
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	8912      	ldrh	r2, [r2, #8]
 80084c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80084c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80084c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084c8:	8b7b      	ldrh	r3, [r7, #26]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d90b      	bls.n	80084e6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80084ce:	8b7b      	ldrh	r3, [r7, #26]
 80084d0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80084d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	8912      	ldrh	r2, [r2, #8]
 80084d8:	fb02 f203 	mul.w	r2, r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	611a      	str	r2, [r3, #16]
 80084e0:	e001      	b.n	80084e6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80084e2:	2301      	movs	r3, #1
 80084e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80084ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	8912      	ldrh	r2, [r2, #8]
 80084f4:	fb02 f203 	mul.w	r2, r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008504:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008506:	04d9      	lsls	r1, r3, #19
 8008508:	4b69      	ldr	r3, [pc, #420]	; (80086b0 <USB_HC_StartXfer+0x284>)
 800850a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800850c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	7a9b      	ldrb	r3, [r3, #10]
 8008512:	075b      	lsls	r3, r3, #29
 8008514:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008518:	69f9      	ldr	r1, [r7, #28]
 800851a:	0148      	lsls	r0, r1, #5
 800851c:	6a39      	ldr	r1, [r7, #32]
 800851e:	4401      	add	r1, r0
 8008520:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008524:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008526:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008528:	79fb      	ldrb	r3, [r7, #7]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d009      	beq.n	8008542 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	68d9      	ldr	r1, [r3, #12]
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853e:	460a      	mov	r2, r1
 8008540:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	bf0c      	ite	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	2300      	movne	r3, #0
 8008556:	b2db      	uxtb	r3, r3
 8008558:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	4413      	add	r3, r2
 8008562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	69fa      	ldr	r2, [r7, #28]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	6a3a      	ldr	r2, [r7, #32]
 800856e:	440a      	add	r2, r1
 8008570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008574:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008578:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	4413      	add	r3, r2
 8008582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	7e7b      	ldrb	r3, [r7, #25]
 800858a:	075b      	lsls	r3, r3, #29
 800858c:	69f9      	ldr	r1, [r7, #28]
 800858e:	0148      	lsls	r0, r1, #5
 8008590:	6a39      	ldr	r1, [r7, #32]
 8008592:	4401      	add	r1, r0
 8008594:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008598:	4313      	orrs	r3, r2
 800859a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	015a      	lsls	r2, r3, #5
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	4413      	add	r3, r2
 80085a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a42      	ldr	r2, [pc, #264]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085ae:	4b41      	ldr	r3, [pc, #260]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085b6:	4a3f      	ldr	r2, [pc, #252]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	78db      	ldrb	r3, [r3, #3]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d006      	beq.n	80085d0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80085c2:	4b3c      	ldr	r3, [pc, #240]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	4a3a      	ldr	r2, [pc, #232]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	e005      	b.n	80085dc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80085d0:	4b38      	ldr	r3, [pc, #224]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80085d8:	4a36      	ldr	r2, [pc, #216]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085dc:	4b35      	ldr	r3, [pc, #212]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085e4:	4a33      	ldr	r2, [pc, #204]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b2f      	ldr	r3, [pc, #188]	; (80086b4 <USB_HC_StartXfer+0x288>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	e04f      	b.n	80086a6 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	78db      	ldrb	r3, [r3, #3]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d14a      	bne.n	80086a4 <USB_HC_StartXfer+0x278>
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d046      	beq.n	80086a4 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	79db      	ldrb	r3, [r3, #7]
 800861a:	2b03      	cmp	r3, #3
 800861c:	d830      	bhi.n	8008680 <USB_HC_StartXfer+0x254>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <USB_HC_StartXfer+0x1f8>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008635 	.word	0x08008635
 8008628:	08008659 	.word	0x08008659
 800862c:	08008635 	.word	0x08008635
 8008630:	08008659 	.word	0x08008659
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	3303      	adds	r3, #3
 800863a:	089b      	lsrs	r3, r3, #2
 800863c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800863e:	8afa      	ldrh	r2, [r7, #22]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	b29b      	uxth	r3, r3
 8008646:	429a      	cmp	r2, r3
 8008648:	d91c      	bls.n	8008684 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	f043 0220 	orr.w	r2, r3, #32
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	619a      	str	r2, [r3, #24]
        }
        break;
 8008656:	e015      	b.n	8008684 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	3303      	adds	r3, #3
 800865e:	089b      	lsrs	r3, r3, #2
 8008660:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008662:	8afa      	ldrh	r2, [r7, #22]
 8008664:	6a3b      	ldr	r3, [r7, #32]
 8008666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	b29b      	uxth	r3, r3
 800866e:	429a      	cmp	r2, r3
 8008670:	d90a      	bls.n	8008688 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	619a      	str	r2, [r3, #24]
        }
        break;
 800867e:	e003      	b.n	8008688 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008680:	bf00      	nop
 8008682:	e002      	b.n	800868a <USB_HC_StartXfer+0x25e>
        break;
 8008684:	bf00      	nop
 8008686:	e000      	b.n	800868a <USB_HC_StartXfer+0x25e>
        break;
 8008688:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	68d9      	ldr	r1, [r3, #12]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	785a      	ldrb	r2, [r3, #1]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	b298      	uxth	r0, r3
 8008698:	2300      	movs	r3, #0
 800869a:	9300      	str	r3, [sp, #0]
 800869c:	4603      	mov	r3, r0
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7ff fb84 	bl	8007dac <USB_WritePacket>
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3728      	adds	r7, #40	; 0x28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	1ff80000 	.word	0x1ff80000
 80086b4:	2000022c 	.word	0x2000022c

080086b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	b29b      	uxth	r3, r3
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80086da:	b480      	push	{r7}
 80086dc:	b087      	sub	sp, #28
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80086ea:	78fb      	ldrb	r3, [r7, #3]
 80086ec:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	0c9b      	lsrs	r3, r3, #18
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <USB_HC_Halt+0x3a>
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d16c      	bne.n	80087ee <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008732:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d143      	bne.n	80087c8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4413      	add	r3, r2
 8008748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	0151      	lsls	r1, r2, #5
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	440a      	add	r2, r1
 8008756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800875a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800875e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4413      	add	r3, r2
 8008768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	0151      	lsls	r1, r2, #5
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	440a      	add	r2, r1
 8008776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800877a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	440a      	add	r2, r1
 8008796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800879e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	3301      	adds	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087ac:	d81d      	bhi.n	80087ea <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087c4:	d0ec      	beq.n	80087a0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087c6:	e080      	b.n	80088ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087e6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087e8:	e06f      	b.n	80088ca <USB_HC_Halt+0x1f0>
          break;
 80087ea:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087ec:	e06d      	b.n	80088ca <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	440a      	add	r2, r1
 8008804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008808:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800880c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d143      	bne.n	80088a6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	440a      	add	r2, r1
 8008834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008838:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800883c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	0151      	lsls	r1, r2, #5
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	440a      	add	r2, r1
 8008854:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008858:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800885c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	0151      	lsls	r1, r2, #5
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	440a      	add	r2, r1
 8008874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008878:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800887c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	3301      	adds	r3, #1
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800888a:	d81d      	bhi.n	80088c8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	4413      	add	r3, r2
 8008894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800889e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088a2:	d0ec      	beq.n	800887e <USB_HC_Halt+0x1a4>
 80088a4:	e011      	b.n	80088ca <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	015a      	lsls	r2, r3, #5
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4413      	add	r3, r2
 80088ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088c4:	6013      	str	r3, [r2, #0]
 80088c6:	e000      	b.n	80088ca <USB_HC_Halt+0x1f0>
          break;
 80088c8:	bf00      	nop
    }
  }

  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80088ec:	2301      	movs	r3, #1
 80088ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	04da      	lsls	r2, r3, #19
 80088f4:	4b15      	ldr	r3, [pc, #84]	; (800894c <USB_DoPing+0x74>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008908:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4413      	add	r3, r2
 8008912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008920:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008928:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	4413      	add	r3, r2
 8008932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008936:	461a      	mov	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	371c      	adds	r7, #28
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	1ff80000 	.word	0x1ff80000

08008950 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800895c:	2300      	movs	r3, #0
 800895e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff f99f 	bl	8007ca4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008966:	2110      	movs	r1, #16
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff f9d7 	bl	8007d1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff f9fa 	bl	8007d68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008974:	2300      	movs	r3, #0
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	e01f      	b.n	80089ba <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008990:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008998:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	461a      	mov	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	3301      	adds	r3, #1
 80089b8:	613b      	str	r3, [r7, #16]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	2b0f      	cmp	r3, #15
 80089be:	d9dc      	bls.n	800897a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80089c0:	2300      	movs	r3, #0
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	e034      	b.n	8008a30 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	015a      	lsls	r2, r3, #5
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4413      	add	r3, r2
 80089ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089dc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	3301      	adds	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a0c:	d80c      	bhi.n	8008a28 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	015a      	lsls	r2, r3, #5
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	4413      	add	r3, r2
 8008a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a24:	d0ec      	beq.n	8008a00 <USB_StopHost+0xb0>
 8008a26:	e000      	b.n	8008a2a <USB_StopHost+0xda>
        break;
 8008a28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2b0f      	cmp	r3, #15
 8008a34:	d9c7      	bls.n	80089c6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f04f 32ff 	mov.w	r2, #4294967295
 8008a4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff f918 	bl	8007c82 <USB_EnableGlobalInt>

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b089      	sub	sp, #36	; 0x24
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a64:	2301      	movs	r3, #1
 8008a66:	2202      	movs	r2, #2
 8008a68:	2102      	movs	r1, #2
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc68 	bl	8009340 <USBH_FindInterface>
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	2bff      	cmp	r3, #255	; 0xff
 8008a78:	d002      	beq.n	8008a80 <USBH_CDC_InterfaceInit+0x24>
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d901      	bls.n	8008a84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a80:	2302      	movs	r3, #2
 8008a82:	e13d      	b.n	8008d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fc3d 	bl	8009308 <USBH_SelectInterface>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	e131      	b.n	8008d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008aa2:	2050      	movs	r0, #80	; 0x50
 8008aa4:	f002 fa08 	bl	800aeb8 <malloc>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ab2:	69db      	ldr	r3, [r3, #28]
 8008ab4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008abc:	2302      	movs	r3, #2
 8008abe:	e11f      	b.n	8008d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008ac0:	2250      	movs	r2, #80	; 0x50
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f002 fa07 	bl	800aed8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	211a      	movs	r1, #26
 8008ad0:	fb01 f303 	mul.w	r3, r1, r3
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b25b      	sxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da15      	bge.n	8008b0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	211a      	movs	r1, #26
 8008ae8:	fb01 f303 	mul.w	r3, r1, r3
 8008aec:	4413      	add	r3, r2
 8008aee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	211a      	movs	r1, #26
 8008afe:	fb01 f303 	mul.w	r3, r1, r3
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b08:	881a      	ldrh	r2, [r3, #0]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fe36 	bl	800a786 <USBH_AllocPipe>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	7819      	ldrb	r1, [r3, #0]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	7858      	ldrb	r0, [r3, #1]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	8952      	ldrh	r2, [r2, #10]
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4623      	mov	r3, r4
 8008b44:	4602      	mov	r2, r0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fdee 	bl	800a728 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2200      	movs	r2, #0
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f002 f8fb 	bl	800ad50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	210a      	movs	r1, #10
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbed 	bl	8009340 <USBH_FindInterface>
 8008b66:	4603      	mov	r3, r0
 8008b68:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
 8008b6c:	2bff      	cmp	r3, #255	; 0xff
 8008b6e:	d002      	beq.n	8008b76 <USBH_CDC_InterfaceInit+0x11a>
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d901      	bls.n	8008b7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b76:	2302      	movs	r3, #2
 8008b78:	e0c2      	b.n	8008d00 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	211a      	movs	r1, #26
 8008b80:	fb01 f303 	mul.w	r3, r1, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b25b      	sxtb	r3, r3
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da16      	bge.n	8008bc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	211a      	movs	r1, #26
 8008b98:	fb01 f303 	mul.w	r3, r1, r3
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ba2:	781a      	ldrb	r2, [r3, #0]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	211a      	movs	r1, #26
 8008bae:	fb01 f303 	mul.w	r3, r1, r3
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bb8:	881a      	ldrh	r2, [r3, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	835a      	strh	r2, [r3, #26]
 8008bbe:	e015      	b.n	8008bec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	211a      	movs	r1, #26
 8008bc6:	fb01 f303 	mul.w	r3, r1, r3
 8008bca:	4413      	add	r3, r2
 8008bcc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	211a      	movs	r1, #26
 8008bdc:	fb01 f303 	mul.w	r3, r1, r3
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008be6:	881a      	ldrh	r2, [r3, #0]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	211a      	movs	r1, #26
 8008bf2:	fb01 f303 	mul.w	r3, r1, r3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da16      	bge.n	8008c32 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	211a      	movs	r1, #26
 8008c0a:	fb01 f303 	mul.w	r3, r1, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	211a      	movs	r1, #26
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c2a:	881a      	ldrh	r2, [r3, #0]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	835a      	strh	r2, [r3, #26]
 8008c30:	e015      	b.n	8008c5e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	211a      	movs	r1, #26
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	211a      	movs	r1, #26
 8008c4e:	fb01 f303 	mul.w	r3, r1, r3
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c58:	881a      	ldrh	r2, [r3, #0]
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	7b9b      	ldrb	r3, [r3, #14]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 fd8e 	bl	800a786 <USBH_AllocPipe>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	7bdb      	ldrb	r3, [r3, #15]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 fd84 	bl	800a786 <USBH_AllocPipe>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	7b59      	ldrb	r1, [r3, #13]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	7b98      	ldrb	r0, [r3, #14]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	8b12      	ldrh	r2, [r2, #24]
 8008c9e:	9202      	str	r2, [sp, #8]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	9201      	str	r2, [sp, #4]
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	4623      	mov	r3, r4
 8008ca8:	4602      	mov	r2, r0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fd3c 	bl	800a728 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	7b19      	ldrb	r1, [r3, #12]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	7bd8      	ldrb	r0, [r3, #15]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	8b52      	ldrh	r2, [r2, #26]
 8008cc8:	9202      	str	r2, [sp, #8]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	9201      	str	r2, [sp, #4]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4623      	mov	r3, r4
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 fd27 	bl	800a728 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	7b5b      	ldrb	r3, [r3, #13]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f002 f830 	bl	800ad50 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	7b1b      	ldrb	r3, [r3, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f002 f829 	bl	800ad50 <USBH_LL_SetToggle>

  return USBH_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}

08008d08 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00e      	beq.n	8008d40 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fd1c 	bl	800a766 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fd47 	bl	800a7c8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	7b1b      	ldrb	r3, [r3, #12]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00e      	beq.n	8008d66 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	7b1b      	ldrb	r3, [r3, #12]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fd09 	bl	800a766 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	7b1b      	ldrb	r3, [r3, #12]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f001 fd34 	bl	800a7c8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	7b5b      	ldrb	r3, [r3, #13]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	7b5b      	ldrb	r3, [r3, #13]
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fcf6 	bl	800a766 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	7b5b      	ldrb	r3, [r3, #13]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f001 fd21 	bl	800a7c8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00b      	beq.n	8008db0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f002 f891 	bl	800aec8 <free>
    phost->pActiveClass->pData = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dac:	2200      	movs	r2, #0
 8008dae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b084      	sub	sp, #16
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	3340      	adds	r3, #64	; 0x40
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f8b1 	bl	8008f3a <GetLineCoding>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008ddc:	7afb      	ldrb	r3, [r7, #11]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008de8:	2102      	movs	r1, #2
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008dee:	7afb      	ldrb	r3, [r7, #11]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e00:	2301      	movs	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d877      	bhi.n	8008f0c <USBH_CDC_Process+0x114>
 8008e1c:	a201      	add	r2, pc, #4	; (adr r2, 8008e24 <USBH_CDC_Process+0x2c>)
 8008e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e22:	bf00      	nop
 8008e24:	08008e39 	.word	0x08008e39
 8008e28:	08008e3f 	.word	0x08008e3f
 8008e2c:	08008e6f 	.word	0x08008e6f
 8008e30:	08008ee3 	.word	0x08008ee3
 8008e34:	08008ef1 	.word	0x08008ef1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3c:	e06d      	b.n	8008f1a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f897 	bl	8008f78 <SetLineCoding>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d104      	bne.n	8008e5e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e5c:	e058      	b.n	8008f10 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d055      	beq.n	8008f10 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2204      	movs	r2, #4
 8008e68:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e6c:	e050      	b.n	8008f10 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3340      	adds	r3, #64	; 0x40
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 f860 	bl	8008f3a <GetLineCoding>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d126      	bne.n	8008ed2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e96:	791b      	ldrb	r3, [r3, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d13b      	bne.n	8008f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ea6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d133      	bne.n	8008f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008eb6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d12b      	bne.n	8008f14 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ec4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d124      	bne.n	8008f14 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f95a 	bl	8009184 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ed0:	e020      	b.n	8008f14 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ed2:	7bbb      	ldrb	r3, [r7, #14]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d01d      	beq.n	8008f14 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2204      	movs	r2, #4
 8008edc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ee0:	e018      	b.n	8008f14 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f867 	bl	8008fb6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f8dc 	bl	80090a6 <CDC_ProcessReception>
      break;
 8008eee:	e014      	b.n	8008f1a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 ffe5 	bl	8009ec2 <USBH_ClrFeature>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008f0a:	e005      	b.n	8008f18 <USBH_CDC_Process+0x120>

    default:
      break;
 8008f0c:	bf00      	nop
 8008f0e:	e004      	b.n	8008f1a <USBH_CDC_Process+0x122>
      break;
 8008f10:	bf00      	nop
 8008f12:	e002      	b.n	8008f1a <USBH_CDC_Process+0x122>
      break;
 8008f14:	bf00      	nop
 8008f16:	e000      	b.n	8008f1a <USBH_CDC_Process+0x122>
      break;
 8008f18:	bf00      	nop

  }

  return status;
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	22a1      	movs	r2, #161	; 0xa1
 8008f48:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2221      	movs	r2, #33	; 0x21
 8008f4e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2207      	movs	r2, #7
 8008f60:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2207      	movs	r2, #7
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 f98a 	bl	800a282 <USBH_CtlReq>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2221      	movs	r2, #33	; 0x21
 8008f86:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2207      	movs	r2, #7
 8008f9e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2207      	movs	r2, #7
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f001 f96b 	bl	800a282 <USBH_CtlReq>
 8008fac:	4603      	mov	r3, r0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af02      	add	r7, sp, #8
 8008fbc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d002      	beq.n	8008fdc <CDC_ProcessTransmission+0x26>
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d025      	beq.n	8009026 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8008fda:	e060      	b.n	800909e <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	8b12      	ldrh	r2, [r2, #24]
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d90c      	bls.n	8009002 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	69d9      	ldr	r1, [r3, #28]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8b1a      	ldrh	r2, [r3, #24]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	7b58      	ldrb	r0, [r3, #13]
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 fb51 	bl	800a6a2 <USBH_BulkSendData>
 8009000:	e00c      	b.n	800901c <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	7b58      	ldrb	r0, [r3, #13]
 8009010:	2301      	movs	r3, #1
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4603      	mov	r3, r0
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 fb43 	bl	800a6a2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009024:	e03b      	b.n	800909e <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	7b5b      	ldrb	r3, [r3, #13]
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fe65 	bl	800acfc <USBH_LL_GetURBState>
 8009032:	4603      	mov	r3, r0
 8009034:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d128      	bne.n	800908e <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	8b12      	ldrh	r2, [r2, #24]
 8009044:	4293      	cmp	r3, r2
 8009046:	d90e      	bls.n	8009066 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	8b12      	ldrh	r2, [r2, #24]
 8009050:	1a9a      	subs	r2, r3, r2
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	8b12      	ldrh	r2, [r2, #24]
 800905e:	441a      	add	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	61da      	str	r2, [r3, #28]
 8009064:	e002      	b.n	800906c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800907c:	e00e      	b.n	800909c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f868 	bl	800915c <USBH_CDC_TransmitCallback>
      break;
 800908c:	e006      	b.n	800909c <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800908e:	7afb      	ldrb	r3, [r7, #11]
 8009090:	2b02      	cmp	r3, #2
 8009092:	d103      	bne.n	800909c <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800909c:	bf00      	nop
  }
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b086      	sub	sp, #24
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b4:	69db      	ldr	r3, [r3, #28]
 80090b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090b8:	2300      	movs	r3, #0
 80090ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d002      	beq.n	80090cc <CDC_ProcessReception+0x26>
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d00e      	beq.n	80090e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80090ca:	e043      	b.n	8009154 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	6a19      	ldr	r1, [r3, #32]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	8b5a      	ldrh	r2, [r3, #26]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	7b1b      	ldrb	r3, [r3, #12]
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 fb07 	bl	800a6ec <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2204      	movs	r2, #4
 80090e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090e6:	e035      	b.n	8009154 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	7b1b      	ldrb	r3, [r3, #12]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f001 fe04 	bl	800acfc <USBH_LL_GetURBState>
 80090f4:	4603      	mov	r3, r0
 80090f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80090f8:	7cfb      	ldrb	r3, [r7, #19]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d129      	bne.n	8009152 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	7b1b      	ldrb	r3, [r3, #12]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fd67 	bl	800abd8 <USBH_LL_GetLastXferSize>
 800910a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	429a      	cmp	r2, r3
 8009114:	d016      	beq.n	8009144 <CDC_ProcessReception+0x9e>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	8b5b      	ldrh	r3, [r3, #26]
 800911a:	461a      	mov	r2, r3
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4293      	cmp	r3, r2
 8009120:	d910      	bls.n	8009144 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	1ad2      	subs	r2, r2, r3
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	6a1a      	ldr	r2, [r3, #32]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	441a      	add	r2, r3
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2203      	movs	r2, #3
 800913e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009142:	e006      	b.n	8009152 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f80f 	bl	8009170 <USBH_CDC_ReceiveCallback>
      break;
 8009152:	bf00      	nop
  }
}
 8009154:	bf00      	nop
 8009156:	3718      	adds	r7, #24
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009178:	bf00      	nop
 800917a:	370c      	adds	r7, #12
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091ac:	2302      	movs	r3, #2
 80091ae:	e029      	b.n	8009204 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	79fa      	ldrb	r2, [r7, #7]
 80091b4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f81f 	bl	800920c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f001 fc39 	bl	800aa74 <USBH_LL_Init>

  return USBH_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009218:	2300      	movs	r3, #0
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	e009      	b.n	8009232 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	33e0      	adds	r3, #224	; 0xe0
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	2200      	movs	r2, #0
 800922a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b0e      	cmp	r3, #14
 8009236:	d9f2      	bls.n	800921e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e009      	b.n	8009252 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009258:	d3f1      	bcc.n	800923e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2201      	movs	r2, #1
 8009278:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2240      	movs	r2, #64	; 0x40
 800927e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d016      	beq.n	80092f6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10e      	bne.n	80092f0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80092d8:	1c59      	adds	r1, r3, #1
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	33de      	adds	r3, #222	; 0xde
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
 80092ee:	e004      	b.n	80092fa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092f0:	2302      	movs	r3, #2
 80092f2:	73fb      	strb	r3, [r7, #15]
 80092f4:	e001      	b.n	80092fa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	460b      	mov	r3, r1
 8009312:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	429a      	cmp	r2, r3
 8009322:	d204      	bcs.n	800932e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800932c:	e001      	b.n	8009332 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800932e:	2302      	movs	r3, #2
 8009330:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009332:	7bfb      	ldrb	r3, [r7, #15]
}
 8009334:	4618      	mov	r0, r3
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009340:	b480      	push	{r7}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	461a      	mov	r2, r3
 800934e:	4603      	mov	r3, r0
 8009350:	70fb      	strb	r3, [r7, #3]
 8009352:	460b      	mov	r3, r1
 8009354:	70bb      	strb	r3, [r7, #2]
 8009356:	4613      	mov	r3, r2
 8009358:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800935a:	2300      	movs	r3, #0
 800935c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800935e:	2300      	movs	r3, #0
 8009360:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009368:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800936a:	e025      	b.n	80093b8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	221a      	movs	r2, #26
 8009370:	fb02 f303 	mul.w	r3, r2, r3
 8009374:	3308      	adds	r3, #8
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	3302      	adds	r3, #2
 800937c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	795b      	ldrb	r3, [r3, #5]
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	429a      	cmp	r2, r3
 8009386:	d002      	beq.n	800938e <USBH_FindInterface+0x4e>
 8009388:	78fb      	ldrb	r3, [r7, #3]
 800938a:	2bff      	cmp	r3, #255	; 0xff
 800938c:	d111      	bne.n	80093b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009392:	78ba      	ldrb	r2, [r7, #2]
 8009394:	429a      	cmp	r2, r3
 8009396:	d002      	beq.n	800939e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009398:	78bb      	ldrb	r3, [r7, #2]
 800939a:	2bff      	cmp	r3, #255	; 0xff
 800939c:	d109      	bne.n	80093b2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80093a2:	787a      	ldrb	r2, [r7, #1]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d002      	beq.n	80093ae <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80093a8:	787b      	ldrb	r3, [r7, #1]
 80093aa:	2bff      	cmp	r3, #255	; 0xff
 80093ac:	d101      	bne.n	80093b2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	e006      	b.n	80093c0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	3301      	adds	r3, #1
 80093b6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d9d6      	bls.n	800936c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80093be:	23ff      	movs	r3, #255	; 0xff
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	371c      	adds	r7, #28
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fb89 	bl	800aaec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80093da:	2101      	movs	r1, #1
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 fca0 	bl	800ad22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b088      	sub	sp, #32
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093f4:	2302      	movs	r3, #2
 80093f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b01      	cmp	r3, #1
 8009406:	d102      	bne.n	800940e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2203      	movs	r2, #3
 800940c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b0b      	cmp	r3, #11
 8009416:	f200 81b3 	bhi.w	8009780 <USBH_Process+0x394>
 800941a:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <USBH_Process+0x34>)
 800941c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009420:	08009451 	.word	0x08009451
 8009424:	08009483 	.word	0x08009483
 8009428:	080094eb 	.word	0x080094eb
 800942c:	0800971b 	.word	0x0800971b
 8009430:	08009781 	.word	0x08009781
 8009434:	0800958f 	.word	0x0800958f
 8009438:	080096c1 	.word	0x080096c1
 800943c:	080095c5 	.word	0x080095c5
 8009440:	080095e5 	.word	0x080095e5
 8009444:	08009605 	.word	0x08009605
 8009448:	08009633 	.word	0x08009633
 800944c:	08009703 	.word	0x08009703
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	f000 8193 	beq.w	8009784 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009464:	20c8      	movs	r0, #200	; 0xc8
 8009466:	f001 fca6 	bl	800adb6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fb99 	bl	800aba2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009480:	e180      	b.n	8009784 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009488:	2b01      	cmp	r3, #1
 800948a:	d107      	bne.n	800949c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800949a:	e182      	b.n	80097a2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094a6:	d914      	bls.n	80094d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094ae:	3301      	adds	r3, #1
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d903      	bls.n	80094ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	220d      	movs	r2, #13
 80094c6:	701a      	strb	r2, [r3, #0]
      break;
 80094c8:	e16b      	b.n	80097a2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	701a      	strb	r2, [r3, #0]
      break;
 80094d0:	e167      	b.n	80097a2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80094d8:	f103 020a 	add.w	r2, r3, #10
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80094e2:	200a      	movs	r0, #10
 80094e4:	f001 fc67 	bl	800adb6 <USBH_Delay>
      break;
 80094e8:	e15b      	b.n	80097a2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094fa:	2104      	movs	r1, #4
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009500:	2064      	movs	r0, #100	; 0x64
 8009502:	f001 fc58 	bl	800adb6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f001 fb26 	bl	800ab58 <USBH_LL_GetSpeed>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2205      	movs	r2, #5
 800951a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800951c:	2100      	movs	r1, #0
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f931 	bl	800a786 <USBH_AllocPipe>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800952c:	2180      	movs	r1, #128	; 0x80
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f929 	bl	800a786 <USBH_AllocPipe>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	7919      	ldrb	r1, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009550:	b292      	uxth	r2, r2
 8009552:	9202      	str	r2, [sp, #8]
 8009554:	2200      	movs	r2, #0
 8009556:	9201      	str	r2, [sp, #4]
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	4603      	mov	r3, r0
 800955c:	2280      	movs	r2, #128	; 0x80
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 f8e2 	bl	800a728 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7959      	ldrb	r1, [r3, #5]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009578:	b292      	uxth	r2, r2
 800957a:	9202      	str	r2, [sp, #8]
 800957c:	2200      	movs	r2, #0
 800957e:	9201      	str	r2, [sp, #4]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	4603      	mov	r3, r0
 8009584:	2200      	movs	r2, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 f8ce 	bl	800a728 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800958c:	e109      	b.n	80097a2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f90c 	bl	80097ac <USBH_HandleEnum>
 8009594:	4603      	mov	r3, r0
 8009596:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009598:	7bbb      	ldrb	r3, [r7, #14]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	f040 80f3 	bne.w	8009788 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d103      	bne.n	80095bc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2208      	movs	r2, #8
 80095b8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095ba:	e0e5      	b.n	8009788 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2207      	movs	r2, #7
 80095c0:	701a      	strb	r2, [r3, #0]
      break;
 80095c2:	e0e1      	b.n	8009788 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 80de 	beq.w	800978c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095d6:	2101      	movs	r1, #1
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2208      	movs	r2, #8
 80095e0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80095e2:	e0d3      	b.n	800978c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 fc20 	bl	8009e34 <USBH_SetCfg>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 80ca 	bne.w	8009790 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2209      	movs	r2, #9
 8009600:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009602:	e0c5      	b.n	8009790 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800960a:	f003 0320 	and.w	r3, r3, #32
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00b      	beq.n	800962a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009612:	2101      	movs	r1, #1
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fc30 	bl	8009e7a <USBH_SetFeature>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	f040 80b9 	bne.w	8009794 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	220a      	movs	r2, #10
 8009626:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009628:	e0b4      	b.n	8009794 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	220a      	movs	r2, #10
 800962e:	701a      	strb	r2, [r3, #0]
      break;
 8009630:	e0b0      	b.n	8009794 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 80ad 	beq.w	8009798 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
 800964a:	e016      	b.n	800967a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800964c:	7bfa      	ldrb	r2, [r7, #15]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	32de      	adds	r2, #222	; 0xde
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	791a      	ldrb	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800965e:	429a      	cmp	r2, r3
 8009660:	d108      	bne.n	8009674 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009662:	7bfa      	ldrb	r2, [r7, #15]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	32de      	adds	r2, #222	; 0xde
 8009668:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009672:	e005      	b.n	8009680 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	3301      	adds	r3, #1
 8009678:	73fb      	strb	r3, [r7, #15]
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0e5      	beq.n	800964c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009686:	2b00      	cmp	r3, #0
 8009688:	d016      	beq.n	80096b8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d109      	bne.n	80096b0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2206      	movs	r2, #6
 80096a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096a8:	2103      	movs	r1, #3
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096ae:	e073      	b.n	8009798 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	220d      	movs	r2, #13
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e06f      	b.n	8009798 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	220d      	movs	r2, #13
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	e06b      	b.n	8009798 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d017      	beq.n	80096fa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d103      	bne.n	80096ea <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	220b      	movs	r2, #11
 80096e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096e8:	e058      	b.n	800979c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d154      	bne.n	800979c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	220d      	movs	r2, #13
 80096f6:	701a      	strb	r2, [r3, #0]
      break;
 80096f8:	e050      	b.n	800979c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	220d      	movs	r2, #13
 80096fe:	701a      	strb	r2, [r3, #0]
      break;
 8009700:	e04c      	b.n	800979c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009708:	2b00      	cmp	r3, #0
 800970a:	d049      	beq.n	80097a0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	4798      	blx	r3
      }
      break;
 8009718:	e042      	b.n	80097a0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff fd72 	bl	800920c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d009      	beq.n	8009746 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009756:	2105      	movs	r1, #5
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b01      	cmp	r3, #1
 8009766:	d107      	bne.n	8009778 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff fe2b 	bl	80093cc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009776:	e014      	b.n	80097a2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 f9b7 	bl	800aaec <USBH_LL_Start>
      break;
 800977e:	e010      	b.n	80097a2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009780:	bf00      	nop
 8009782:	e00e      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 8009784:	bf00      	nop
 8009786:	e00c      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 8009788:	bf00      	nop
 800978a:	e00a      	b.n	80097a2 <USBH_Process+0x3b6>
    break;
 800978c:	bf00      	nop
 800978e:	e008      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 8009790:	bf00      	nop
 8009792:	e006      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 8009794:	bf00      	nop
 8009796:	e004      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 8009798:	bf00      	nop
 800979a:	e002      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 800979c:	bf00      	nop
 800979e:	e000      	b.n	80097a2 <USBH_Process+0x3b6>
      break;
 80097a0:	bf00      	nop
  }
  return USBH_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097b8:	2301      	movs	r3, #1
 80097ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b07      	cmp	r3, #7
 80097c2:	f200 81c1 	bhi.w	8009b48 <USBH_HandleEnum+0x39c>
 80097c6:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USBH_HandleEnum+0x20>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097ed 	.word	0x080097ed
 80097d0:	080098ab 	.word	0x080098ab
 80097d4:	08009915 	.word	0x08009915
 80097d8:	080099a3 	.word	0x080099a3
 80097dc:	08009a0d 	.word	0x08009a0d
 80097e0:	08009a7d 	.word	0x08009a7d
 80097e4:	08009ac3 	.word	0x08009ac3
 80097e8:	08009b09 	.word	0x08009b09
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097ec:	2108      	movs	r1, #8
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa50 	bl	8009c94 <USBH_Get_DevDesc>
 80097f4:	4603      	mov	r3, r0
 80097f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d130      	bne.n	8009860 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	7919      	ldrb	r1, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009822:	b292      	uxth	r2, r2
 8009824:	9202      	str	r2, [sp, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	9201      	str	r2, [sp, #4]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	2280      	movs	r2, #128	; 0x80
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 ff79 	bl	800a728 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7959      	ldrb	r1, [r3, #5]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800984a:	b292      	uxth	r2, r2
 800984c:	9202      	str	r2, [sp, #8]
 800984e:	2200      	movs	r2, #0
 8009850:	9201      	str	r2, [sp, #4]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	4603      	mov	r3, r0
 8009856:	2200      	movs	r2, #0
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 ff65 	bl	800a728 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800985e:	e175      	b.n	8009b4c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009860:	7bbb      	ldrb	r3, [r7, #14]
 8009862:	2b03      	cmp	r3, #3
 8009864:	f040 8172 	bne.w	8009b4c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800986e:	3301      	adds	r3, #1
 8009870:	b2da      	uxtb	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800987e:	2b03      	cmp	r3, #3
 8009880:	d903      	bls.n	800988a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	220d      	movs	r2, #13
 8009886:	701a      	strb	r2, [r3, #0]
      break;
 8009888:	e160      	b.n	8009b4c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	795b      	ldrb	r3, [r3, #5]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 ff99 	bl	800a7c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	791b      	ldrb	r3, [r3, #4]
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 ff93 	bl	800a7c8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	701a      	strb	r2, [r3, #0]
      break;
 80098a8:	e150      	b.n	8009b4c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098aa:	2112      	movs	r1, #18
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f9f1 	bl	8009c94 <USBH_Get_DevDesc>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80098c2:	e145      	b.n	8009b50 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	f040 8142 	bne.w	8009b50 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098d2:	3301      	adds	r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d903      	bls.n	80098ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	220d      	movs	r2, #13
 80098ea:	701a      	strb	r2, [r3, #0]
      break;
 80098ec:	e130      	b.n	8009b50 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	795b      	ldrb	r3, [r3, #5]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 ff67 	bl	800a7c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	791b      	ldrb	r3, [r3, #4]
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 ff61 	bl	800a7c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	701a      	strb	r2, [r3, #0]
      break;
 8009912:	e11d      	b.n	8009b50 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa68 	bl	8009dec <USBH_SetAddress>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d132      	bne.n	800998c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009926:	2002      	movs	r0, #2
 8009928:	f001 fa45 	bl	800adb6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2201      	movs	r2, #1
 8009930:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2203      	movs	r2, #3
 8009938:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	7919      	ldrb	r1, [r3, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800994e:	b292      	uxth	r2, r2
 8009950:	9202      	str	r2, [sp, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	4603      	mov	r3, r0
 800995a:	2280      	movs	r2, #128	; 0x80
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fee3 	bl	800a728 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	7959      	ldrb	r1, [r3, #5]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009976:	b292      	uxth	r2, r2
 8009978:	9202      	str	r2, [sp, #8]
 800997a:	2200      	movs	r2, #0
 800997c:	9201      	str	r2, [sp, #4]
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4603      	mov	r3, r0
 8009982:	2200      	movs	r2, #0
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fecf 	bl	800a728 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800998a:	e0e3      	b.n	8009b54 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b03      	cmp	r3, #3
 8009990:	f040 80e0 	bne.w	8009b54 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	220d      	movs	r2, #13
 8009998:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	705a      	strb	r2, [r3, #1]
      break;
 80099a0:	e0d8      	b.n	8009b54 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099a2:	2109      	movs	r1, #9
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f99d 	bl	8009ce4 <USBH_Get_CfgDesc>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d103      	bne.n	80099bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2204      	movs	r2, #4
 80099b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ba:	e0cd      	b.n	8009b58 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099bc:	7bbb      	ldrb	r3, [r7, #14]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f040 80ca 	bne.w	8009b58 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ca:	3301      	adds	r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d903      	bls.n	80099e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	220d      	movs	r2, #13
 80099e2:	701a      	strb	r2, [r3, #0]
      break;
 80099e4:	e0b8      	b.n	8009b58 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	795b      	ldrb	r3, [r3, #5]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 feeb 	bl	800a7c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	791b      	ldrb	r3, [r3, #4]
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fee5 	bl	800a7c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	701a      	strb	r2, [r3, #0]
      break;
 8009a0a:	e0a5      	b.n	8009b58 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f965 	bl	8009ce4 <USBH_Get_CfgDesc>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a1e:	7bbb      	ldrb	r3, [r7, #14]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d103      	bne.n	8009a2c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2205      	movs	r2, #5
 8009a28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a2a:	e097      	b.n	8009b5c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	f040 8094 	bne.w	8009b5c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a4a:	2b03      	cmp	r3, #3
 8009a4c:	d903      	bls.n	8009a56 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	220d      	movs	r2, #13
 8009a52:	701a      	strb	r2, [r3, #0]
      break;
 8009a54:	e082      	b.n	8009b5c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	795b      	ldrb	r3, [r3, #5]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 feb3 	bl	800a7c8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	791b      	ldrb	r3, [r3, #4]
 8009a66:	4619      	mov	r1, r3
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fead 	bl	800a7c8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	701a      	strb	r2, [r3, #0]
      break;
 8009a7a:	e06f      	b.n	8009b5c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d019      	beq.n	8009aba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a92:	23ff      	movs	r3, #255	; 0xff
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f949 	bl	8009d2c <USBH_Get_StringDesc>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d103      	bne.n	8009aac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2206      	movs	r2, #6
 8009aa8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009aaa:	e059      	b.n	8009b60 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	d156      	bne.n	8009b60 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	705a      	strb	r2, [r3, #1]
      break;
 8009ab8:	e052      	b.n	8009b60 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2206      	movs	r2, #6
 8009abe:	705a      	strb	r2, [r3, #1]
      break;
 8009ac0:	e04e      	b.n	8009b60 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d019      	beq.n	8009b00 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ad8:	23ff      	movs	r3, #255	; 0xff
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f926 	bl	8009d2c <USBH_Get_StringDesc>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d103      	bne.n	8009af2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2207      	movs	r2, #7
 8009aee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009af0:	e038      	b.n	8009b64 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	2b03      	cmp	r3, #3
 8009af6:	d135      	bne.n	8009b64 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2207      	movs	r2, #7
 8009afc:	705a      	strb	r2, [r3, #1]
      break;
 8009afe:	e031      	b.n	8009b64 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2207      	movs	r2, #7
 8009b04:	705a      	strb	r2, [r3, #1]
      break;
 8009b06:	e02d      	b.n	8009b64 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d017      	beq.n	8009b42 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b1e:	23ff      	movs	r3, #255	; 0xff
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f903 	bl	8009d2c <USBH_Get_StringDesc>
 8009b26:	4603      	mov	r3, r0
 8009b28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b30:	2300      	movs	r3, #0
 8009b32:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b34:	e018      	b.n	8009b68 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b03      	cmp	r3, #3
 8009b3a:	d115      	bne.n	8009b68 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b40:	e012      	b.n	8009b68 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
      break;
 8009b46:	e00f      	b.n	8009b68 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b48:	bf00      	nop
 8009b4a:	e00e      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b4c:	bf00      	nop
 8009b4e:	e00c      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b50:	bf00      	nop
 8009b52:	e00a      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b54:	bf00      	nop
 8009b56:	e008      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b58:	bf00      	nop
 8009b5a:	e006      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b5c:	bf00      	nop
 8009b5e:	e004      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b60:	bf00      	nop
 8009b62:	e002      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b64:	bf00      	nop
 8009b66:	e000      	b.n	8009b6a <USBH_HandleEnum+0x3be>
      break;
 8009b68:	bf00      	nop
  }
  return Status;
 8009b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b86:	bf00      	nop
 8009b88:	370c      	adds	r7, #12
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 f804 	bl	8009bb6 <USBH_HandleSof>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b0b      	cmp	r3, #11
 8009bc6:	d10a      	bne.n	8009bde <USBH_HandleSof+0x28>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bd8:	699b      	ldr	r3, [r3, #24]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
  }
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009be6:	b480      	push	{r7}
 8009be8:	b083      	sub	sp, #12
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009bf6:	bf00      	nop
}
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c02:	b480      	push	{r7}
 8009c04:	b083      	sub	sp, #12
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c12:	bf00      	nop
}
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 ff58 	bl	800ab22 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	791b      	ldrb	r3, [r3, #4]
 8009c76:	4619      	mov	r1, r3
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fda5 	bl	800a7c8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	795b      	ldrb	r3, [r3, #5]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fd9f 	bl	800a7c8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af02      	add	r7, sp, #8
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	4613      	mov	r3, r2
 8009cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f864 	bl	8009d82 <USBH_GetDescriptor>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	b292      	uxth	r2, r2
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f000 f918 	bl	8009f0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b086      	sub	sp, #24
 8009ce8:	af02      	add	r7, sp, #8
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	331c      	adds	r3, #28
 8009cf4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d00:	2100      	movs	r1, #0
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f83d 	bl	8009d82 <USBH_GetDescriptor>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	72fb      	strb	r3, [r7, #11]
 8009d0c:	7afb      	ldrb	r3, [r7, #11]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d107      	bne.n	8009d22 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d18:	887a      	ldrh	r2, [r7, #2]
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 f964 	bl	8009fea <USBH_ParseCfgDesc>
  }

  return status;
 8009d22:	7afb      	ldrb	r3, [r7, #11]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af02      	add	r7, sp, #8
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	461a      	mov	r2, r3
 8009d38:	460b      	mov	r3, r1
 8009d3a:	72fb      	strb	r3, [r7, #11]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d48:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d50:	893b      	ldrh	r3, [r7, #8]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	460b      	mov	r3, r1
 8009d56:	2100      	movs	r1, #0
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f000 f812 	bl	8009d82 <USBH_GetDescriptor>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d107      	bne.n	8009d78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d6e:	893a      	ldrh	r2, [r7, #8]
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fa37 	bl	800a1e6 <USBH_ParseStringDesc>
  }

  return status;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3718      	adds	r7, #24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b084      	sub	sp, #16
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	72fb      	strb	r3, [r7, #11]
 8009d90:	4613      	mov	r3, r2
 8009d92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	789b      	ldrb	r3, [r3, #2]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d11c      	bne.n	8009dd6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d9c:	7afb      	ldrb	r3, [r7, #11]
 8009d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2206      	movs	r2, #6
 8009dac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	893a      	ldrh	r2, [r7, #8]
 8009db2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009db4:	893b      	ldrh	r3, [r7, #8]
 8009db6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dbe:	d104      	bne.n	8009dca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f240 4209 	movw	r2, #1033	; 0x409
 8009dc6:	829a      	strh	r2, [r3, #20]
 8009dc8:	e002      	b.n	8009dd0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	8b3a      	ldrh	r2, [r7, #24]
 8009dd4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009dd6:	8b3b      	ldrh	r3, [r7, #24]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6879      	ldr	r1, [r7, #4]
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f000 fa50 	bl	800a282 <USBH_CtlReq>
 8009de2:	4603      	mov	r3, r0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	789b      	ldrb	r3, [r3, #2]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10f      	bne.n	8009e20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2205      	movs	r2, #5
 8009e0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e20:	2200      	movs	r2, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fa2c 	bl	800a282 <USBH_CtlReq>
 8009e2a:	4603      	mov	r3, r0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b082      	sub	sp, #8
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	789b      	ldrb	r3, [r3, #2]
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d10e      	bne.n	8009e66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2209      	movs	r2, #9
 8009e52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	887a      	ldrh	r2, [r7, #2]
 8009e58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e66:	2200      	movs	r2, #0
 8009e68:	2100      	movs	r1, #0
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa09 	bl	800a282 <USBH_CtlReq>
 8009e70:	4603      	mov	r3, r0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b082      	sub	sp, #8
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	789b      	ldrb	r3, [r3, #2]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d10f      	bne.n	8009eae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2203      	movs	r2, #3
 8009e98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	b29a      	uxth	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f9e5 	bl	800a282 <USBH_CtlReq>
 8009eb8:	4603      	mov	r3, r0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	789b      	ldrb	r3, [r3, #2]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d10f      	bne.n	8009ef6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ee8:	78fb      	ldrb	r3, [r7, #3]
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f9c1 	bl	800a282 <USBH_CtlReq>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	4613      	mov	r3, r2
 8009f16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	781a      	ldrb	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	785a      	ldrb	r2, [r3, #1]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	3303      	adds	r3, #3
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	021b      	lsls	r3, r3, #8
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	791a      	ldrb	r2, [r3, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	795a      	ldrb	r2, [r3, #5]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	799a      	ldrb	r2, [r3, #6]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	79da      	ldrb	r2, [r3, #7]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d939      	bls.n	8009fde <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	3309      	adds	r3, #9
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	330a      	adds	r3, #10
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	330b      	adds	r3, #11
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	021b      	lsls	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	330c      	adds	r3, #12
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	330d      	adds	r3, #13
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	b29a      	uxth	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	7b9a      	ldrb	r2, [r3, #14]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	7bda      	ldrb	r2, [r3, #15]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	7c1a      	ldrb	r2, [r3, #16]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	7c5a      	ldrb	r2, [r3, #17]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	745a      	strb	r2, [r3, #17]
  }
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b08a      	sub	sp, #40	; 0x28
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	785a      	ldrb	r2, [r3, #1]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	3302      	adds	r3, #2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	3303      	adds	r3, #3
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	b29b      	uxth	r3, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	791a      	ldrb	r2, [r3, #4]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	795a      	ldrb	r2, [r3, #5]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	799a      	ldrb	r2, [r3, #6]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	79da      	ldrb	r2, [r3, #7]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	7a1a      	ldrb	r2, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	2b09      	cmp	r3, #9
 800a064:	d95f      	bls.n	800a126 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a066:	2309      	movs	r3, #9
 800a068:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a06e:	e051      	b.n	800a114 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a070:	f107 0316 	add.w	r3, r7, #22
 800a074:	4619      	mov	r1, r3
 800a076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a078:	f000 f8e8 	bl	800a24c <USBH_GetNextDesc>
 800a07c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b04      	cmp	r3, #4
 800a084:	d146      	bne.n	800a114 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a08a:	221a      	movs	r2, #26
 800a08c:	fb02 f303 	mul.w	r3, r2, r3
 800a090:	3308      	adds	r3, #8
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	3302      	adds	r3, #2
 800a098:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a09a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a09c:	69f8      	ldr	r0, [r7, #28]
 800a09e:	f000 f846 	bl	800a12e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0ac:	e022      	b.n	800a0f4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0ae:	f107 0316 	add.w	r3, r7, #22
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0b6:	f000 f8c9 	bl	800a24c <USBH_GetNextDesc>
 800a0ba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	785b      	ldrb	r3, [r3, #1]
 800a0c0:	2b05      	cmp	r3, #5
 800a0c2:	d117      	bne.n	800a0f4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a0cc:	3201      	adds	r2, #1
 800a0ce:	00d2      	lsls	r2, r2, #3
 800a0d0:	211a      	movs	r1, #26
 800a0d2:	fb01 f303 	mul.w	r3, r1, r3
 800a0d6:	4413      	add	r3, r2
 800a0d8:	3308      	adds	r3, #8
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	3304      	adds	r3, #4
 800a0e0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a0e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0e4:	69b8      	ldr	r0, [r7, #24]
 800a0e6:	f000 f851 	bl	800a18c <USBH_ParseEPDesc>
            ep_ix++;
 800a0ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	791b      	ldrb	r3, [r3, #4]
 800a0f8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d204      	bcs.n	800a10a <USBH_ParseCfgDesc+0x120>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	885a      	ldrh	r2, [r3, #2]
 800a104:	8afb      	ldrh	r3, [r7, #22]
 800a106:	429a      	cmp	r2, r3
 800a108:	d8d1      	bhi.n	800a0ae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a10a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a10e:	3301      	adds	r3, #1
 800a110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d804      	bhi.n	800a126 <USBH_ParseCfgDesc+0x13c>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	885a      	ldrh	r2, [r3, #2]
 800a120:	8afb      	ldrh	r3, [r7, #22]
 800a122:	429a      	cmp	r2, r3
 800a124:	d8a4      	bhi.n	800a070 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a126:	bf00      	nop
 800a128:	3728      	adds	r7, #40	; 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	781a      	ldrb	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	785a      	ldrb	r2, [r3, #1]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	789a      	ldrb	r2, [r3, #2]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	78da      	ldrb	r2, [r3, #3]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	791a      	ldrb	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	795a      	ldrb	r2, [r3, #5]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	799a      	ldrb	r2, [r3, #6]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	79da      	ldrb	r2, [r3, #7]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	7a1a      	ldrb	r2, [r3, #8]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	721a      	strb	r2, [r3, #8]
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	785a      	ldrb	r2, [r3, #1]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	789a      	ldrb	r2, [r3, #2]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	78da      	ldrb	r2, [r3, #3]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	3305      	adds	r3, #5
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b29a      	uxth	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	799a      	ldrb	r2, [r3, #6]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	719a      	strb	r2, [r3, #6]
}
 800a1da:	bf00      	nop
 800a1dc:	370c      	adds	r7, #12
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b087      	sub	sp, #28
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d120      	bne.n	800a240 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	1e9a      	subs	r2, r3, #2
 800a204:	88fb      	ldrh	r3, [r7, #6]
 800a206:	4293      	cmp	r3, r2
 800a208:	bf28      	it	cs
 800a20a:	4613      	movcs	r3, r2
 800a20c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3302      	adds	r3, #2
 800a212:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a214:	2300      	movs	r3, #0
 800a216:	82fb      	strh	r3, [r7, #22]
 800a218:	e00b      	b.n	800a232 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a21a:	8afb      	ldrh	r3, [r7, #22]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	781a      	ldrb	r2, [r3, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	3301      	adds	r3, #1
 800a22a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a22c:	8afb      	ldrh	r3, [r7, #22]
 800a22e:	3302      	adds	r3, #2
 800a230:	82fb      	strh	r3, [r7, #22]
 800a232:	8afa      	ldrh	r2, [r7, #22]
 800a234:	8abb      	ldrh	r3, [r7, #20]
 800a236:	429a      	cmp	r2, r3
 800a238:	d3ef      	bcc.n	800a21a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	2200      	movs	r2, #0
 800a23e:	701a      	strb	r2, [r3, #0]
  }
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	881a      	ldrh	r2, [r3, #0]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4413      	add	r3, r2
 800a262:	b29a      	uxth	r2, r3
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	4413      	add	r3, r2
 800a272:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a274:	68fb      	ldr	r3, [r7, #12]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b086      	sub	sp, #24
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	4613      	mov	r3, r2
 800a28e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a290:	2301      	movs	r3, #1
 800a292:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	789b      	ldrb	r3, [r3, #2]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d002      	beq.n	800a2a2 <USBH_CtlReq+0x20>
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d00f      	beq.n	800a2c0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a2a0:	e027      	b.n	800a2f2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	88fa      	ldrh	r2, [r7, #6]
 800a2ac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a2be:	e018      	b.n	800a2f2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f000 f81b 	bl	800a2fc <USBH_HandleControl>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <USBH_CtlReq+0x54>
 800a2d0:	7dfb      	ldrb	r3, [r7, #23]
 800a2d2:	2b03      	cmp	r3, #3
 800a2d4:	d106      	bne.n	800a2e4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	761a      	strb	r2, [r3, #24]
      break;
 800a2e2:	e005      	b.n	800a2f0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a2e4:	7dfb      	ldrb	r3, [r7, #23]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d102      	bne.n	800a2f0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	709a      	strb	r2, [r3, #2]
      break;
 800a2f0:	bf00      	nop
  }
  return status;
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}

0800a2fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af02      	add	r7, sp, #8
 800a302:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a304:	2301      	movs	r3, #1
 800a306:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a308:	2300      	movs	r3, #0
 800a30a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7e1b      	ldrb	r3, [r3, #24]
 800a310:	3b01      	subs	r3, #1
 800a312:	2b0a      	cmp	r3, #10
 800a314:	f200 8158 	bhi.w	800a5c8 <USBH_HandleControl+0x2cc>
 800a318:	a201      	add	r2, pc, #4	; (adr r2, 800a320 <USBH_HandleControl+0x24>)
 800a31a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31e:	bf00      	nop
 800a320:	0800a34d 	.word	0x0800a34d
 800a324:	0800a367 	.word	0x0800a367
 800a328:	0800a3d1 	.word	0x0800a3d1
 800a32c:	0800a3f7 	.word	0x0800a3f7
 800a330:	0800a42f 	.word	0x0800a42f
 800a334:	0800a45b 	.word	0x0800a45b
 800a338:	0800a4ad 	.word	0x0800a4ad
 800a33c:	0800a4cf 	.word	0x0800a4cf
 800a340:	0800a50b 	.word	0x0800a50b
 800a344:	0800a533 	.word	0x0800a533
 800a348:	0800a571 	.word	0x0800a571
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f103 0110 	add.w	r1, r3, #16
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	795b      	ldrb	r3, [r3, #5]
 800a356:	461a      	mov	r2, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f945 	bl	800a5e8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2202      	movs	r2, #2
 800a362:	761a      	strb	r2, [r3, #24]
      break;
 800a364:	e13b      	b.n	800a5de <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	795b      	ldrb	r3, [r3, #5]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fcc5 	bl	800acfc <USBH_LL_GetURBState>
 800a372:	4603      	mov	r3, r0
 800a374:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a376:	7bbb      	ldrb	r3, [r7, #14]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d11e      	bne.n	800a3ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	7c1b      	ldrb	r3, [r3, #16]
 800a380:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a384:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	8adb      	ldrh	r3, [r3, #22]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a38e:	7b7b      	ldrb	r3, [r7, #13]
 800a390:	2b80      	cmp	r3, #128	; 0x80
 800a392:	d103      	bne.n	800a39c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2203      	movs	r2, #3
 800a398:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a39a:	e117      	b.n	800a5cc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2205      	movs	r2, #5
 800a3a0:	761a      	strb	r2, [r3, #24]
      break;
 800a3a2:	e113      	b.n	800a5cc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800a3a4:	7b7b      	ldrb	r3, [r7, #13]
 800a3a6:	2b80      	cmp	r3, #128	; 0x80
 800a3a8:	d103      	bne.n	800a3b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2209      	movs	r2, #9
 800a3ae:	761a      	strb	r2, [r3, #24]
      break;
 800a3b0:	e10c      	b.n	800a5cc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2207      	movs	r2, #7
 800a3b6:	761a      	strb	r2, [r3, #24]
      break;
 800a3b8:	e108      	b.n	800a5cc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3ba:	7bbb      	ldrb	r3, [r7, #14]
 800a3bc:	2b04      	cmp	r3, #4
 800a3be:	d003      	beq.n	800a3c8 <USBH_HandleControl+0xcc>
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	f040 8102 	bne.w	800a5cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	220b      	movs	r2, #11
 800a3cc:	761a      	strb	r2, [r3, #24]
      break;
 800a3ce:	e0fd      	b.n	800a5cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6899      	ldr	r1, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	899a      	ldrh	r2, [r3, #12]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	791b      	ldrb	r3, [r3, #4]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f93c 	bl	800a666 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	761a      	strb	r2, [r3, #24]
      break;
 800a3f4:	e0f3      	b.n	800a5de <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	791b      	ldrb	r3, [r3, #4]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fc7d 	bl	800acfc <USBH_LL_GetURBState>
 800a402:	4603      	mov	r3, r0
 800a404:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a406:	7bbb      	ldrb	r3, [r7, #14]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d102      	bne.n	800a412 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2209      	movs	r2, #9
 800a410:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b05      	cmp	r3, #5
 800a416:	d102      	bne.n	800a41e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a418:	2303      	movs	r3, #3
 800a41a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a41c:	e0d8      	b.n	800a5d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a41e:	7bbb      	ldrb	r3, [r7, #14]
 800a420:	2b04      	cmp	r3, #4
 800a422:	f040 80d5 	bne.w	800a5d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	220b      	movs	r2, #11
 800a42a:	761a      	strb	r2, [r3, #24]
      break;
 800a42c:	e0d0      	b.n	800a5d0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6899      	ldr	r1, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	899a      	ldrh	r2, [r3, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	7958      	ldrb	r0, [r3, #5]
 800a43a:	2301      	movs	r3, #1
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	4603      	mov	r3, r0
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f8eb 	bl	800a61c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2206      	movs	r2, #6
 800a456:	761a      	strb	r2, [r3, #24]
      break;
 800a458:	e0c1      	b.n	800a5de <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	795b      	ldrb	r3, [r3, #5]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 fc4b 	bl	800acfc <USBH_LL_GetURBState>
 800a466:	4603      	mov	r3, r0
 800a468:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a46a:	7bbb      	ldrb	r3, [r7, #14]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d103      	bne.n	800a478 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2207      	movs	r2, #7
 800a474:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a476:	e0ad      	b.n	800a5d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d105      	bne.n	800a48a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	220c      	movs	r2, #12
 800a482:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a484:	2303      	movs	r3, #3
 800a486:	73fb      	strb	r3, [r7, #15]
      break;
 800a488:	e0a4      	b.n	800a5d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d103      	bne.n	800a498 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2205      	movs	r2, #5
 800a494:	761a      	strb	r2, [r3, #24]
      break;
 800a496:	e09d      	b.n	800a5d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800a498:	7bbb      	ldrb	r3, [r7, #14]
 800a49a:	2b04      	cmp	r3, #4
 800a49c:	f040 809a 	bne.w	800a5d4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	220b      	movs	r2, #11
 800a4a4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a4aa:	e093      	b.n	800a5d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	791b      	ldrb	r3, [r3, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 f8d6 	bl	800a666 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2208      	movs	r2, #8
 800a4ca:	761a      	strb	r2, [r3, #24]

      break;
 800a4cc:	e087      	b.n	800a5de <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	791b      	ldrb	r3, [r3, #4]
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f000 fc11 	bl	800acfc <USBH_LL_GetURBState>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d105      	bne.n	800a4f0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	220d      	movs	r2, #13
 800a4e8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4ee:	e073      	b.n	800a5d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b04      	cmp	r3, #4
 800a4f4:	d103      	bne.n	800a4fe <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	220b      	movs	r2, #11
 800a4fa:	761a      	strb	r2, [r3, #24]
      break;
 800a4fc:	e06c      	b.n	800a5d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
 800a500:	2b05      	cmp	r3, #5
 800a502:	d169      	bne.n	800a5d8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800a504:	2303      	movs	r3, #3
 800a506:	73fb      	strb	r3, [r7, #15]
      break;
 800a508:	e066      	b.n	800a5d8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	795a      	ldrb	r2, [r3, #5]
 800a50e:	2301      	movs	r3, #1
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	4613      	mov	r3, r2
 800a514:	2200      	movs	r2, #0
 800a516:	2100      	movs	r1, #0
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f87f 	bl	800a61c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a524:	b29a      	uxth	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	220a      	movs	r2, #10
 800a52e:	761a      	strb	r2, [r3, #24]
      break;
 800a530:	e055      	b.n	800a5de <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	795b      	ldrb	r3, [r3, #5]
 800a536:	4619      	mov	r1, r3
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fbdf 	bl	800acfc <USBH_LL_GetURBState>
 800a53e:	4603      	mov	r3, r0
 800a540:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d105      	bne.n	800a554 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	220d      	movs	r2, #13
 800a550:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a552:	e043      	b.n	800a5dc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	2b02      	cmp	r3, #2
 800a558:	d103      	bne.n	800a562 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2209      	movs	r2, #9
 800a55e:	761a      	strb	r2, [r3, #24]
      break;
 800a560:	e03c      	b.n	800a5dc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b04      	cmp	r3, #4
 800a566:	d139      	bne.n	800a5dc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	220b      	movs	r2, #11
 800a56c:	761a      	strb	r2, [r3, #24]
      break;
 800a56e:	e035      	b.n	800a5dc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	7e5b      	ldrb	r3, [r3, #25]
 800a574:	3301      	adds	r3, #1
 800a576:	b2da      	uxtb	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	765a      	strb	r2, [r3, #25]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7e5b      	ldrb	r3, [r3, #25]
 800a580:	2b02      	cmp	r3, #2
 800a582:	d806      	bhi.n	800a592 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a590:	e025      	b.n	800a5de <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a598:	2106      	movs	r1, #6
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	795b      	ldrb	r3, [r3, #5]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f90c 	bl	800a7c8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	791b      	ldrb	r3, [r3, #4]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f906 	bl	800a7c8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c6:	e00a      	b.n	800a5de <USBH_HandleControl+0x2e2>

    default:
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e008      	b.n	800a5de <USBH_HandleControl+0x2e2>
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e006      	b.n	800a5de <USBH_HandleControl+0x2e2>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e004      	b.n	800a5de <USBH_HandleControl+0x2e2>
      break;
 800a5d4:	bf00      	nop
 800a5d6:	e002      	b.n	800a5de <USBH_HandleControl+0x2e2>
      break;
 800a5d8:	bf00      	nop
 800a5da:	e000      	b.n	800a5de <USBH_HandleControl+0x2e2>
      break;
 800a5dc:	bf00      	nop
  }

  return status;
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a5f6:	79f9      	ldrb	r1, [r7, #7]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	9303      	str	r3, [sp, #12]
 800a5fc:	2308      	movs	r3, #8
 800a5fe:	9302      	str	r3, [sp, #8]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	9301      	str	r3, [sp, #4]
 800a604:	2300      	movs	r3, #0
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	2300      	movs	r3, #0
 800a60a:	2200      	movs	r2, #0
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 fb44 	bl	800ac9a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b088      	sub	sp, #32
 800a620:	af04      	add	r7, sp, #16
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	4611      	mov	r1, r2
 800a628:	461a      	mov	r2, r3
 800a62a:	460b      	mov	r3, r1
 800a62c:	80fb      	strh	r3, [r7, #6]
 800a62e:	4613      	mov	r3, r2
 800a630:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a640:	7979      	ldrb	r1, [r7, #5]
 800a642:	7e3b      	ldrb	r3, [r7, #24]
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2301      	movs	r3, #1
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	2200      	movs	r2, #0
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fb1f 	bl	800ac9a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af04      	add	r7, sp, #16
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	4611      	mov	r1, r2
 800a672:	461a      	mov	r2, r3
 800a674:	460b      	mov	r3, r1
 800a676:	80fb      	strh	r3, [r7, #6]
 800a678:	4613      	mov	r3, r2
 800a67a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a67c:	7979      	ldrb	r1, [r7, #5]
 800a67e:	2300      	movs	r3, #0
 800a680:	9303      	str	r3, [sp, #12]
 800a682:	88fb      	ldrh	r3, [r7, #6]
 800a684:	9302      	str	r3, [sp, #8]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	9301      	str	r3, [sp, #4]
 800a68a:	2301      	movs	r3, #1
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	2300      	movs	r3, #0
 800a690:	2201      	movs	r2, #1
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 fb01 	bl	800ac9a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a698:	2300      	movs	r3, #0

}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b088      	sub	sp, #32
 800a6a6:	af04      	add	r7, sp, #16
 800a6a8:	60f8      	str	r0, [r7, #12]
 800a6aa:	60b9      	str	r1, [r7, #8]
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	80fb      	strh	r3, [r7, #6]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6c6:	7979      	ldrb	r1, [r7, #5]
 800a6c8:	7e3b      	ldrb	r3, [r7, #24]
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	88fb      	ldrh	r3, [r7, #6]
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	9301      	str	r3, [sp, #4]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2302      	movs	r3, #2
 800a6da:	2200      	movs	r2, #0
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 fadc 	bl	800ac9a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af04      	add	r7, sp, #16
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	80fb      	strh	r3, [r7, #6]
 800a6fe:	4613      	mov	r3, r2
 800a700:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a702:	7979      	ldrb	r1, [r7, #5]
 800a704:	2300      	movs	r3, #0
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	88fb      	ldrh	r3, [r7, #6]
 800a70a:	9302      	str	r3, [sp, #8]
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	9301      	str	r3, [sp, #4]
 800a710:	2301      	movs	r3, #1
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	2302      	movs	r3, #2
 800a716:	2201      	movs	r2, #1
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fabe 	bl	800ac9a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af04      	add	r7, sp, #16
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	461a      	mov	r2, r3
 800a736:	4603      	mov	r3, r0
 800a738:	70fb      	strb	r3, [r7, #3]
 800a73a:	460b      	mov	r3, r1
 800a73c:	70bb      	strb	r3, [r7, #2]
 800a73e:	4613      	mov	r3, r2
 800a740:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a742:	7878      	ldrb	r0, [r7, #1]
 800a744:	78ba      	ldrb	r2, [r7, #2]
 800a746:	78f9      	ldrb	r1, [r7, #3]
 800a748:	8b3b      	ldrh	r3, [r7, #24]
 800a74a:	9302      	str	r3, [sp, #8]
 800a74c:	7d3b      	ldrb	r3, [r7, #20]
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	7c3b      	ldrb	r3, [r7, #16]
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	4603      	mov	r3, r0
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa51 	bl	800abfe <USBH_LL_OpenPipe>

  return USBH_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a772:	78fb      	ldrb	r3, [r7, #3]
 800a774:	4619      	mov	r1, r3
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fa70 	bl	800ac5c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 f836 	bl	800a804 <USBH_GetFreePipe>
 800a798:	4603      	mov	r3, r0
 800a79a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a79c:	89fb      	ldrh	r3, [r7, #14]
 800a79e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d00a      	beq.n	800a7bc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a7a6:	78fa      	ldrb	r2, [r7, #3]
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7b2:	6879      	ldr	r1, [r7, #4]
 800a7b4:	33e0      	adds	r3, #224	; 0xe0
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	440b      	add	r3, r1
 800a7ba:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7bc:	89fb      	ldrh	r3, [r7, #14]
 800a7be:	b2db      	uxtb	r3, r3
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a7d4:	78fb      	ldrb	r3, [r7, #3]
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d80d      	bhi.n	800a7f6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	33e0      	adds	r3, #224	; 0xe0
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	685a      	ldr	r2, [r3, #4]
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	33e0      	adds	r3, #224	; 0xe0
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	440b      	add	r3, r1
 800a7f4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a810:	2300      	movs	r3, #0
 800a812:	73fb      	strb	r3, [r7, #15]
 800a814:	e00f      	b.n	800a836 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a816:	7bfb      	ldrb	r3, [r7, #15]
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	33e0      	adds	r3, #224	; 0xe0
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	4413      	add	r3, r2
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	e007      	b.n	800a840 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a830:	7bfb      	ldrb	r3, [r7, #15]
 800a832:	3301      	adds	r3, #1
 800a834:	73fb      	strb	r3, [r7, #15]
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	2b0a      	cmp	r3, #10
 800a83a:	d9ec      	bls.n	800a816 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a83c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a850:	2201      	movs	r2, #1
 800a852:	490e      	ldr	r1, [pc, #56]	; (800a88c <MX_USB_HOST_Init+0x40>)
 800a854:	480e      	ldr	r0, [pc, #56]	; (800a890 <MX_USB_HOST_Init+0x44>)
 800a856:	f7fe fc9f 	bl	8009198 <USBH_Init>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a860:	f7f6 fb4e 	bl	8000f00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a864:	490b      	ldr	r1, [pc, #44]	; (800a894 <MX_USB_HOST_Init+0x48>)
 800a866:	480a      	ldr	r0, [pc, #40]	; (800a890 <MX_USB_HOST_Init+0x44>)
 800a868:	f7fe fd24 	bl	80092b4 <USBH_RegisterClass>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a872:	f7f6 fb45 	bl	8000f00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a876:	4806      	ldr	r0, [pc, #24]	; (800a890 <MX_USB_HOST_Init+0x44>)
 800a878:	f7fe fda8 	bl	80093cc <USBH_Start>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a882:	f7f6 fb3d 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a886:	bf00      	nop
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	0800a8ad 	.word	0x0800a8ad
 800a890:	20000574 	.word	0x20000574
 800a894:	2000000c 	.word	0x2000000c

0800a898 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a89c:	4802      	ldr	r0, [pc, #8]	; (800a8a8 <MX_USB_HOST_Process+0x10>)
 800a89e:	f7fe fda5 	bl	80093ec <USBH_Process>
}
 800a8a2:	bf00      	nop
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000574 	.word	0x20000574

0800a8ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8b8:	78fb      	ldrb	r3, [r7, #3]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d819      	bhi.n	800a8f4 <USBH_UserProcess+0x48>
 800a8c0:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <USBH_UserProcess+0x1c>)
 800a8c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c6:	bf00      	nop
 800a8c8:	0800a8f5 	.word	0x0800a8f5
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a8f5 	.word	0x0800a8f5
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8dd 	.word	0x0800a8dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a8dc:	4b09      	ldr	r3, [pc, #36]	; (800a904 <USBH_UserProcess+0x58>)
 800a8de:	2203      	movs	r2, #3
 800a8e0:	701a      	strb	r2, [r3, #0]
  break;
 800a8e2:	e008      	b.n	800a8f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a8e4:	4b07      	ldr	r3, [pc, #28]	; (800a904 <USBH_UserProcess+0x58>)
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	701a      	strb	r2, [r3, #0]
  break;
 800a8ea:	e004      	b.n	800a8f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <USBH_UserProcess+0x58>)
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]
  break;
 800a8f2:	e000      	b.n	800a8f6 <USBH_UserProcess+0x4a>

  default:
  break;
 800a8f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	20000230 	.word	0x20000230

0800a908 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	; 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a910:	f107 0314 	add.w	r3, r7, #20
 800a914:	2200      	movs	r2, #0
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	605a      	str	r2, [r3, #4]
 800a91a:	609a      	str	r2, [r3, #8]
 800a91c:	60da      	str	r2, [r3, #12]
 800a91e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a928:	d147      	bne.n	800a9ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a92a:	2300      	movs	r3, #0
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	4b25      	ldr	r3, [pc, #148]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a932:	4a24      	ldr	r2, [pc, #144]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a934:	f043 0301 	orr.w	r3, r3, #1
 800a938:	6313      	str	r3, [r2, #48]	; 0x30
 800a93a:	4b22      	ldr	r3, [pc, #136]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93e:	f003 0301 	and.w	r3, r3, #1
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a94a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a94c:	2300      	movs	r3, #0
 800a94e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a950:	2300      	movs	r3, #0
 800a952:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	4619      	mov	r1, r3
 800a95a:	481b      	ldr	r0, [pc, #108]	; (800a9c8 <HAL_HCD_MspInit+0xc0>)
 800a95c:	f7f7 ff80 	bl	8002860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a960:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a966:	2302      	movs	r3, #2
 800a968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a972:	230a      	movs	r3, #10
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a976:	f107 0314 	add.w	r3, r7, #20
 800a97a:	4619      	mov	r1, r3
 800a97c:	4812      	ldr	r0, [pc, #72]	; (800a9c8 <HAL_HCD_MspInit+0xc0>)
 800a97e:	f7f7 ff6f 	bl	8002860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a982:	4b10      	ldr	r3, [pc, #64]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a986:	4a0f      	ldr	r2, [pc, #60]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a98c:	6353      	str	r3, [r2, #52]	; 0x34
 800a98e:	2300      	movs	r3, #0
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a996:	4a0b      	ldr	r2, [pc, #44]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a99c:	6453      	str	r3, [r2, #68]	; 0x44
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <HAL_HCD_MspInit+0xbc>)
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	2043      	movs	r0, #67	; 0x43
 800a9b0:	f7f7 fb8f 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9b4:	2043      	movs	r0, #67	; 0x43
 800a9b6:	f7f7 fba8 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9ba:	bf00      	nop
 800a9bc:	3728      	adds	r7, #40	; 0x28
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	40023800 	.word	0x40023800
 800a9c8:	40020000 	.word	0x40020000

0800a9cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff f8d9 	bl	8009b92 <USBH_LL_IncTimer>
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff f911 	bl	8009c1e <USBH_LL_Connect>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff f91a 	bl	8009c4c <USBH_LL_Disconnect>
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
 800aa2c:	4613      	mov	r3, r2
 800aa2e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa30:	bf00      	nop
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7ff f8cb 	bl	8009be6 <USBH_LL_PortEnabled>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7ff f8cb 	bl	8009c02 <USBH_LL_PortDisabled>
}
 800aa6c:	bf00      	nop
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d12a      	bne.n	800aadc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aa86:	4a18      	ldr	r2, [pc, #96]	; (800aae8 <USBH_LL_Init+0x74>)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a15      	ldr	r2, [pc, #84]	; (800aae8 <USBH_LL_Init+0x74>)
 800aa92:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa96:	4b14      	ldr	r3, [pc, #80]	; (800aae8 <USBH_LL_Init+0x74>)
 800aa98:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aa9c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <USBH_LL_Init+0x74>)
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aaa4:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <USBH_LL_Init+0x74>)
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <USBH_LL_Init+0x74>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <USBH_LL_Init+0x74>)
 800aab2:	2202      	movs	r2, #2
 800aab4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <USBH_LL_Init+0x74>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aabc:	480a      	ldr	r0, [pc, #40]	; (800aae8 <USBH_LL_Init+0x74>)
 800aabe:	f7f8 f89d 	bl	8002bfc <HAL_HCD_Init>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aac8:	f7f6 fa1a 	bl	8000f00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aacc:	4806      	ldr	r0, [pc, #24]	; (800aae8 <USBH_LL_Init+0x74>)
 800aace:	f7f8 fca1 	bl	8003414 <HAL_HCD_GetCurrentFrame>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff f84c 	bl	8009b74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	2000094c 	.word	0x2000094c

0800aaec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7f8 fc0e 	bl	8003324 <HAL_HCD_Start>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f95c 	bl	800adcc <USBH_Get_USB_Status>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7f8 fc16 	bl	800336a <HAL_HCD_Stop>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 f941 	bl	800adcc <USBH_Get_USB_Status>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab60:	2301      	movs	r3, #1
 800ab62:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f8 fc60 	bl	8003430 <HAL_HCD_GetCurrentSpeed>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d007      	beq.n	800ab86 <USBH_LL_GetSpeed+0x2e>
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d302      	bcc.n	800ab80 <USBH_LL_GetSpeed+0x28>
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d006      	beq.n	800ab8c <USBH_LL_GetSpeed+0x34>
 800ab7e:	e008      	b.n	800ab92 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]
    break;
 800ab84:	e008      	b.n	800ab98 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ab86:	2301      	movs	r3, #1
 800ab88:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8a:	e005      	b.n	800ab98 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab90:	e002      	b.n	800ab98 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ab92:	2301      	movs	r3, #1
 800ab94:	73fb      	strb	r3, [r7, #15]
    break;
 800ab96:	bf00      	nop
  }
  return  speed;
 800ab98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3710      	adds	r7, #16
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f8 fbf3 	bl	80033a4 <HAL_HCD_ResetPort>
 800abbe:	4603      	mov	r3, r0
 800abc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f901 	bl	800adcc <USBH_Get_USB_Status>
 800abca:	4603      	mov	r3, r0
 800abcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abce:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3710      	adds	r7, #16
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	460b      	mov	r3, r1
 800abe2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	4611      	mov	r1, r2
 800abee:	4618      	mov	r0, r3
 800abf0:	f7f8 fbfb 	bl	80033ea <HAL_HCD_HC_GetXferCount>
 800abf4:	4603      	mov	r3, r0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}

0800abfe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800abfe:	b590      	push	{r4, r7, lr}
 800ac00:	b089      	sub	sp, #36	; 0x24
 800ac02:	af04      	add	r7, sp, #16
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	70fb      	strb	r3, [r7, #3]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70bb      	strb	r3, [r7, #2]
 800ac14:	4613      	mov	r3, r2
 800ac16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac26:	787c      	ldrb	r4, [r7, #1]
 800ac28:	78ba      	ldrb	r2, [r7, #2]
 800ac2a:	78f9      	ldrb	r1, [r7, #3]
 800ac2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac2e:	9302      	str	r3, [sp, #8]
 800ac30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac34:	9301      	str	r3, [sp, #4]
 800ac36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac3a:	9300      	str	r3, [sp, #0]
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	f7f8 f83f 	bl	8002cc0 <HAL_HCD_HC_Init>
 800ac42:	4603      	mov	r3, r0
 800ac44:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 f8bf 	bl	800adcc <USBH_Get_USB_Status>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd90      	pop	{r4, r7, pc}

0800ac5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac76:	78fa      	ldrb	r2, [r7, #3]
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7f8 f8b8 	bl	8002df0 <HAL_HCD_HC_Halt>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f8a0 	bl	800adcc <USBH_Get_USB_Status>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ac9a:	b590      	push	{r4, r7, lr}
 800ac9c:	b089      	sub	sp, #36	; 0x24
 800ac9e:	af04      	add	r7, sp, #16
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	4608      	mov	r0, r1
 800aca4:	4611      	mov	r1, r2
 800aca6:	461a      	mov	r2, r3
 800aca8:	4603      	mov	r3, r0
 800acaa:	70fb      	strb	r3, [r7, #3]
 800acac:	460b      	mov	r3, r1
 800acae:	70bb      	strb	r3, [r7, #2]
 800acb0:	4613      	mov	r3, r2
 800acb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800acc2:	787c      	ldrb	r4, [r7, #1]
 800acc4:	78ba      	ldrb	r2, [r7, #2]
 800acc6:	78f9      	ldrb	r1, [r7, #3]
 800acc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acd0:	9302      	str	r3, [sp, #8]
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	4623      	mov	r3, r4
 800acde:	f7f8 f8ab 	bl	8002e38 <HAL_HCD_HC_SubmitRequest>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f86f 	bl	800adcc <USBH_Get_USB_Status>
 800acee:	4603      	mov	r3, r0
 800acf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd90      	pop	{r4, r7, pc}

0800acfc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f8 fb54 	bl	80033c0 <HAL_HCD_HC_GetURBState>
 800ad18:	4603      	mov	r3, r0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad34:	2b01      	cmp	r3, #1
 800ad36:	d103      	bne.n	800ad40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad38:	78fb      	ldrb	r3, [r7, #3]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f000 f872 	bl	800ae24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad40:	20c8      	movs	r0, #200	; 0xc8
 800ad42:	f7f6 fcd5 	bl	80016f0 <HAL_Delay>
  return USBH_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad68:	78fa      	ldrb	r2, [r7, #3]
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	440b      	add	r3, r1
 800ad76:	333b      	adds	r3, #59	; 0x3b
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ad7e:	78fa      	ldrb	r2, [r7, #3]
 800ad80:	68f9      	ldr	r1, [r7, #12]
 800ad82:	4613      	mov	r3, r2
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4413      	add	r3, r2
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	440b      	add	r3, r1
 800ad8c:	3350      	adds	r3, #80	; 0x50
 800ad8e:	78ba      	ldrb	r2, [r7, #2]
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	e009      	b.n	800ada8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	00db      	lsls	r3, r3, #3
 800ada0:	440b      	add	r3, r1
 800ada2:	3351      	adds	r3, #81	; 0x51
 800ada4:	78ba      	ldrb	r2, [r7, #2]
 800ada6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f7f6 fc96 	bl	80016f0 <HAL_Delay>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	4603      	mov	r3, r0
 800add4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adda:	79fb      	ldrb	r3, [r7, #7]
 800addc:	2b03      	cmp	r3, #3
 800adde:	d817      	bhi.n	800ae10 <USBH_Get_USB_Status+0x44>
 800ade0:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <USBH_Get_USB_Status+0x1c>)
 800ade2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade6:	bf00      	nop
 800ade8:	0800adf9 	.word	0x0800adf9
 800adec:	0800adff 	.word	0x0800adff
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800ae0b 	.word	0x0800ae0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73fb      	strb	r3, [r7, #15]
    break;
 800adfc:	e00b      	b.n	800ae16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800adfe:	2302      	movs	r3, #2
 800ae00:	73fb      	strb	r3, [r7, #15]
    break;
 800ae02:	e008      	b.n	800ae16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae04:	2301      	movs	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
    break;
 800ae08:	e005      	b.n	800ae16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0e:	e002      	b.n	800ae16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae10:	2302      	movs	r3, #2
 800ae12:	73fb      	strb	r3, [r7, #15]
    break;
 800ae14:	bf00      	nop
  }
  return usb_status;
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d102      	bne.n	800ae3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
 800ae3c:	e001      	b.n	800ae42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	461a      	mov	r2, r3
 800ae46:	2101      	movs	r1, #1
 800ae48:	4803      	ldr	r0, [pc, #12]	; (800ae58 <MX_DriverVbusFS+0x34>)
 800ae4a:	f7f7 fea3 	bl	8002b94 <HAL_GPIO_WritePin>
}
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	40020800 	.word	0x40020800

0800ae5c <atoi>:
 800ae5c:	220a      	movs	r2, #10
 800ae5e:	2100      	movs	r1, #0
 800ae60:	f000 b996 	b.w	800b190 <strtol>

0800ae64 <__errno>:
 800ae64:	4b01      	ldr	r3, [pc, #4]	; (800ae6c <__errno+0x8>)
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop
 800ae6c:	2000002c 	.word	0x2000002c

0800ae70 <__libc_init_array>:
 800ae70:	b570      	push	{r4, r5, r6, lr}
 800ae72:	4e0d      	ldr	r6, [pc, #52]	; (800aea8 <__libc_init_array+0x38>)
 800ae74:	4c0d      	ldr	r4, [pc, #52]	; (800aeac <__libc_init_array+0x3c>)
 800ae76:	1ba4      	subs	r4, r4, r6
 800ae78:	10a4      	asrs	r4, r4, #2
 800ae7a:	2500      	movs	r5, #0
 800ae7c:	42a5      	cmp	r5, r4
 800ae7e:	d109      	bne.n	800ae94 <__libc_init_array+0x24>
 800ae80:	4e0b      	ldr	r6, [pc, #44]	; (800aeb0 <__libc_init_array+0x40>)
 800ae82:	4c0c      	ldr	r4, [pc, #48]	; (800aeb4 <__libc_init_array+0x44>)
 800ae84:	f000 fcec 	bl	800b860 <_init>
 800ae88:	1ba4      	subs	r4, r4, r6
 800ae8a:	10a4      	asrs	r4, r4, #2
 800ae8c:	2500      	movs	r5, #0
 800ae8e:	42a5      	cmp	r5, r4
 800ae90:	d105      	bne.n	800ae9e <__libc_init_array+0x2e>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae98:	4798      	blx	r3
 800ae9a:	3501      	adds	r5, #1
 800ae9c:	e7ee      	b.n	800ae7c <__libc_init_array+0xc>
 800ae9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aea2:	4798      	blx	r3
 800aea4:	3501      	adds	r5, #1
 800aea6:	e7f2      	b.n	800ae8e <__libc_init_array+0x1e>
 800aea8:	0800b9f4 	.word	0x0800b9f4
 800aeac:	0800b9f4 	.word	0x0800b9f4
 800aeb0:	0800b9f4 	.word	0x0800b9f4
 800aeb4:	0800b9f8 	.word	0x0800b9f8

0800aeb8 <malloc>:
 800aeb8:	4b02      	ldr	r3, [pc, #8]	; (800aec4 <malloc+0xc>)
 800aeba:	4601      	mov	r1, r0
 800aebc:	6818      	ldr	r0, [r3, #0]
 800aebe:	f000 b861 	b.w	800af84 <_malloc_r>
 800aec2:	bf00      	nop
 800aec4:	2000002c 	.word	0x2000002c

0800aec8 <free>:
 800aec8:	4b02      	ldr	r3, [pc, #8]	; (800aed4 <free+0xc>)
 800aeca:	4601      	mov	r1, r0
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f000 b80b 	b.w	800aee8 <_free_r>
 800aed2:	bf00      	nop
 800aed4:	2000002c 	.word	0x2000002c

0800aed8 <memset>:
 800aed8:	4402      	add	r2, r0
 800aeda:	4603      	mov	r3, r0
 800aedc:	4293      	cmp	r3, r2
 800aede:	d100      	bne.n	800aee2 <memset+0xa>
 800aee0:	4770      	bx	lr
 800aee2:	f803 1b01 	strb.w	r1, [r3], #1
 800aee6:	e7f9      	b.n	800aedc <memset+0x4>

0800aee8 <_free_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4605      	mov	r5, r0
 800aeec:	2900      	cmp	r1, #0
 800aeee:	d045      	beq.n	800af7c <_free_r+0x94>
 800aef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef4:	1f0c      	subs	r4, r1, #4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfb8      	it	lt
 800aefa:	18e4      	addlt	r4, r4, r3
 800aefc:	f000 f973 	bl	800b1e6 <__malloc_lock>
 800af00:	4a1f      	ldr	r2, [pc, #124]	; (800af80 <_free_r+0x98>)
 800af02:	6813      	ldr	r3, [r2, #0]
 800af04:	4610      	mov	r0, r2
 800af06:	b933      	cbnz	r3, 800af16 <_free_r+0x2e>
 800af08:	6063      	str	r3, [r4, #4]
 800af0a:	6014      	str	r4, [r2, #0]
 800af0c:	4628      	mov	r0, r5
 800af0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af12:	f000 b969 	b.w	800b1e8 <__malloc_unlock>
 800af16:	42a3      	cmp	r3, r4
 800af18:	d90c      	bls.n	800af34 <_free_r+0x4c>
 800af1a:	6821      	ldr	r1, [r4, #0]
 800af1c:	1862      	adds	r2, r4, r1
 800af1e:	4293      	cmp	r3, r2
 800af20:	bf04      	itt	eq
 800af22:	681a      	ldreq	r2, [r3, #0]
 800af24:	685b      	ldreq	r3, [r3, #4]
 800af26:	6063      	str	r3, [r4, #4]
 800af28:	bf04      	itt	eq
 800af2a:	1852      	addeq	r2, r2, r1
 800af2c:	6022      	streq	r2, [r4, #0]
 800af2e:	6004      	str	r4, [r0, #0]
 800af30:	e7ec      	b.n	800af0c <_free_r+0x24>
 800af32:	4613      	mov	r3, r2
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	b10a      	cbz	r2, 800af3c <_free_r+0x54>
 800af38:	42a2      	cmp	r2, r4
 800af3a:	d9fa      	bls.n	800af32 <_free_r+0x4a>
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	1858      	adds	r0, r3, r1
 800af40:	42a0      	cmp	r0, r4
 800af42:	d10b      	bne.n	800af5c <_free_r+0x74>
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	4401      	add	r1, r0
 800af48:	1858      	adds	r0, r3, r1
 800af4a:	4282      	cmp	r2, r0
 800af4c:	6019      	str	r1, [r3, #0]
 800af4e:	d1dd      	bne.n	800af0c <_free_r+0x24>
 800af50:	6810      	ldr	r0, [r2, #0]
 800af52:	6852      	ldr	r2, [r2, #4]
 800af54:	605a      	str	r2, [r3, #4]
 800af56:	4401      	add	r1, r0
 800af58:	6019      	str	r1, [r3, #0]
 800af5a:	e7d7      	b.n	800af0c <_free_r+0x24>
 800af5c:	d902      	bls.n	800af64 <_free_r+0x7c>
 800af5e:	230c      	movs	r3, #12
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	e7d3      	b.n	800af0c <_free_r+0x24>
 800af64:	6820      	ldr	r0, [r4, #0]
 800af66:	1821      	adds	r1, r4, r0
 800af68:	428a      	cmp	r2, r1
 800af6a:	bf04      	itt	eq
 800af6c:	6811      	ldreq	r1, [r2, #0]
 800af6e:	6852      	ldreq	r2, [r2, #4]
 800af70:	6062      	str	r2, [r4, #4]
 800af72:	bf04      	itt	eq
 800af74:	1809      	addeq	r1, r1, r0
 800af76:	6021      	streq	r1, [r4, #0]
 800af78:	605c      	str	r4, [r3, #4]
 800af7a:	e7c7      	b.n	800af0c <_free_r+0x24>
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20000234 	.word	0x20000234

0800af84 <_malloc_r>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	1ccd      	adds	r5, r1, #3
 800af88:	f025 0503 	bic.w	r5, r5, #3
 800af8c:	3508      	adds	r5, #8
 800af8e:	2d0c      	cmp	r5, #12
 800af90:	bf38      	it	cc
 800af92:	250c      	movcc	r5, #12
 800af94:	2d00      	cmp	r5, #0
 800af96:	4606      	mov	r6, r0
 800af98:	db01      	blt.n	800af9e <_malloc_r+0x1a>
 800af9a:	42a9      	cmp	r1, r5
 800af9c:	d903      	bls.n	800afa6 <_malloc_r+0x22>
 800af9e:	230c      	movs	r3, #12
 800afa0:	6033      	str	r3, [r6, #0]
 800afa2:	2000      	movs	r0, #0
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
 800afa6:	f000 f91e 	bl	800b1e6 <__malloc_lock>
 800afaa:	4a21      	ldr	r2, [pc, #132]	; (800b030 <_malloc_r+0xac>)
 800afac:	6814      	ldr	r4, [r2, #0]
 800afae:	4621      	mov	r1, r4
 800afb0:	b991      	cbnz	r1, 800afd8 <_malloc_r+0x54>
 800afb2:	4c20      	ldr	r4, [pc, #128]	; (800b034 <_malloc_r+0xb0>)
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	b91b      	cbnz	r3, 800afc0 <_malloc_r+0x3c>
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 f83d 	bl	800b038 <_sbrk_r>
 800afbe:	6020      	str	r0, [r4, #0]
 800afc0:	4629      	mov	r1, r5
 800afc2:	4630      	mov	r0, r6
 800afc4:	f000 f838 	bl	800b038 <_sbrk_r>
 800afc8:	1c43      	adds	r3, r0, #1
 800afca:	d124      	bne.n	800b016 <_malloc_r+0x92>
 800afcc:	230c      	movs	r3, #12
 800afce:	6033      	str	r3, [r6, #0]
 800afd0:	4630      	mov	r0, r6
 800afd2:	f000 f909 	bl	800b1e8 <__malloc_unlock>
 800afd6:	e7e4      	b.n	800afa2 <_malloc_r+0x1e>
 800afd8:	680b      	ldr	r3, [r1, #0]
 800afda:	1b5b      	subs	r3, r3, r5
 800afdc:	d418      	bmi.n	800b010 <_malloc_r+0x8c>
 800afde:	2b0b      	cmp	r3, #11
 800afe0:	d90f      	bls.n	800b002 <_malloc_r+0x7e>
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	50cd      	str	r5, [r1, r3]
 800afe6:	18cc      	adds	r4, r1, r3
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 f8fd 	bl	800b1e8 <__malloc_unlock>
 800afee:	f104 000b 	add.w	r0, r4, #11
 800aff2:	1d23      	adds	r3, r4, #4
 800aff4:	f020 0007 	bic.w	r0, r0, #7
 800aff8:	1ac3      	subs	r3, r0, r3
 800affa:	d0d3      	beq.n	800afa4 <_malloc_r+0x20>
 800affc:	425a      	negs	r2, r3
 800affe:	50e2      	str	r2, [r4, r3]
 800b000:	e7d0      	b.n	800afa4 <_malloc_r+0x20>
 800b002:	428c      	cmp	r4, r1
 800b004:	684b      	ldr	r3, [r1, #4]
 800b006:	bf16      	itet	ne
 800b008:	6063      	strne	r3, [r4, #4]
 800b00a:	6013      	streq	r3, [r2, #0]
 800b00c:	460c      	movne	r4, r1
 800b00e:	e7eb      	b.n	800afe8 <_malloc_r+0x64>
 800b010:	460c      	mov	r4, r1
 800b012:	6849      	ldr	r1, [r1, #4]
 800b014:	e7cc      	b.n	800afb0 <_malloc_r+0x2c>
 800b016:	1cc4      	adds	r4, r0, #3
 800b018:	f024 0403 	bic.w	r4, r4, #3
 800b01c:	42a0      	cmp	r0, r4
 800b01e:	d005      	beq.n	800b02c <_malloc_r+0xa8>
 800b020:	1a21      	subs	r1, r4, r0
 800b022:	4630      	mov	r0, r6
 800b024:	f000 f808 	bl	800b038 <_sbrk_r>
 800b028:	3001      	adds	r0, #1
 800b02a:	d0cf      	beq.n	800afcc <_malloc_r+0x48>
 800b02c:	6025      	str	r5, [r4, #0]
 800b02e:	e7db      	b.n	800afe8 <_malloc_r+0x64>
 800b030:	20000234 	.word	0x20000234
 800b034:	20000238 	.word	0x20000238

0800b038 <_sbrk_r>:
 800b038:	b538      	push	{r3, r4, r5, lr}
 800b03a:	4c06      	ldr	r4, [pc, #24]	; (800b054 <_sbrk_r+0x1c>)
 800b03c:	2300      	movs	r3, #0
 800b03e:	4605      	mov	r5, r0
 800b040:	4608      	mov	r0, r1
 800b042:	6023      	str	r3, [r4, #0]
 800b044:	f7f6 fa6c 	bl	8001520 <_sbrk>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_sbrk_r+0x1a>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_sbrk_r+0x1a>
 800b050:	602b      	str	r3, [r5, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	20000c10 	.word	0x20000c10

0800b058 <siprintf>:
 800b058:	b40e      	push	{r1, r2, r3}
 800b05a:	b500      	push	{lr}
 800b05c:	b09c      	sub	sp, #112	; 0x70
 800b05e:	ab1d      	add	r3, sp, #116	; 0x74
 800b060:	9002      	str	r0, [sp, #8]
 800b062:	9006      	str	r0, [sp, #24]
 800b064:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b068:	4809      	ldr	r0, [pc, #36]	; (800b090 <siprintf+0x38>)
 800b06a:	9107      	str	r1, [sp, #28]
 800b06c:	9104      	str	r1, [sp, #16]
 800b06e:	4909      	ldr	r1, [pc, #36]	; (800b094 <siprintf+0x3c>)
 800b070:	f853 2b04 	ldr.w	r2, [r3], #4
 800b074:	9105      	str	r1, [sp, #20]
 800b076:	6800      	ldr	r0, [r0, #0]
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	a902      	add	r1, sp, #8
 800b07c:	f000 f910 	bl	800b2a0 <_svfiprintf_r>
 800b080:	9b02      	ldr	r3, [sp, #8]
 800b082:	2200      	movs	r2, #0
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	b01c      	add	sp, #112	; 0x70
 800b088:	f85d eb04 	ldr.w	lr, [sp], #4
 800b08c:	b003      	add	sp, #12
 800b08e:	4770      	bx	lr
 800b090:	2000002c 	.word	0x2000002c
 800b094:	ffff0208 	.word	0xffff0208

0800b098 <_strtol_l.isra.0>:
 800b098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b09c:	4680      	mov	r8, r0
 800b09e:	4689      	mov	r9, r1
 800b0a0:	4692      	mov	sl, r2
 800b0a2:	461e      	mov	r6, r3
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	463d      	mov	r5, r7
 800b0a8:	9808      	ldr	r0, [sp, #32]
 800b0aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ae:	f000 f885 	bl	800b1bc <__locale_ctype_ptr_l>
 800b0b2:	4420      	add	r0, r4
 800b0b4:	7843      	ldrb	r3, [r0, #1]
 800b0b6:	f013 0308 	ands.w	r3, r3, #8
 800b0ba:	d132      	bne.n	800b122 <_strtol_l.isra.0+0x8a>
 800b0bc:	2c2d      	cmp	r4, #45	; 0x2d
 800b0be:	d132      	bne.n	800b126 <_strtol_l.isra.0+0x8e>
 800b0c0:	787c      	ldrb	r4, [r7, #1]
 800b0c2:	1cbd      	adds	r5, r7, #2
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	d05d      	beq.n	800b186 <_strtol_l.isra.0+0xee>
 800b0ca:	2e10      	cmp	r6, #16
 800b0cc:	d109      	bne.n	800b0e2 <_strtol_l.isra.0+0x4a>
 800b0ce:	2c30      	cmp	r4, #48	; 0x30
 800b0d0:	d107      	bne.n	800b0e2 <_strtol_l.isra.0+0x4a>
 800b0d2:	782b      	ldrb	r3, [r5, #0]
 800b0d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b0d8:	2b58      	cmp	r3, #88	; 0x58
 800b0da:	d14f      	bne.n	800b17c <_strtol_l.isra.0+0xe4>
 800b0dc:	786c      	ldrb	r4, [r5, #1]
 800b0de:	2610      	movs	r6, #16
 800b0e0:	3502      	adds	r5, #2
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	bf14      	ite	ne
 800b0e6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b0ea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b0ee:	2700      	movs	r7, #0
 800b0f0:	fbb1 fcf6 	udiv	ip, r1, r6
 800b0f4:	4638      	mov	r0, r7
 800b0f6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b0fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b0fe:	2b09      	cmp	r3, #9
 800b100:	d817      	bhi.n	800b132 <_strtol_l.isra.0+0x9a>
 800b102:	461c      	mov	r4, r3
 800b104:	42a6      	cmp	r6, r4
 800b106:	dd23      	ble.n	800b150 <_strtol_l.isra.0+0xb8>
 800b108:	1c7b      	adds	r3, r7, #1
 800b10a:	d007      	beq.n	800b11c <_strtol_l.isra.0+0x84>
 800b10c:	4584      	cmp	ip, r0
 800b10e:	d31c      	bcc.n	800b14a <_strtol_l.isra.0+0xb2>
 800b110:	d101      	bne.n	800b116 <_strtol_l.isra.0+0x7e>
 800b112:	45a6      	cmp	lr, r4
 800b114:	db19      	blt.n	800b14a <_strtol_l.isra.0+0xb2>
 800b116:	fb00 4006 	mla	r0, r0, r6, r4
 800b11a:	2701      	movs	r7, #1
 800b11c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b120:	e7eb      	b.n	800b0fa <_strtol_l.isra.0+0x62>
 800b122:	462f      	mov	r7, r5
 800b124:	e7bf      	b.n	800b0a6 <_strtol_l.isra.0+0xe>
 800b126:	2c2b      	cmp	r4, #43	; 0x2b
 800b128:	bf04      	itt	eq
 800b12a:	1cbd      	addeq	r5, r7, #2
 800b12c:	787c      	ldrbeq	r4, [r7, #1]
 800b12e:	461a      	mov	r2, r3
 800b130:	e7c9      	b.n	800b0c6 <_strtol_l.isra.0+0x2e>
 800b132:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b136:	2b19      	cmp	r3, #25
 800b138:	d801      	bhi.n	800b13e <_strtol_l.isra.0+0xa6>
 800b13a:	3c37      	subs	r4, #55	; 0x37
 800b13c:	e7e2      	b.n	800b104 <_strtol_l.isra.0+0x6c>
 800b13e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b142:	2b19      	cmp	r3, #25
 800b144:	d804      	bhi.n	800b150 <_strtol_l.isra.0+0xb8>
 800b146:	3c57      	subs	r4, #87	; 0x57
 800b148:	e7dc      	b.n	800b104 <_strtol_l.isra.0+0x6c>
 800b14a:	f04f 37ff 	mov.w	r7, #4294967295
 800b14e:	e7e5      	b.n	800b11c <_strtol_l.isra.0+0x84>
 800b150:	1c7b      	adds	r3, r7, #1
 800b152:	d108      	bne.n	800b166 <_strtol_l.isra.0+0xce>
 800b154:	2322      	movs	r3, #34	; 0x22
 800b156:	f8c8 3000 	str.w	r3, [r8]
 800b15a:	4608      	mov	r0, r1
 800b15c:	f1ba 0f00 	cmp.w	sl, #0
 800b160:	d107      	bne.n	800b172 <_strtol_l.isra.0+0xda>
 800b162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b166:	b102      	cbz	r2, 800b16a <_strtol_l.isra.0+0xd2>
 800b168:	4240      	negs	r0, r0
 800b16a:	f1ba 0f00 	cmp.w	sl, #0
 800b16e:	d0f8      	beq.n	800b162 <_strtol_l.isra.0+0xca>
 800b170:	b10f      	cbz	r7, 800b176 <_strtol_l.isra.0+0xde>
 800b172:	f105 39ff 	add.w	r9, r5, #4294967295
 800b176:	f8ca 9000 	str.w	r9, [sl]
 800b17a:	e7f2      	b.n	800b162 <_strtol_l.isra.0+0xca>
 800b17c:	2430      	movs	r4, #48	; 0x30
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d1af      	bne.n	800b0e2 <_strtol_l.isra.0+0x4a>
 800b182:	2608      	movs	r6, #8
 800b184:	e7ad      	b.n	800b0e2 <_strtol_l.isra.0+0x4a>
 800b186:	2c30      	cmp	r4, #48	; 0x30
 800b188:	d0a3      	beq.n	800b0d2 <_strtol_l.isra.0+0x3a>
 800b18a:	260a      	movs	r6, #10
 800b18c:	e7a9      	b.n	800b0e2 <_strtol_l.isra.0+0x4a>
	...

0800b190 <strtol>:
 800b190:	4b08      	ldr	r3, [pc, #32]	; (800b1b4 <strtol+0x24>)
 800b192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b194:	681c      	ldr	r4, [r3, #0]
 800b196:	4d08      	ldr	r5, [pc, #32]	; (800b1b8 <strtol+0x28>)
 800b198:	6a23      	ldr	r3, [r4, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	bf08      	it	eq
 800b19e:	462b      	moveq	r3, r5
 800b1a0:	9300      	str	r3, [sp, #0]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	460a      	mov	r2, r1
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f7ff ff75 	bl	800b098 <_strtol_l.isra.0>
 800b1ae:	b003      	add	sp, #12
 800b1b0:	bd30      	pop	{r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	2000002c 	.word	0x2000002c
 800b1b8:	20000090 	.word	0x20000090

0800b1bc <__locale_ctype_ptr_l>:
 800b1bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b1c0:	4770      	bx	lr

0800b1c2 <__ascii_mbtowc>:
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	b901      	cbnz	r1, 800b1c8 <__ascii_mbtowc+0x6>
 800b1c6:	a901      	add	r1, sp, #4
 800b1c8:	b142      	cbz	r2, 800b1dc <__ascii_mbtowc+0x1a>
 800b1ca:	b14b      	cbz	r3, 800b1e0 <__ascii_mbtowc+0x1e>
 800b1cc:	7813      	ldrb	r3, [r2, #0]
 800b1ce:	600b      	str	r3, [r1, #0]
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	1c10      	adds	r0, r2, #0
 800b1d4:	bf18      	it	ne
 800b1d6:	2001      	movne	r0, #1
 800b1d8:	b002      	add	sp, #8
 800b1da:	4770      	bx	lr
 800b1dc:	4610      	mov	r0, r2
 800b1de:	e7fb      	b.n	800b1d8 <__ascii_mbtowc+0x16>
 800b1e0:	f06f 0001 	mvn.w	r0, #1
 800b1e4:	e7f8      	b.n	800b1d8 <__ascii_mbtowc+0x16>

0800b1e6 <__malloc_lock>:
 800b1e6:	4770      	bx	lr

0800b1e8 <__malloc_unlock>:
 800b1e8:	4770      	bx	lr

0800b1ea <__ssputs_r>:
 800b1ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ee:	688e      	ldr	r6, [r1, #8]
 800b1f0:	429e      	cmp	r6, r3
 800b1f2:	4682      	mov	sl, r0
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	4690      	mov	r8, r2
 800b1f8:	4699      	mov	r9, r3
 800b1fa:	d837      	bhi.n	800b26c <__ssputs_r+0x82>
 800b1fc:	898a      	ldrh	r2, [r1, #12]
 800b1fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b202:	d031      	beq.n	800b268 <__ssputs_r+0x7e>
 800b204:	6825      	ldr	r5, [r4, #0]
 800b206:	6909      	ldr	r1, [r1, #16]
 800b208:	1a6f      	subs	r7, r5, r1
 800b20a:	6965      	ldr	r5, [r4, #20]
 800b20c:	2302      	movs	r3, #2
 800b20e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b212:	fb95 f5f3 	sdiv	r5, r5, r3
 800b216:	f109 0301 	add.w	r3, r9, #1
 800b21a:	443b      	add	r3, r7
 800b21c:	429d      	cmp	r5, r3
 800b21e:	bf38      	it	cc
 800b220:	461d      	movcc	r5, r3
 800b222:	0553      	lsls	r3, r2, #21
 800b224:	d530      	bpl.n	800b288 <__ssputs_r+0x9e>
 800b226:	4629      	mov	r1, r5
 800b228:	f7ff feac 	bl	800af84 <_malloc_r>
 800b22c:	4606      	mov	r6, r0
 800b22e:	b950      	cbnz	r0, 800b246 <__ssputs_r+0x5c>
 800b230:	230c      	movs	r3, #12
 800b232:	f8ca 3000 	str.w	r3, [sl]
 800b236:	89a3      	ldrh	r3, [r4, #12]
 800b238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b23c:	81a3      	strh	r3, [r4, #12]
 800b23e:	f04f 30ff 	mov.w	r0, #4294967295
 800b242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b246:	463a      	mov	r2, r7
 800b248:	6921      	ldr	r1, [r4, #16]
 800b24a:	f000 fab6 	bl	800b7ba <memcpy>
 800b24e:	89a3      	ldrh	r3, [r4, #12]
 800b250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b258:	81a3      	strh	r3, [r4, #12]
 800b25a:	6126      	str	r6, [r4, #16]
 800b25c:	6165      	str	r5, [r4, #20]
 800b25e:	443e      	add	r6, r7
 800b260:	1bed      	subs	r5, r5, r7
 800b262:	6026      	str	r6, [r4, #0]
 800b264:	60a5      	str	r5, [r4, #8]
 800b266:	464e      	mov	r6, r9
 800b268:	454e      	cmp	r6, r9
 800b26a:	d900      	bls.n	800b26e <__ssputs_r+0x84>
 800b26c:	464e      	mov	r6, r9
 800b26e:	4632      	mov	r2, r6
 800b270:	4641      	mov	r1, r8
 800b272:	6820      	ldr	r0, [r4, #0]
 800b274:	f000 faac 	bl	800b7d0 <memmove>
 800b278:	68a3      	ldr	r3, [r4, #8]
 800b27a:	1b9b      	subs	r3, r3, r6
 800b27c:	60a3      	str	r3, [r4, #8]
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	441e      	add	r6, r3
 800b282:	6026      	str	r6, [r4, #0]
 800b284:	2000      	movs	r0, #0
 800b286:	e7dc      	b.n	800b242 <__ssputs_r+0x58>
 800b288:	462a      	mov	r2, r5
 800b28a:	f000 faba 	bl	800b802 <_realloc_r>
 800b28e:	4606      	mov	r6, r0
 800b290:	2800      	cmp	r0, #0
 800b292:	d1e2      	bne.n	800b25a <__ssputs_r+0x70>
 800b294:	6921      	ldr	r1, [r4, #16]
 800b296:	4650      	mov	r0, sl
 800b298:	f7ff fe26 	bl	800aee8 <_free_r>
 800b29c:	e7c8      	b.n	800b230 <__ssputs_r+0x46>
	...

0800b2a0 <_svfiprintf_r>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	461d      	mov	r5, r3
 800b2a6:	898b      	ldrh	r3, [r1, #12]
 800b2a8:	061f      	lsls	r7, r3, #24
 800b2aa:	b09d      	sub	sp, #116	; 0x74
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4616      	mov	r6, r2
 800b2b2:	d50f      	bpl.n	800b2d4 <_svfiprintf_r+0x34>
 800b2b4:	690b      	ldr	r3, [r1, #16]
 800b2b6:	b96b      	cbnz	r3, 800b2d4 <_svfiprintf_r+0x34>
 800b2b8:	2140      	movs	r1, #64	; 0x40
 800b2ba:	f7ff fe63 	bl	800af84 <_malloc_r>
 800b2be:	6020      	str	r0, [r4, #0]
 800b2c0:	6120      	str	r0, [r4, #16]
 800b2c2:	b928      	cbnz	r0, 800b2d0 <_svfiprintf_r+0x30>
 800b2c4:	230c      	movs	r3, #12
 800b2c6:	f8c8 3000 	str.w	r3, [r8]
 800b2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ce:	e0c8      	b.n	800b462 <_svfiprintf_r+0x1c2>
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	6163      	str	r3, [r4, #20]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d8:	2320      	movs	r3, #32
 800b2da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2de:	2330      	movs	r3, #48	; 0x30
 800b2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e4:	9503      	str	r5, [sp, #12]
 800b2e6:	f04f 0b01 	mov.w	fp, #1
 800b2ea:	4637      	mov	r7, r6
 800b2ec:	463d      	mov	r5, r7
 800b2ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b2f2:	b10b      	cbz	r3, 800b2f8 <_svfiprintf_r+0x58>
 800b2f4:	2b25      	cmp	r3, #37	; 0x25
 800b2f6:	d13e      	bne.n	800b376 <_svfiprintf_r+0xd6>
 800b2f8:	ebb7 0a06 	subs.w	sl, r7, r6
 800b2fc:	d00b      	beq.n	800b316 <_svfiprintf_r+0x76>
 800b2fe:	4653      	mov	r3, sl
 800b300:	4632      	mov	r2, r6
 800b302:	4621      	mov	r1, r4
 800b304:	4640      	mov	r0, r8
 800b306:	f7ff ff70 	bl	800b1ea <__ssputs_r>
 800b30a:	3001      	adds	r0, #1
 800b30c:	f000 80a4 	beq.w	800b458 <_svfiprintf_r+0x1b8>
 800b310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b312:	4453      	add	r3, sl
 800b314:	9309      	str	r3, [sp, #36]	; 0x24
 800b316:	783b      	ldrb	r3, [r7, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 809d 	beq.w	800b458 <_svfiprintf_r+0x1b8>
 800b31e:	2300      	movs	r3, #0
 800b320:	f04f 32ff 	mov.w	r2, #4294967295
 800b324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b328:	9304      	str	r3, [sp, #16]
 800b32a:	9307      	str	r3, [sp, #28]
 800b32c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b330:	931a      	str	r3, [sp, #104]	; 0x68
 800b332:	462f      	mov	r7, r5
 800b334:	2205      	movs	r2, #5
 800b336:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b33a:	4850      	ldr	r0, [pc, #320]	; (800b47c <_svfiprintf_r+0x1dc>)
 800b33c:	f7f4 ff48 	bl	80001d0 <memchr>
 800b340:	9b04      	ldr	r3, [sp, #16]
 800b342:	b9d0      	cbnz	r0, 800b37a <_svfiprintf_r+0xda>
 800b344:	06d9      	lsls	r1, r3, #27
 800b346:	bf44      	itt	mi
 800b348:	2220      	movmi	r2, #32
 800b34a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b34e:	071a      	lsls	r2, r3, #28
 800b350:	bf44      	itt	mi
 800b352:	222b      	movmi	r2, #43	; 0x2b
 800b354:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b358:	782a      	ldrb	r2, [r5, #0]
 800b35a:	2a2a      	cmp	r2, #42	; 0x2a
 800b35c:	d015      	beq.n	800b38a <_svfiprintf_r+0xea>
 800b35e:	9a07      	ldr	r2, [sp, #28]
 800b360:	462f      	mov	r7, r5
 800b362:	2000      	movs	r0, #0
 800b364:	250a      	movs	r5, #10
 800b366:	4639      	mov	r1, r7
 800b368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b36c:	3b30      	subs	r3, #48	; 0x30
 800b36e:	2b09      	cmp	r3, #9
 800b370:	d94d      	bls.n	800b40e <_svfiprintf_r+0x16e>
 800b372:	b1b8      	cbz	r0, 800b3a4 <_svfiprintf_r+0x104>
 800b374:	e00f      	b.n	800b396 <_svfiprintf_r+0xf6>
 800b376:	462f      	mov	r7, r5
 800b378:	e7b8      	b.n	800b2ec <_svfiprintf_r+0x4c>
 800b37a:	4a40      	ldr	r2, [pc, #256]	; (800b47c <_svfiprintf_r+0x1dc>)
 800b37c:	1a80      	subs	r0, r0, r2
 800b37e:	fa0b f000 	lsl.w	r0, fp, r0
 800b382:	4318      	orrs	r0, r3
 800b384:	9004      	str	r0, [sp, #16]
 800b386:	463d      	mov	r5, r7
 800b388:	e7d3      	b.n	800b332 <_svfiprintf_r+0x92>
 800b38a:	9a03      	ldr	r2, [sp, #12]
 800b38c:	1d11      	adds	r1, r2, #4
 800b38e:	6812      	ldr	r2, [r2, #0]
 800b390:	9103      	str	r1, [sp, #12]
 800b392:	2a00      	cmp	r2, #0
 800b394:	db01      	blt.n	800b39a <_svfiprintf_r+0xfa>
 800b396:	9207      	str	r2, [sp, #28]
 800b398:	e004      	b.n	800b3a4 <_svfiprintf_r+0x104>
 800b39a:	4252      	negs	r2, r2
 800b39c:	f043 0302 	orr.w	r3, r3, #2
 800b3a0:	9207      	str	r2, [sp, #28]
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	783b      	ldrb	r3, [r7, #0]
 800b3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a8:	d10c      	bne.n	800b3c4 <_svfiprintf_r+0x124>
 800b3aa:	787b      	ldrb	r3, [r7, #1]
 800b3ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ae:	d133      	bne.n	800b418 <_svfiprintf_r+0x178>
 800b3b0:	9b03      	ldr	r3, [sp, #12]
 800b3b2:	1d1a      	adds	r2, r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	9203      	str	r2, [sp, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	bfb8      	it	lt
 800b3bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3c0:	3702      	adds	r7, #2
 800b3c2:	9305      	str	r3, [sp, #20]
 800b3c4:	4d2e      	ldr	r5, [pc, #184]	; (800b480 <_svfiprintf_r+0x1e0>)
 800b3c6:	7839      	ldrb	r1, [r7, #0]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f7f4 ff00 	bl	80001d0 <memchr>
 800b3d0:	b138      	cbz	r0, 800b3e2 <_svfiprintf_r+0x142>
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	1b40      	subs	r0, r0, r5
 800b3d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	4303      	orrs	r3, r0
 800b3de:	3701      	adds	r7, #1
 800b3e0:	9304      	str	r3, [sp, #16]
 800b3e2:	7839      	ldrb	r1, [r7, #0]
 800b3e4:	4827      	ldr	r0, [pc, #156]	; (800b484 <_svfiprintf_r+0x1e4>)
 800b3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ea:	2206      	movs	r2, #6
 800b3ec:	1c7e      	adds	r6, r7, #1
 800b3ee:	f7f4 feef 	bl	80001d0 <memchr>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	d038      	beq.n	800b468 <_svfiprintf_r+0x1c8>
 800b3f6:	4b24      	ldr	r3, [pc, #144]	; (800b488 <_svfiprintf_r+0x1e8>)
 800b3f8:	bb13      	cbnz	r3, 800b440 <_svfiprintf_r+0x1a0>
 800b3fa:	9b03      	ldr	r3, [sp, #12]
 800b3fc:	3307      	adds	r3, #7
 800b3fe:	f023 0307 	bic.w	r3, r3, #7
 800b402:	3308      	adds	r3, #8
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b408:	444b      	add	r3, r9
 800b40a:	9309      	str	r3, [sp, #36]	; 0x24
 800b40c:	e76d      	b.n	800b2ea <_svfiprintf_r+0x4a>
 800b40e:	fb05 3202 	mla	r2, r5, r2, r3
 800b412:	2001      	movs	r0, #1
 800b414:	460f      	mov	r7, r1
 800b416:	e7a6      	b.n	800b366 <_svfiprintf_r+0xc6>
 800b418:	2300      	movs	r3, #0
 800b41a:	3701      	adds	r7, #1
 800b41c:	9305      	str	r3, [sp, #20]
 800b41e:	4619      	mov	r1, r3
 800b420:	250a      	movs	r5, #10
 800b422:	4638      	mov	r0, r7
 800b424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b428:	3a30      	subs	r2, #48	; 0x30
 800b42a:	2a09      	cmp	r2, #9
 800b42c:	d903      	bls.n	800b436 <_svfiprintf_r+0x196>
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d0c8      	beq.n	800b3c4 <_svfiprintf_r+0x124>
 800b432:	9105      	str	r1, [sp, #20]
 800b434:	e7c6      	b.n	800b3c4 <_svfiprintf_r+0x124>
 800b436:	fb05 2101 	mla	r1, r5, r1, r2
 800b43a:	2301      	movs	r3, #1
 800b43c:	4607      	mov	r7, r0
 800b43e:	e7f0      	b.n	800b422 <_svfiprintf_r+0x182>
 800b440:	ab03      	add	r3, sp, #12
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4622      	mov	r2, r4
 800b446:	4b11      	ldr	r3, [pc, #68]	; (800b48c <_svfiprintf_r+0x1ec>)
 800b448:	a904      	add	r1, sp, #16
 800b44a:	4640      	mov	r0, r8
 800b44c:	f3af 8000 	nop.w
 800b450:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b454:	4681      	mov	r9, r0
 800b456:	d1d6      	bne.n	800b406 <_svfiprintf_r+0x166>
 800b458:	89a3      	ldrh	r3, [r4, #12]
 800b45a:	065b      	lsls	r3, r3, #25
 800b45c:	f53f af35 	bmi.w	800b2ca <_svfiprintf_r+0x2a>
 800b460:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b462:	b01d      	add	sp, #116	; 0x74
 800b464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b468:	ab03      	add	r3, sp, #12
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	4622      	mov	r2, r4
 800b46e:	4b07      	ldr	r3, [pc, #28]	; (800b48c <_svfiprintf_r+0x1ec>)
 800b470:	a904      	add	r1, sp, #16
 800b472:	4640      	mov	r0, r8
 800b474:	f000 f882 	bl	800b57c <_printf_i>
 800b478:	e7ea      	b.n	800b450 <_svfiprintf_r+0x1b0>
 800b47a:	bf00      	nop
 800b47c:	0800b8b6 	.word	0x0800b8b6
 800b480:	0800b8bc 	.word	0x0800b8bc
 800b484:	0800b8c0 	.word	0x0800b8c0
 800b488:	00000000 	.word	0x00000000
 800b48c:	0800b1eb 	.word	0x0800b1eb

0800b490 <_printf_common>:
 800b490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b494:	4691      	mov	r9, r2
 800b496:	461f      	mov	r7, r3
 800b498:	688a      	ldr	r2, [r1, #8]
 800b49a:	690b      	ldr	r3, [r1, #16]
 800b49c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bfb8      	it	lt
 800b4a4:	4613      	movlt	r3, r2
 800b4a6:	f8c9 3000 	str.w	r3, [r9]
 800b4aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	460c      	mov	r4, r1
 800b4b2:	b112      	cbz	r2, 800b4ba <_printf_common+0x2a>
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	f8c9 3000 	str.w	r3, [r9]
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	0699      	lsls	r1, r3, #26
 800b4be:	bf42      	ittt	mi
 800b4c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b4c4:	3302      	addmi	r3, #2
 800b4c6:	f8c9 3000 	strmi.w	r3, [r9]
 800b4ca:	6825      	ldr	r5, [r4, #0]
 800b4cc:	f015 0506 	ands.w	r5, r5, #6
 800b4d0:	d107      	bne.n	800b4e2 <_printf_common+0x52>
 800b4d2:	f104 0a19 	add.w	sl, r4, #25
 800b4d6:	68e3      	ldr	r3, [r4, #12]
 800b4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4dc:	1a9b      	subs	r3, r3, r2
 800b4de:	42ab      	cmp	r3, r5
 800b4e0:	dc28      	bgt.n	800b534 <_printf_common+0xa4>
 800b4e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b4e6:	6822      	ldr	r2, [r4, #0]
 800b4e8:	3300      	adds	r3, #0
 800b4ea:	bf18      	it	ne
 800b4ec:	2301      	movne	r3, #1
 800b4ee:	0692      	lsls	r2, r2, #26
 800b4f0:	d42d      	bmi.n	800b54e <_printf_common+0xbe>
 800b4f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	47c0      	blx	r8
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d020      	beq.n	800b542 <_printf_common+0xb2>
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	68e5      	ldr	r5, [r4, #12]
 800b504:	f8d9 2000 	ldr.w	r2, [r9]
 800b508:	f003 0306 	and.w	r3, r3, #6
 800b50c:	2b04      	cmp	r3, #4
 800b50e:	bf08      	it	eq
 800b510:	1aad      	subeq	r5, r5, r2
 800b512:	68a3      	ldr	r3, [r4, #8]
 800b514:	6922      	ldr	r2, [r4, #16]
 800b516:	bf0c      	ite	eq
 800b518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b51c:	2500      	movne	r5, #0
 800b51e:	4293      	cmp	r3, r2
 800b520:	bfc4      	itt	gt
 800b522:	1a9b      	subgt	r3, r3, r2
 800b524:	18ed      	addgt	r5, r5, r3
 800b526:	f04f 0900 	mov.w	r9, #0
 800b52a:	341a      	adds	r4, #26
 800b52c:	454d      	cmp	r5, r9
 800b52e:	d11a      	bne.n	800b566 <_printf_common+0xd6>
 800b530:	2000      	movs	r0, #0
 800b532:	e008      	b.n	800b546 <_printf_common+0xb6>
 800b534:	2301      	movs	r3, #1
 800b536:	4652      	mov	r2, sl
 800b538:	4639      	mov	r1, r7
 800b53a:	4630      	mov	r0, r6
 800b53c:	47c0      	blx	r8
 800b53e:	3001      	adds	r0, #1
 800b540:	d103      	bne.n	800b54a <_printf_common+0xba>
 800b542:	f04f 30ff 	mov.w	r0, #4294967295
 800b546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54a:	3501      	adds	r5, #1
 800b54c:	e7c3      	b.n	800b4d6 <_printf_common+0x46>
 800b54e:	18e1      	adds	r1, r4, r3
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	2030      	movs	r0, #48	; 0x30
 800b554:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b558:	4422      	add	r2, r4
 800b55a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b55e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b562:	3302      	adds	r3, #2
 800b564:	e7c5      	b.n	800b4f2 <_printf_common+0x62>
 800b566:	2301      	movs	r3, #1
 800b568:	4622      	mov	r2, r4
 800b56a:	4639      	mov	r1, r7
 800b56c:	4630      	mov	r0, r6
 800b56e:	47c0      	blx	r8
 800b570:	3001      	adds	r0, #1
 800b572:	d0e6      	beq.n	800b542 <_printf_common+0xb2>
 800b574:	f109 0901 	add.w	r9, r9, #1
 800b578:	e7d8      	b.n	800b52c <_printf_common+0x9c>
	...

0800b57c <_printf_i>:
 800b57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b580:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b584:	460c      	mov	r4, r1
 800b586:	7e09      	ldrb	r1, [r1, #24]
 800b588:	b085      	sub	sp, #20
 800b58a:	296e      	cmp	r1, #110	; 0x6e
 800b58c:	4617      	mov	r7, r2
 800b58e:	4606      	mov	r6, r0
 800b590:	4698      	mov	r8, r3
 800b592:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b594:	f000 80b3 	beq.w	800b6fe <_printf_i+0x182>
 800b598:	d822      	bhi.n	800b5e0 <_printf_i+0x64>
 800b59a:	2963      	cmp	r1, #99	; 0x63
 800b59c:	d036      	beq.n	800b60c <_printf_i+0x90>
 800b59e:	d80a      	bhi.n	800b5b6 <_printf_i+0x3a>
 800b5a0:	2900      	cmp	r1, #0
 800b5a2:	f000 80b9 	beq.w	800b718 <_printf_i+0x19c>
 800b5a6:	2958      	cmp	r1, #88	; 0x58
 800b5a8:	f000 8083 	beq.w	800b6b2 <_printf_i+0x136>
 800b5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b5b4:	e032      	b.n	800b61c <_printf_i+0xa0>
 800b5b6:	2964      	cmp	r1, #100	; 0x64
 800b5b8:	d001      	beq.n	800b5be <_printf_i+0x42>
 800b5ba:	2969      	cmp	r1, #105	; 0x69
 800b5bc:	d1f6      	bne.n	800b5ac <_printf_i+0x30>
 800b5be:	6820      	ldr	r0, [r4, #0]
 800b5c0:	6813      	ldr	r3, [r2, #0]
 800b5c2:	0605      	lsls	r5, r0, #24
 800b5c4:	f103 0104 	add.w	r1, r3, #4
 800b5c8:	d52a      	bpl.n	800b620 <_printf_i+0xa4>
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6011      	str	r1, [r2, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	da03      	bge.n	800b5da <_printf_i+0x5e>
 800b5d2:	222d      	movs	r2, #45	; 0x2d
 800b5d4:	425b      	negs	r3, r3
 800b5d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b5da:	486f      	ldr	r0, [pc, #444]	; (800b798 <_printf_i+0x21c>)
 800b5dc:	220a      	movs	r2, #10
 800b5de:	e039      	b.n	800b654 <_printf_i+0xd8>
 800b5e0:	2973      	cmp	r1, #115	; 0x73
 800b5e2:	f000 809d 	beq.w	800b720 <_printf_i+0x1a4>
 800b5e6:	d808      	bhi.n	800b5fa <_printf_i+0x7e>
 800b5e8:	296f      	cmp	r1, #111	; 0x6f
 800b5ea:	d020      	beq.n	800b62e <_printf_i+0xb2>
 800b5ec:	2970      	cmp	r1, #112	; 0x70
 800b5ee:	d1dd      	bne.n	800b5ac <_printf_i+0x30>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	f043 0320 	orr.w	r3, r3, #32
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	e003      	b.n	800b602 <_printf_i+0x86>
 800b5fa:	2975      	cmp	r1, #117	; 0x75
 800b5fc:	d017      	beq.n	800b62e <_printf_i+0xb2>
 800b5fe:	2978      	cmp	r1, #120	; 0x78
 800b600:	d1d4      	bne.n	800b5ac <_printf_i+0x30>
 800b602:	2378      	movs	r3, #120	; 0x78
 800b604:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b608:	4864      	ldr	r0, [pc, #400]	; (800b79c <_printf_i+0x220>)
 800b60a:	e055      	b.n	800b6b8 <_printf_i+0x13c>
 800b60c:	6813      	ldr	r3, [r2, #0]
 800b60e:	1d19      	adds	r1, r3, #4
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6011      	str	r1, [r2, #0]
 800b614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b61c:	2301      	movs	r3, #1
 800b61e:	e08c      	b.n	800b73a <_printf_i+0x1be>
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6011      	str	r1, [r2, #0]
 800b624:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b628:	bf18      	it	ne
 800b62a:	b21b      	sxthne	r3, r3
 800b62c:	e7cf      	b.n	800b5ce <_printf_i+0x52>
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	6825      	ldr	r5, [r4, #0]
 800b632:	1d18      	adds	r0, r3, #4
 800b634:	6010      	str	r0, [r2, #0]
 800b636:	0628      	lsls	r0, r5, #24
 800b638:	d501      	bpl.n	800b63e <_printf_i+0xc2>
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	e002      	b.n	800b644 <_printf_i+0xc8>
 800b63e:	0668      	lsls	r0, r5, #25
 800b640:	d5fb      	bpl.n	800b63a <_printf_i+0xbe>
 800b642:	881b      	ldrh	r3, [r3, #0]
 800b644:	4854      	ldr	r0, [pc, #336]	; (800b798 <_printf_i+0x21c>)
 800b646:	296f      	cmp	r1, #111	; 0x6f
 800b648:	bf14      	ite	ne
 800b64a:	220a      	movne	r2, #10
 800b64c:	2208      	moveq	r2, #8
 800b64e:	2100      	movs	r1, #0
 800b650:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b654:	6865      	ldr	r5, [r4, #4]
 800b656:	60a5      	str	r5, [r4, #8]
 800b658:	2d00      	cmp	r5, #0
 800b65a:	f2c0 8095 	blt.w	800b788 <_printf_i+0x20c>
 800b65e:	6821      	ldr	r1, [r4, #0]
 800b660:	f021 0104 	bic.w	r1, r1, #4
 800b664:	6021      	str	r1, [r4, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d13d      	bne.n	800b6e6 <_printf_i+0x16a>
 800b66a:	2d00      	cmp	r5, #0
 800b66c:	f040 808e 	bne.w	800b78c <_printf_i+0x210>
 800b670:	4665      	mov	r5, ip
 800b672:	2a08      	cmp	r2, #8
 800b674:	d10b      	bne.n	800b68e <_printf_i+0x112>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	07db      	lsls	r3, r3, #31
 800b67a:	d508      	bpl.n	800b68e <_printf_i+0x112>
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	6862      	ldr	r2, [r4, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	bfde      	ittt	le
 800b684:	2330      	movle	r3, #48	; 0x30
 800b686:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b68a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b68e:	ebac 0305 	sub.w	r3, ip, r5
 800b692:	6123      	str	r3, [r4, #16]
 800b694:	f8cd 8000 	str.w	r8, [sp]
 800b698:	463b      	mov	r3, r7
 800b69a:	aa03      	add	r2, sp, #12
 800b69c:	4621      	mov	r1, r4
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f7ff fef6 	bl	800b490 <_printf_common>
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	d14d      	bne.n	800b744 <_printf_i+0x1c8>
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ac:	b005      	add	sp, #20
 800b6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	4839      	ldr	r0, [pc, #228]	; (800b798 <_printf_i+0x21c>)
 800b6b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b6b8:	6813      	ldr	r3, [r2, #0]
 800b6ba:	6821      	ldr	r1, [r4, #0]
 800b6bc:	1d1d      	adds	r5, r3, #4
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6015      	str	r5, [r2, #0]
 800b6c2:	060a      	lsls	r2, r1, #24
 800b6c4:	d50b      	bpl.n	800b6de <_printf_i+0x162>
 800b6c6:	07ca      	lsls	r2, r1, #31
 800b6c8:	bf44      	itt	mi
 800b6ca:	f041 0120 	orrmi.w	r1, r1, #32
 800b6ce:	6021      	strmi	r1, [r4, #0]
 800b6d0:	b91b      	cbnz	r3, 800b6da <_printf_i+0x15e>
 800b6d2:	6822      	ldr	r2, [r4, #0]
 800b6d4:	f022 0220 	bic.w	r2, r2, #32
 800b6d8:	6022      	str	r2, [r4, #0]
 800b6da:	2210      	movs	r2, #16
 800b6dc:	e7b7      	b.n	800b64e <_printf_i+0xd2>
 800b6de:	064d      	lsls	r5, r1, #25
 800b6e0:	bf48      	it	mi
 800b6e2:	b29b      	uxthmi	r3, r3
 800b6e4:	e7ef      	b.n	800b6c6 <_printf_i+0x14a>
 800b6e6:	4665      	mov	r5, ip
 800b6e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800b6ec:	fb02 3311 	mls	r3, r2, r1, r3
 800b6f0:	5cc3      	ldrb	r3, [r0, r3]
 800b6f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	2900      	cmp	r1, #0
 800b6fa:	d1f5      	bne.n	800b6e8 <_printf_i+0x16c>
 800b6fc:	e7b9      	b.n	800b672 <_printf_i+0xf6>
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	6825      	ldr	r5, [r4, #0]
 800b702:	6961      	ldr	r1, [r4, #20]
 800b704:	1d18      	adds	r0, r3, #4
 800b706:	6010      	str	r0, [r2, #0]
 800b708:	0628      	lsls	r0, r5, #24
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	d501      	bpl.n	800b712 <_printf_i+0x196>
 800b70e:	6019      	str	r1, [r3, #0]
 800b710:	e002      	b.n	800b718 <_printf_i+0x19c>
 800b712:	066a      	lsls	r2, r5, #25
 800b714:	d5fb      	bpl.n	800b70e <_printf_i+0x192>
 800b716:	8019      	strh	r1, [r3, #0]
 800b718:	2300      	movs	r3, #0
 800b71a:	6123      	str	r3, [r4, #16]
 800b71c:	4665      	mov	r5, ip
 800b71e:	e7b9      	b.n	800b694 <_printf_i+0x118>
 800b720:	6813      	ldr	r3, [r2, #0]
 800b722:	1d19      	adds	r1, r3, #4
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	681d      	ldr	r5, [r3, #0]
 800b728:	6862      	ldr	r2, [r4, #4]
 800b72a:	2100      	movs	r1, #0
 800b72c:	4628      	mov	r0, r5
 800b72e:	f7f4 fd4f 	bl	80001d0 <memchr>
 800b732:	b108      	cbz	r0, 800b738 <_printf_i+0x1bc>
 800b734:	1b40      	subs	r0, r0, r5
 800b736:	6060      	str	r0, [r4, #4]
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	6123      	str	r3, [r4, #16]
 800b73c:	2300      	movs	r3, #0
 800b73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b742:	e7a7      	b.n	800b694 <_printf_i+0x118>
 800b744:	6923      	ldr	r3, [r4, #16]
 800b746:	462a      	mov	r2, r5
 800b748:	4639      	mov	r1, r7
 800b74a:	4630      	mov	r0, r6
 800b74c:	47c0      	blx	r8
 800b74e:	3001      	adds	r0, #1
 800b750:	d0aa      	beq.n	800b6a8 <_printf_i+0x12c>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	079b      	lsls	r3, r3, #30
 800b756:	d413      	bmi.n	800b780 <_printf_i+0x204>
 800b758:	68e0      	ldr	r0, [r4, #12]
 800b75a:	9b03      	ldr	r3, [sp, #12]
 800b75c:	4298      	cmp	r0, r3
 800b75e:	bfb8      	it	lt
 800b760:	4618      	movlt	r0, r3
 800b762:	e7a3      	b.n	800b6ac <_printf_i+0x130>
 800b764:	2301      	movs	r3, #1
 800b766:	464a      	mov	r2, r9
 800b768:	4639      	mov	r1, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	47c0      	blx	r8
 800b76e:	3001      	adds	r0, #1
 800b770:	d09a      	beq.n	800b6a8 <_printf_i+0x12c>
 800b772:	3501      	adds	r5, #1
 800b774:	68e3      	ldr	r3, [r4, #12]
 800b776:	9a03      	ldr	r2, [sp, #12]
 800b778:	1a9b      	subs	r3, r3, r2
 800b77a:	42ab      	cmp	r3, r5
 800b77c:	dcf2      	bgt.n	800b764 <_printf_i+0x1e8>
 800b77e:	e7eb      	b.n	800b758 <_printf_i+0x1dc>
 800b780:	2500      	movs	r5, #0
 800b782:	f104 0919 	add.w	r9, r4, #25
 800b786:	e7f5      	b.n	800b774 <_printf_i+0x1f8>
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1ac      	bne.n	800b6e6 <_printf_i+0x16a>
 800b78c:	7803      	ldrb	r3, [r0, #0]
 800b78e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b792:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b796:	e76c      	b.n	800b672 <_printf_i+0xf6>
 800b798:	0800b8c7 	.word	0x0800b8c7
 800b79c:	0800b8d8 	.word	0x0800b8d8

0800b7a0 <__ascii_wctomb>:
 800b7a0:	b149      	cbz	r1, 800b7b6 <__ascii_wctomb+0x16>
 800b7a2:	2aff      	cmp	r2, #255	; 0xff
 800b7a4:	bf85      	ittet	hi
 800b7a6:	238a      	movhi	r3, #138	; 0x8a
 800b7a8:	6003      	strhi	r3, [r0, #0]
 800b7aa:	700a      	strbls	r2, [r1, #0]
 800b7ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7b0:	bf98      	it	ls
 800b7b2:	2001      	movls	r0, #1
 800b7b4:	4770      	bx	lr
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4770      	bx	lr

0800b7ba <memcpy>:
 800b7ba:	b510      	push	{r4, lr}
 800b7bc:	1e43      	subs	r3, r0, #1
 800b7be:	440a      	add	r2, r1
 800b7c0:	4291      	cmp	r1, r2
 800b7c2:	d100      	bne.n	800b7c6 <memcpy+0xc>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7ce:	e7f7      	b.n	800b7c0 <memcpy+0x6>

0800b7d0 <memmove>:
 800b7d0:	4288      	cmp	r0, r1
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	eb01 0302 	add.w	r3, r1, r2
 800b7d8:	d807      	bhi.n	800b7ea <memmove+0x1a>
 800b7da:	1e42      	subs	r2, r0, #1
 800b7dc:	4299      	cmp	r1, r3
 800b7de:	d00a      	beq.n	800b7f6 <memmove+0x26>
 800b7e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b7e8:	e7f8      	b.n	800b7dc <memmove+0xc>
 800b7ea:	4283      	cmp	r3, r0
 800b7ec:	d9f5      	bls.n	800b7da <memmove+0xa>
 800b7ee:	1881      	adds	r1, r0, r2
 800b7f0:	1ad2      	subs	r2, r2, r3
 800b7f2:	42d3      	cmn	r3, r2
 800b7f4:	d100      	bne.n	800b7f8 <memmove+0x28>
 800b7f6:	bd10      	pop	{r4, pc}
 800b7f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b800:	e7f7      	b.n	800b7f2 <memmove+0x22>

0800b802 <_realloc_r>:
 800b802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b804:	4607      	mov	r7, r0
 800b806:	4614      	mov	r4, r2
 800b808:	460e      	mov	r6, r1
 800b80a:	b921      	cbnz	r1, 800b816 <_realloc_r+0x14>
 800b80c:	4611      	mov	r1, r2
 800b80e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b812:	f7ff bbb7 	b.w	800af84 <_malloc_r>
 800b816:	b922      	cbnz	r2, 800b822 <_realloc_r+0x20>
 800b818:	f7ff fb66 	bl	800aee8 <_free_r>
 800b81c:	4625      	mov	r5, r4
 800b81e:	4628      	mov	r0, r5
 800b820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b822:	f000 f814 	bl	800b84e <_malloc_usable_size_r>
 800b826:	42a0      	cmp	r0, r4
 800b828:	d20f      	bcs.n	800b84a <_realloc_r+0x48>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4638      	mov	r0, r7
 800b82e:	f7ff fba9 	bl	800af84 <_malloc_r>
 800b832:	4605      	mov	r5, r0
 800b834:	2800      	cmp	r0, #0
 800b836:	d0f2      	beq.n	800b81e <_realloc_r+0x1c>
 800b838:	4631      	mov	r1, r6
 800b83a:	4622      	mov	r2, r4
 800b83c:	f7ff ffbd 	bl	800b7ba <memcpy>
 800b840:	4631      	mov	r1, r6
 800b842:	4638      	mov	r0, r7
 800b844:	f7ff fb50 	bl	800aee8 <_free_r>
 800b848:	e7e9      	b.n	800b81e <_realloc_r+0x1c>
 800b84a:	4635      	mov	r5, r6
 800b84c:	e7e7      	b.n	800b81e <_realloc_r+0x1c>

0800b84e <_malloc_usable_size_r>:
 800b84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b852:	1f18      	subs	r0, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	bfbc      	itt	lt
 800b858:	580b      	ldrlt	r3, [r1, r0]
 800b85a:	18c0      	addlt	r0, r0, r3
 800b85c:	4770      	bx	lr
	...

0800b860 <_init>:
 800b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b862:	bf00      	nop
 800b864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b866:	bc08      	pop	{r3}
 800b868:	469e      	mov	lr, r3
 800b86a:	4770      	bx	lr

0800b86c <_fini>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	bf00      	nop
 800b870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b872:	bc08      	pop	{r3}
 800b874:	469e      	mov	lr, r3
 800b876:	4770      	bx	lr
