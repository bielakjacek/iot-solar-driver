
STM32F429ZIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a98  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08005c48  08005c48  00015c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db8  08005db8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dc0  08005dc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc4  08005dc4  00015dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001dc  08005fa4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08005fa4  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c927  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c32  00000000  00000000  0002cb33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  0002e768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  0002f458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000237f6  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009627  00000000  00000000  00053856  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc223  00000000  00000000  0005ce7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001390a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b10  00000000  00000000  0013911c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c30 	.word	0x08005c30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08005c30 	.word	0x08005c30

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_TIM_PeriodElapsedCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM10_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	timer_state = 1; //Timer10 interrupt flag
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	200001f8 	.word	0x200001f8

080005b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	 receive_state = 1;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <HAL_UART_RxCpltCallback+0x28>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	 received_data  = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_UART_RxCpltCallback+0x2c>)
 80005c8:	701a      	strb	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200001f9 	.word	0x200001f9
 80005dc:	20000204 	.word	0x20000204

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 ffa3 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f915 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 fae9 	bl	8000bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 fab1 	bl	8000b58 <MX_DMA_Init>
  MX_ADC1_Init();
 80005f6:	f000 f979 	bl	80008ec <MX_ADC1_Init>
  MX_TIM4_Init();
 80005fa:	f000 f9e7 	bl	80009cc <MX_TIM4_Init>
  MX_TIM10_Init();
 80005fe:	f000 fa5b 	bl	8000ab8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fa7f 	bl	8000b04 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000606:	4872      	ldr	r0, [pc, #456]	; (80007d0 <main+0x1f0>)
 8000608:	f002 ff37 	bl	800347a <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, adc_data, 3);
 800060c:	2203      	movs	r2, #3
 800060e:	4971      	ldr	r1, [pc, #452]	; (80007d4 <main+0x1f4>)
 8000610:	4871      	ldr	r0, [pc, #452]	; (80007d8 <main+0x1f8>)
 8000612:	f001 f865 	bl	80016e0 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim4,TIM_CHANNEL_2, &duty, 1);
 8000616:	2301      	movs	r3, #1
 8000618:	4a70      	ldr	r2, [pc, #448]	; (80007dc <main+0x1fc>)
 800061a:	2104      	movs	r1, #4
 800061c:	4870      	ldr	r0, [pc, #448]	; (80007e0 <main+0x200>)
 800061e:	f002 ff85 	bl	800352c <HAL_TIM_PWM_Start_DMA>

    duty=8;
 8000622:	4b6e      	ldr	r3, [pc, #440]	; (80007dc <main+0x1fc>)
 8000624:	2208      	movs	r2, #8
 8000626:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 uint8_t tmp = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	717b      	strb	r3, [r7, #5]
 //HAL_UART_Receive_IT(&huart2, tmp, 1);

  while (1)
  {
	  HAL_UART_Receive_IT(&huart2, &tmp, 1);
 800062c:	1d7b      	adds	r3, r7, #5
 800062e:	2201      	movs	r2, #1
 8000630:	4619      	mov	r1, r3
 8000632:	486c      	ldr	r0, [pc, #432]	; (80007e4 <main+0x204>)
 8000634:	f004 f802 	bl	800463c <HAL_UART_Receive_IT>

	  if(timer_state == 1)//if TIM10 interrupt, transmitt data via uart:
 8000638:	4b6b      	ldr	r3, [pc, #428]	; (80007e8 <main+0x208>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b01      	cmp	r3, #1
 8000640:	d131      	bne.n	80006a6 <main+0xc6>
	  	 {

		  battery = adc_data[0];//battery voltage level
 8000642:	4b64      	ldr	r3, [pc, #400]	; (80007d4 <main+0x1f4>)
 8000644:	881a      	ldrh	r2, [r3, #0]
 8000646:	4b69      	ldr	r3, [pc, #420]	; (80007ec <main+0x20c>)
 8000648:	801a      	strh	r2, [r3, #0]
		  balance_level = adc_data[1];//light level given by photoresistor divider
 800064a:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <main+0x1f4>)
 800064c:	885a      	ldrh	r2, [r3, #2]
 800064e:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <main+0x210>)
 8000650:	801a      	strh	r2, [r3, #0]
		  charging = adc_data[2];//solar panel voltage level
 8000652:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <main+0x1f4>)
 8000654:	889a      	ldrh	r2, [r3, #4]
 8000656:	4b67      	ldr	r3, [pc, #412]	; (80007f4 <main+0x214>)
 8000658:	801a      	strh	r2, [r3, #0]


		  //dataframe example: c00000b00000ll00000s00000

		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);//RED led informs that data is transmitted!
 800065a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065e:	4866      	ldr	r0, [pc, #408]	; (80007f8 <main+0x218>)
 8000660:	f002 fa63 	bl	8002b2a <HAL_GPIO_TogglePin>
		  size = sprintf(data_to_transmit, "c%db%dll%ds%d\n\r",charging,battery,balance_level,servo); // Stworzenie wiadomosci do wyslania
 8000664:	4b63      	ldr	r3, [pc, #396]	; (80007f4 <main+0x214>)
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	4b60      	ldr	r3, [pc, #384]	; (80007ec <main+0x20c>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <main+0x210>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b61      	ldr	r3, [pc, #388]	; (80007fc <main+0x21c>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	4603      	mov	r3, r0
 8000680:	460a      	mov	r2, r1
 8000682:	495f      	ldr	r1, [pc, #380]	; (8000800 <main+0x220>)
 8000684:	485f      	ldr	r0, [pc, #380]	; (8000804 <main+0x224>)
 8000686:	f004 fe17 	bl	80052b8 <siprintf>
 800068a:	4603      	mov	r3, r0
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b5e      	ldr	r3, [pc, #376]	; (8000808 <main+0x228>)
 8000690:	801a      	strh	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, data_to_transmit, size);//data transmittion
 8000692:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <main+0x228>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	495a      	ldr	r1, [pc, #360]	; (8000804 <main+0x224>)
 800069a:	4852      	ldr	r0, [pc, #328]	; (80007e4 <main+0x204>)
 800069c:	f003 ff89 	bl	80045b2 <HAL_UART_Transmit_IT>
		  timer_state=0;
 80006a0:	4b51      	ldr	r3, [pc, #324]	; (80007e8 <main+0x208>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	  	 }

	  if(receive_state == 1)//if UART data availbe - set servo and transmit feedback message
 80006a6:	4b59      	ldr	r3, [pc, #356]	; (800080c <main+0x22c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d150      	bne.n	8000752 <main+0x172>
	  {

		//if data received - turn on LED_Green for half of sec
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006b6:	4850      	ldr	r0, [pc, #320]	; (80007f8 <main+0x218>)
 80006b8:	f002 fa1e 	bl	8002af8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80006bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006c0:	f000 ffa8 	bl	8001614 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	484b      	ldr	r0, [pc, #300]	; (80007f8 <main+0x218>)
 80006cc:	f002 fa14 	bl	8002af8 <HAL_GPIO_WritePin>
		//receiving data:
		//HAL_UART_Receive_IT(&huart2, received_data, 1);

		servo=atoi(&received_data);//store recieved servo data was received, example: 4
 80006d0:	484f      	ldr	r0, [pc, #316]	; (8000810 <main+0x230>)
 80006d2:	f004 fdbb 	bl	800524c <atoi>
 80006d6:	4603      	mov	r3, r0
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b48      	ldr	r3, [pc, #288]	; (80007fc <main+0x21c>)
 80006dc:	801a      	strh	r2, [r3, #0]

		if(servo == 1)
 80006de:	4b47      	ldr	r3, [pc, #284]	; (80007fc <main+0x21c>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d013      	beq.n	800070e <main+0x12e>
		{
		//sleep mode configuration HERE

		}
		else if(servo>3 && servo<12) //example when 4 set servo
 80006e6:	4b45      	ldr	r3, [pc, #276]	; (80007fc <main+0x21c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d90c      	bls.n	8000708 <main+0x128>
 80006ee:	4b43      	ldr	r3, [pc, #268]	; (80007fc <main+0x21c>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2b0b      	cmp	r3, #11
 80006f4:	d808      	bhi.n	8000708 <main+0x128>
		{
		mode = 1;
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <main+0x234>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
		duty = servo;
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <main+0x21c>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b36      	ldr	r3, [pc, #216]	; (80007dc <main+0x1fc>)
 8000704:	701a      	strb	r2, [r3, #0]
 8000706:	e002      	b.n	800070e <main+0x12e>
		}
		else mode=0;// example: when 0 automatic servo positioning
 8000708:	4b42      	ldr	r3, [pc, #264]	; (8000814 <main+0x234>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]

		//feedback message:
		size = sprintf(data_to_transmit, "c%db%dll%ds%d\n\r",charging,battery,balance_level,servo); //feedback message  with extra servo data (updated)
 800070e:	4b39      	ldr	r3, [pc, #228]	; (80007f4 <main+0x214>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	4619      	mov	r1, r3
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <main+0x20c>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	4b35      	ldr	r3, [pc, #212]	; (80007f0 <main+0x210>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <main+0x21c>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	9200      	str	r2, [sp, #0]
 8000728:	4603      	mov	r3, r0
 800072a:	460a      	mov	r2, r1
 800072c:	4934      	ldr	r1, [pc, #208]	; (8000800 <main+0x220>)
 800072e:	4835      	ldr	r0, [pc, #212]	; (8000804 <main+0x224>)
 8000730:	f004 fdc2 	bl	80052b8 <siprintf>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <main+0x228>)
 800073a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, data_to_transmit, size);
 800073c:	4b32      	ldr	r3, [pc, #200]	; (8000808 <main+0x228>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4930      	ldr	r1, [pc, #192]	; (8000804 <main+0x224>)
 8000744:	4827      	ldr	r0, [pc, #156]	; (80007e4 <main+0x204>)
 8000746:	f003 ff34 	bl	80045b2 <HAL_UART_Transmit_IT>
		receive_state=0;
 800074a:	4b30      	ldr	r3, [pc, #192]	; (800080c <main+0x22c>)
 800074c:	2200      	movs	r2, #0
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e76c      	b.n	800062c <main+0x4c>
	  }

	  else if(receive_state == 0 && mode == 0 && timer_state == 1)
 8000752:	4b2e      	ldr	r3, [pc, #184]	; (800080c <main+0x22c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	f47f af67 	bne.w	800062c <main+0x4c>
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <main+0x234>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	f47f af62 	bne.w	800062c <main+0x4c>
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <main+0x208>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b01      	cmp	r3, #1
 8000770:	f47f af5c 	bne.w	800062c <main+0x4c>
	  {
		  const uint16_t neutral_pos= 450;
 8000774:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000778:	80fb      	strh	r3, [r7, #6]

		  if(abs(adc_data[1]-neutral_pos)>50)
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <main+0x1f4>)
 800077c:	885b      	ldrh	r3, [r3, #2]
 800077e:	461a      	mov	r2, r3
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	bfb8      	it	lt
 8000788:	425b      	neglt	r3, r3
 800078a:	2b32      	cmp	r3, #50	; 0x32
 800078c:	f77f af4e 	ble.w	800062c <main+0x4c>
		  {
		  	  if(adc_data[1]-neutral_pos>0)
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <main+0x1f4>)
 8000792:	885b      	ldrh	r3, [r3, #2]
 8000794:	461a      	mov	r2, r3
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	2b00      	cmp	r3, #0
 800079c:	dd0b      	ble.n	80007b6 <main+0x1d6>
				{
				  if(duty<11) duty+=1;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <main+0x1fc>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b0a      	cmp	r3, #10
 80007a4:	f63f af42 	bhi.w	800062c <main+0x4c>
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0x1fc>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <main+0x1fc>)
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e73a      	b.n	800062c <main+0x4c>
				}
			  else{
				  if(duty>4) duty-=1;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0x1fc>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	f67f af36 	bls.w	800062c <main+0x4c>
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <main+0x1fc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b04      	ldr	r3, [pc, #16]	; (80007dc <main+0x1fc>)
 80007ca:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &tmp, 1);
 80007cc:	e72e      	b.n	800062c <main+0x4c>
 80007ce:	bf00      	nop
 80007d0:	2000031c 	.word	0x2000031c
 80007d4:	20000404 	.word	0x20000404
 80007d8:	2000035c 	.word	0x2000035c
 80007dc:	200001fa 	.word	0x200001fa
 80007e0:	200002dc 	.word	0x200002dc
 80007e4:	2000040c 	.word	0x2000040c
 80007e8:	200001f8 	.word	0x200001f8
 80007ec:	200001fc 	.word	0x200001fc
 80007f0:	200001fe 	.word	0x200001fe
 80007f4:	20000200 	.word	0x20000200
 80007f8:	40021800 	.word	0x40021800
 80007fc:	20000202 	.word	0x20000202
 8000800:	08005c48 	.word	0x08005c48
 8000804:	20000278 	.word	0x20000278
 8000808:	20000206 	.word	0x20000206
 800080c:	200001f9 	.word	0x200001f9
 8000810:	20000204 	.word	0x20000204
 8000814:	20000208 	.word	0x20000208

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	; 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	; 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 fd3e 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xcc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a27      	ldr	r2, [pc, #156]	; (80008e4 <SystemClock_Config+0xcc>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xcc>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <SystemClock_Config+0xd0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a21      	ldr	r2, [pc, #132]	; (80008e8 <SystemClock_Config+0xd0>)
 8000862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000874:	2301      	movs	r3, #1
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087e:	2302      	movs	r3, #2
 8000880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000888:	2304      	movs	r3, #4
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800088c:	23a8      	movs	r3, #168	; 0xa8
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000894:	2307      	movs	r3, #7
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f95f 	bl	8002b60 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008a8:	f000 fbda 	bl	8001060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2105      	movs	r1, #5
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fbb8 	bl	8003040 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008d6:	f000 fbc3 	bl	8001060 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f2:	463b      	mov	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000900:	4a30      	ldr	r2, [pc, #192]	; (80009c4 <MX_ADC1_Init+0xd8>)
 8000902:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000906:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800090a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800090e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000912:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000914:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000916:	2201      	movs	r2, #1
 8000918:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800091a:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800091c:	2201      	movs	r2, #1
 800091e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000930:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <MX_ADC1_Init+0xdc>)
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800093c:	2203      	movs	r2, #3
 800093e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000942:	2201      	movs	r2, #1
 8000944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800094a:	2201      	movs	r2, #1
 800094c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094e:	481c      	ldr	r0, [pc, #112]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000950:	f000 fe82 	bl	8001658 <HAL_ADC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800095a:	f000 fb81 	bl	8001060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800095e:	2301      	movs	r3, #1
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000966:	2304      	movs	r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_ADC1_Init+0xd4>)
 8000970:	f000 ffc6 	bl	8001900 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800097a:	f000 fb71 	bl	8001060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800097e:	2306      	movs	r3, #6
 8000980:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000986:	463b      	mov	r3, r7
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_ADC1_Init+0xd4>)
 800098c:	f000 ffb8 	bl	8001900 <HAL_ADC_ConfigChannel>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000996:	f000 fb63 	bl	8001060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800099a:	2305      	movs	r3, #5
 800099c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800099e:	2303      	movs	r3, #3
 80009a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_ADC1_Init+0xd4>)
 80009a8:	f000 ffaa 	bl	8001900 <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80009b2:	f000 fb55 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000035c 	.word	0x2000035c
 80009c4:	40012000 	.word	0x40012000
 80009c8:	0f000001 	.word	0x0f000001

080009cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08e      	sub	sp, #56	; 0x38
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009fc:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <MX_TIM4_Init+0xe8>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16799;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a04:	f244 129f 	movw	r2, #16799	; 0x419f
 8000a08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a12:	2263      	movs	r2, #99	; 0x63
 8000a14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a22:	4823      	ldr	r0, [pc, #140]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a24:	f002 fcfe 	bl	8003424 <HAL_TIM_Base_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a2e:	f000 fb17 	bl	8001060 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481c      	ldr	r0, [pc, #112]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a40:	f003 f854 	bl	8003aec <HAL_TIM_ConfigClockSource>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a4a:	f000 fb09 	bl	8001060 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a4e:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a50:	f002 fd37 	bl	80034c2 <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a5a:	f000 fb01 	bl	8001060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a66:	f107 0320 	add.w	r3, r7, #32
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a6e:	f003 fcc3 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a78:	f000 faf2 	bl	8001060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7c:	2360      	movs	r3, #96	; 0x60
 8000a7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000a94:	f002 ff64 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a9e:	f000 fadf 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <MX_TIM4_Init+0xe4>)
 8000aa4:	f000 fbf2 	bl	800128c <HAL_TIM_MspPostInit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	; 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200002dc 	.word	0x200002dc
 8000ab4:	40000800 	.word	0x40000800

08000ab8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_TIM10_Init+0x44>)
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <MX_TIM10_Init+0x48>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4999;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM10_Init+0x44>)
 8000ac4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ac8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_TIM10_Init+0x44>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 33599;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_TIM10_Init+0x44>)
 8000ad2:	f248 323f 	movw	r2, #33599	; 0x833f
 8000ad6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_TIM10_Init+0x44>)
 8000ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ade:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM10_Init+0x44>)
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_TIM10_Init+0x44>)
 8000ae8:	f002 fc9c 	bl	8003424 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8000af2:	f000 fab5 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000031c 	.word	0x2000031c
 8000b00:	40014400 	.word	0x40014400

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <MX_USART2_UART_Init+0x50>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b3a:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f003 fcec 	bl	8004518 <HAL_UART_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b46:	f000 fa8b 	bl	8001060 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	2000040c 	.word	0x2000040c
 8000b54:	40004400 	.word	0x40004400

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_DMA_Init+0x68>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200e      	movs	r0, #14
 8000b9c:	f001 fa3b 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ba0:	200e      	movs	r0, #14
 8000ba2:	f001 fa54 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2038      	movs	r0, #56	; 0x38
 8000bac:	f001 fa33 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bb0:	2038      	movs	r0, #56	; 0x38
 8000bb2:	f001 fa4c 	bl	800204e <HAL_NVIC_EnableIRQ>

}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
 8000bde:	4bb1      	ldr	r3, [pc, #708]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4ab0      	ldr	r2, [pc, #704]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4bae      	ldr	r3, [pc, #696]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
 8000bfa:	4baa      	ldr	r3, [pc, #680]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4aa9      	ldr	r2, [pc, #676]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4ba7      	ldr	r3, [pc, #668]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
 8000c16:	4ba3      	ldr	r3, [pc, #652]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4aa2      	ldr	r2, [pc, #648]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4ba0      	ldr	r3, [pc, #640]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	4b9c      	ldr	r3, [pc, #624]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a9b      	ldr	r2, [pc, #620]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b99      	ldr	r3, [pc, #612]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	4b95      	ldr	r3, [pc, #596]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a94      	ldr	r2, [pc, #592]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b92      	ldr	r3, [pc, #584]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	4b8e      	ldr	r3, [pc, #568]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a8d      	ldr	r2, [pc, #564]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b8b      	ldr	r3, [pc, #556]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b87      	ldr	r3, [pc, #540]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a86      	ldr	r2, [pc, #536]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c8c:	f043 0310 	orr.w	r3, r3, #16
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b80      	ldr	r3, [pc, #512]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a7f      	ldr	r2, [pc, #508]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b7d      	ldr	r3, [pc, #500]	; (8000ea4 <MX_GPIO_Init+0x2e0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2116      	movs	r1, #22
 8000cbe:	487a      	ldr	r0, [pc, #488]	; (8000ea8 <MX_GPIO_Init+0x2e4>)
 8000cc0:	f001 ff1a 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4878      	ldr	r0, [pc, #480]	; (8000eac <MX_GPIO_Init+0x2e8>)
 8000cca:	f001 ff15 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000cd4:	4876      	ldr	r0, [pc, #472]	; (8000eb0 <MX_GPIO_Init+0x2ec>)
 8000cd6:	f001 ff0f 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ce0:	4874      	ldr	r0, [pc, #464]	; (8000eb4 <MX_GPIO_Init+0x2f0>)
 8000ce2:	f001 ff09 	bl	8002af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000ce6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d00:	4619      	mov	r1, r3
 8000d02:	486d      	ldr	r0, [pc, #436]	; (8000eb8 <MX_GPIO_Init+0x2f4>)
 8000d04:	f001 fd4e 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d08:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d22:	4619      	mov	r1, r3
 8000d24:	4864      	ldr	r0, [pc, #400]	; (8000eb8 <MX_GPIO_Init+0x2f4>)
 8000d26:	f001 fd3d 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d3c:	230e      	movs	r3, #14
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	485c      	ldr	r0, [pc, #368]	; (8000eb8 <MX_GPIO_Init+0x2f4>)
 8000d48:	f001 fd2c 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4850      	ldr	r0, [pc, #320]	; (8000ea8 <MX_GPIO_Init+0x2e4>)
 8000d68:	f001 fd1c 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d6c:	2316      	movs	r3, #22
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4849      	ldr	r0, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x2e4>)
 8000d84:	f001 fd0e 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d88:	f248 0305 	movw	r3, #32773	; 0x8005
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d8e:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <MX_GPIO_Init+0x2f8>)
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4843      	ldr	r0, [pc, #268]	; (8000eac <MX_GPIO_Init+0x2e8>)
 8000d9e:	f001 fd01 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSYNC_Pin R4_Pin R5_Pin */
  GPIO_InitStruct.Pin = VSYNC_Pin|R4_Pin|R5_Pin;
 8000da2:	f641 0310 	movw	r3, #6160	; 0x1810
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db4:	230e      	movs	r3, #14
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	483b      	ldr	r0, [pc, #236]	; (8000eac <MX_GPIO_Init+0x2e8>)
 8000dc0:	f001 fcf0 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000dc4:	2380      	movs	r3, #128	; 0x80
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4834      	ldr	r0, [pc, #208]	; (8000eac <MX_GPIO_Init+0x2e8>)
 8000ddc:	f001 fce2 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000de0:	2304      	movs	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4833      	ldr	r0, [pc, #204]	; (8000ec0 <MX_GPIO_Init+0x2fc>)
 8000df4:	f001 fcd6 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000df8:	f248 1333 	movw	r3, #33075	; 0x8133
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0x2f0>)
 8000e16:	f001 fcc5 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e1a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4823      	ldr	r0, [pc, #140]	; (8000ec4 <MX_GPIO_Init+0x300>)
 8000e38:	f001 fcb4 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e3c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e4e:	230e      	movs	r3, #14
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4819      	ldr	r0, [pc, #100]	; (8000ec0 <MX_GPIO_Init+0x2fc>)
 8000e5a:	f001 fca3 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e5e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e70:	230c      	movs	r3, #12
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_GPIO_Init+0x2fc>)
 8000e7c:	f001 fc92 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <MX_GPIO_Init+0x2fc>)
 8000e96:	f001 fc85 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D1_Pin
                           D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D1_Pin
 8000e9a:	f248 7303 	movw	r3, #34563	; 0x8703
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e011      	b.n	8000ec8 <MX_GPIO_Init+0x304>
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020000 	.word	0x40020000
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021400 	.word	0x40021400
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eda:	4619      	mov	r1, r3
 8000edc:	485b      	ldr	r0, [pc, #364]	; (800104c <MX_GPIO_Init+0x488>)
 8000ede:	f001 fc61 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4855      	ldr	r0, [pc, #340]	; (800104c <MX_GPIO_Init+0x488>)
 8000ef8:	f001 fc54 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin PD14 */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin|GPIO_PIN_14;
 8000efc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	484d      	ldr	r0, [pc, #308]	; (800104c <MX_GPIO_Init+0x488>)
 8000f16:	f001 fc45 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f1a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2c:	230e      	movs	r3, #14
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4846      	ldr	r0, [pc, #280]	; (8001050 <MX_GPIO_Init+0x48c>)
 8000f38:	f001 fc34 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f3c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f4e:	230e      	movs	r3, #14
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	483e      	ldr	r0, [pc, #248]	; (8001054 <MX_GPIO_Init+0x490>)
 8000f5a:	f001 fc23 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f70:	2304      	movs	r3, #4
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4836      	ldr	r0, [pc, #216]	; (8001054 <MX_GPIO_Init+0x490>)
 8000f7c:	f001 fc12 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f86:	2312      	movs	r3, #18
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f92:	2304      	movs	r3, #4
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	482e      	ldr	r0, [pc, #184]	; (8001058 <MX_GPIO_Init+0x494>)
 8000f9e:	f001 fc01 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4826      	ldr	r0, [pc, #152]	; (8001058 <MX_GPIO_Init+0x494>)
 8000fc0:	f001 fbf0 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd4:	230e      	movs	r3, #14
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481b      	ldr	r0, [pc, #108]	; (800104c <MX_GPIO_Init+0x488>)
 8000fe0:	f001 fbe0 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ff6:	2309      	movs	r3, #9
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <MX_GPIO_Init+0x48c>)
 8001002:	f001 fbcf 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001006:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_GPIO_Init+0x48c>)
 8001020:	f001 fbc0 	bl	80027a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001034:	230c      	movs	r3, #12
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	4807      	ldr	r0, [pc, #28]	; (800105c <MX_GPIO_Init+0x498>)
 8001040:	f001 fbb0 	bl	80027a4 <HAL_GPIO_Init>

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	; 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40021800 	.word	0x40021800
 8001054:	40020800 	.word	0x40020800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400

08001060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001066:	e7fe      	b.n	8001066 <Error_Handler+0x6>

08001068 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010a6:	2007      	movs	r0, #7
 80010a8:	f000 ffaa 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800

080010b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_ADC_MspInit+0xdc>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d157      	bne.n	800118a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a2d      	ldr	r2, [pc, #180]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b27      	ldr	r3, [pc, #156]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a26      	ldr	r2, [pc, #152]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b24      	ldr	r3, [pc, #144]	; (8001198 <HAL_ADC_MspInit+0xe0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6;
 8001112:	2362      	movs	r3, #98	; 0x62
 8001114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	481d      	ldr	r0, [pc, #116]	; (800119c <HAL_ADC_MspInit+0xe4>)
 8001126:	f001 fb3d 	bl	80027a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_ADC_MspInit+0xec>)
 800112e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001148:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800114c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001150:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001158:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800115c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001160:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800116e:	480c      	ldr	r0, [pc, #48]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001170:	f000 ff88 	bl	8002084 <HAL_DMA_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800117a:	f7ff ff71 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
 8001184:	4a06      	ldr	r2, [pc, #24]	; (80011a0 <HAL_ADC_MspInit+0xe8>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40012000 	.word	0x40012000
 8001198:	40023800 	.word	0x40023800
 800119c:	40020000 	.word	0x40020000
 80011a0:	200003a4 	.word	0x200003a4
 80011a4:	40026410 	.word	0x40026410

080011a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a30      	ldr	r2, [pc, #192]	; (8001278 <HAL_TIM_Base_MspInit+0xd0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d13f      	bne.n	800123a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a2e      	ldr	r2, [pc, #184]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011d8:	4a2a      	ldr	r2, [pc, #168]	; (8001284 <HAL_TIM_Base_MspInit+0xdc>)
 80011da:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011e2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b26      	ldr	r3, [pc, #152]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011f6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 80011fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011fe:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 8001202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001206:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 800120a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800120e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 8001218:	2200      	movs	r2, #0
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 800121c:	4818      	ldr	r0, [pc, #96]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 800121e:	f000 ff31 	bl	8002084 <HAL_DMA_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001228:	f7ff ff1a 	bl	8001060 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <HAL_TIM_Base_MspInit+0xd8>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001238:	e01a      	b.n	8001270 <HAL_TIM_Base_MspInit+0xc8>
  else if(htim_base->Instance==TIM10)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a12      	ldr	r2, [pc, #72]	; (8001288 <HAL_TIM_Base_MspInit+0xe0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d115      	bne.n	8001270 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 800124e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001252:	6453      	str	r3, [r2, #68]	; 0x44
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_TIM_Base_MspInit+0xd4>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2019      	movs	r0, #25
 8001266:	f000 fed6 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800126a:	2019      	movs	r0, #25
 800126c:	f000 feef 	bl	800204e <HAL_NVIC_EnableIRQ>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40000800 	.word	0x40000800
 800127c:	40023800 	.word	0x40023800
 8001280:	20000218 	.word	0x20000218
 8001284:	40026058 	.word	0x40026058
 8001288:	40014400 	.word	0x40014400

0800128c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_TIM_MspPostInit+0x68>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d11d      	bne.n	80012ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a10      	ldr	r2, [pc, #64]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_TIM_MspPostInit+0x6c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012da:	2302      	movs	r3, #2
 80012dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <HAL_TIM_MspPostInit+0x70>)
 80012e6:	f001 fa5d 	bl	80027a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40000800 	.word	0x40000800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_UART_MspInit+0x94>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d133      	bne.n	800138a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <HAL_UART_MspInit+0x98>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_UART_MspInit+0x98>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136a:	2307      	movs	r3, #7
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4809      	ldr	r0, [pc, #36]	; (800139c <HAL_UART_MspInit+0x9c>)
 8001376:	f001 fa15 	bl	80027a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2026      	movs	r0, #38	; 0x26
 8001380:	f000 fe49 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001384:	2026      	movs	r0, #38	; 0x26
 8001386:	f000 fe62 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40004400 	.word	0x40004400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020c00 	.word	0x40020c00

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f8f2 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <DMA1_Stream3_IRQHandler+0x10>)
 80013fa:	f000 ff6b 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000218 	.word	0x20000218

08001408 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800140e:	f002 f99f 	bl	8003750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000031c 	.word	0x2000031c

0800141c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <USART2_IRQHandler+0x10>)
 8001422:	f003 f961 	bl	80046e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000040c 	.word	0x2000040c

08001430 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <DMA2_Stream0_IRQHandler+0x10>)
 8001436:	f000 ff4d 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200003a4 	.word	0x200003a4

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f003 feee 	bl	8005254 <__errno>
 8001478:	4602      	mov	r2, r0
 800147a:	230c      	movs	r3, #12
 800147c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20030000 	.word	0x20030000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	2000020c 	.word	0x2000020c
 80014ac:	20000458 	.word	0x20000458

080014b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <SystemInit+0x28>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <SystemInit+0x28>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SystemInit+0x28>)
 80014c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ca:	609a      	str	r2, [r3, #8]
#endif
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014e2:	e003      	b.n	80014ec <LoopCopyDataInit>

080014e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ea:	3104      	adds	r1, #4

080014ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014f4:	d3f6      	bcc.n	80014e4 <CopyDataInit>
  ldr  r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014f8:	e002      	b.n	8001500 <LoopFillZerobss>

080014fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014fc:	f842 3b04 	str.w	r3, [r2], #4

08001500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001504:	d3f9      	bcc.n	80014fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd3 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f003 fea9 	bl	8005260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f867 	bl	80005e0 <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001514:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001518:	08005dc8 	.word	0x08005dc8
  ldr  r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001520:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001524:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001528:	20000454 	.word	0x20000454

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	; (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fd51 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fd80 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd69 	bl	800206a <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fd31 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008
 80015f8:	2000044c 	.word	0x2000044c

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2000044c 	.word	0x2000044c

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_Delay+0x40>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000008 	.word	0x20000008

08001658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e033      	b.n	80016d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fd1e 	bl	80010b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169e:	f023 0302 	bic.w	r3, r3, #2
 80016a2:	f043 0202 	orr.w	r2, r3, #2
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fa5a 	bl	8001b64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	f043 0201 	orr.w	r2, r3, #1
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
 80016c6:	e001      	b.n	80016cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_ADC_Start_DMA+0x1e>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e0cc      	b.n	8001898 <HAL_ADC_Start_DMA+0x1b8>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b01      	cmp	r3, #1
 8001712:	d018      	beq.n	8001746 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001724:	4b5e      	ldr	r3, [pc, #376]	; (80018a0 <HAL_ADC_Start_DMA+0x1c0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_ADC_Start_DMA+0x1c4>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0c9a      	lsrs	r2, r3, #18
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001738:	e002      	b.n	8001740 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	3b01      	subs	r3, #1
 800173e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1f9      	bne.n	800173a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 80a0 	bne.w	8001896 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001780:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001794:	d106      	bne.n	80017a4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f023 0206 	bic.w	r2, r3, #6
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
 80017a2:	e002      	b.n	80017aa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <HAL_ADC_Start_DMA+0x1c8>)
 80017b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	4a3c      	ldr	r2, [pc, #240]	; (80018ac <HAL_ADC_Start_DMA+0x1cc>)
 80017bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c2:	4a3b      	ldr	r2, [pc, #236]	; (80018b0 <HAL_ADC_Start_DMA+0x1d0>)
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ca:	4a3a      	ldr	r2, [pc, #232]	; (80018b4 <HAL_ADC_Start_DMA+0x1d4>)
 80017cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	334c      	adds	r3, #76	; 0x4c
 8001802:	4619      	mov	r1, r3
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f000 fcea 	bl	80021e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	2b00      	cmp	r3, #0
 8001816:	d12a      	bne.n	800186e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_ADC_Start_DMA+0x1d8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d015      	beq.n	800184e <HAL_ADC_Start_DMA+0x16e>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_ADC_Start_DMA+0x1dc>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d105      	bne.n	8001838 <HAL_ADC_Start_DMA+0x158>
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_ADC_Start_DMA+0x1c8>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 031f 	and.w	r3, r3, #31
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00a      	beq.n	800184e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <HAL_ADC_Start_DMA+0x1e0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d129      	bne.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_ADC_Start_DMA+0x1c8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b0f      	cmp	r3, #15
 800184c:	d823      	bhi.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d11c      	bne.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	e013      	b.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_ADC_Start_DMA+0x1d8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10e      	bne.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d107      	bne.n	8001896 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001894:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	431bde83 	.word	0x431bde83
 80018a8:	40012300 	.word	0x40012300
 80018ac:	08001d5d 	.word	0x08001d5d
 80018b0:	08001e17 	.word	0x08001e17
 80018b4:	08001e33 	.word	0x08001e33
 80018b8:	40012000 	.word	0x40012000
 80018bc:	40012100 	.word	0x40012100
 80018c0:	40012200 	.word	0x40012200

080018c4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_ConfigChannel+0x1c>
 8001918:	2302      	movs	r3, #2
 800191a:	e113      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x244>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b09      	cmp	r3, #9
 800192a:	d925      	bls.n	8001978 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68d9      	ldr	r1, [r3, #12]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b29b      	uxth	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	3b1e      	subs	r3, #30
 8001942:	2207      	movs	r2, #7
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43da      	mvns	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	400a      	ands	r2, r1
 8001950:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68d9      	ldr	r1, [r3, #12]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29b      	uxth	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	4603      	mov	r3, r0
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4403      	add	r3, r0
 800196a:	3b1e      	subs	r3, #30
 800196c:	409a      	lsls	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	e022      	b.n	80019be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6919      	ldr	r1, [r3, #16]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	2207      	movs	r2, #7
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	400a      	ands	r2, r1
 800199a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4403      	add	r3, r0
 80019b4:	409a      	lsls	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d824      	bhi.n	8001a10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	3b05      	subs	r3, #5
 80019d8:	221f      	movs	r2, #31
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	400a      	ands	r2, r1
 80019e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4618      	mov	r0, r3
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	3b05      	subs	r3, #5
 8001a02:	fa00 f203 	lsl.w	r2, r0, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0e:	e04c      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b0c      	cmp	r3, #12
 8001a16:	d824      	bhi.n	8001a62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b23      	subs	r3, #35	; 0x23
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43da      	mvns	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	400a      	ands	r2, r1
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b23      	subs	r3, #35	; 0x23
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a60:	e023      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	3b41      	subs	r3, #65	; 0x41
 8001a74:	221f      	movs	r2, #31
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b41      	subs	r3, #65	; 0x41
 8001a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <HAL_ADC_ConfigChannel+0x250>)
 8001aac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a28      	ldr	r2, [pc, #160]	; (8001b54 <HAL_ADC_ConfigChannel+0x254>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d10f      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d8>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b12      	cmp	r3, #18
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_ADC_ConfigChannel+0x254>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12b      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x23a>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <HAL_ADC_ConfigChannel+0x258>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d003      	beq.n	8001af4 <HAL_ADC_ConfigChannel+0x1f4>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b11      	cmp	r3, #17
 8001af2:	d122      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_ADC_ConfigChannel+0x258>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d111      	bne.n	8001b3a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <HAL_ADC_ConfigChannel+0x25c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a11      	ldr	r2, [pc, #68]	; (8001b60 <HAL_ADC_ConfigChannel+0x260>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9a      	lsrs	r2, r3, #18
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b2c:	e002      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f9      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40012300 	.word	0x40012300
 8001b54:	40012000 	.word	0x40012000
 8001b58:	10000012 	.word	0x10000012
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	431bde83 	.word	0x431bde83

08001b64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b6c:	4b79      	ldr	r3, [pc, #484]	; (8001d54 <ADC_Init+0x1f0>)
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6859      	ldr	r1, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6899      	ldr	r1, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	4a58      	ldr	r2, [pc, #352]	; (8001d58 <ADC_Init+0x1f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6899      	ldr	r1, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	e00f      	b.n	8001c62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0202 	bic.w	r2, r2, #2
 8001c70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7e1b      	ldrb	r3, [r3, #24]
 8001c7c:	005a      	lsls	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	035a      	lsls	r2, r3, #13
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	e007      	b.n	8001cd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	051a      	lsls	r2, r3, #20
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d1a:	025a      	lsls	r2, r3, #9
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6899      	ldr	r1, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	029a      	lsls	r2, r3, #10
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	40012300 	.word	0x40012300
 8001d58:	0f000001 	.word	0x0f000001

08001d5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d13c      	bne.n	8001df0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12b      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d127      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d119      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0220 	bic.w	r2, r2, #32
 8001dc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fd6b 	bl	80018c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001dee:	e00e      	b.n	8001e0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff fd75 	bl	80018ec <HAL_ADC_ErrorCallback>
}
 8001e02:	e004      	b.n	8001e0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4798      	blx	r3
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fd57 	bl	80018d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f7ff fd4a 	bl	80018ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	; (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	; (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	; (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff fab4 	bl	80015fc <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e099      	b.n	80021d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c0:	e00f      	b.n	80020e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c2:	f7ff fa9b 	bl	80015fc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b05      	cmp	r3, #5
 80020ce:	d908      	bls.n	80020e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2203      	movs	r2, #3
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e078      	b.n	80021d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e8      	bne.n	80020c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4b38      	ldr	r3, [pc, #224]	; (80021dc <HAL_DMA_Init+0x158>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002126:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2b04      	cmp	r3, #4
 800213a:	d107      	bne.n	800214c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	4313      	orrs	r3, r2
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4313      	orrs	r3, r2
 800214a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f023 0307 	bic.w	r3, r3, #7
 8002162:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b04      	cmp	r3, #4
 8002174:	d117      	bne.n	80021a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fa91 	bl	80026b0 <DMA_CheckFifoParam>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d008      	beq.n	80021a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021a2:	2301      	movs	r3, #1
 80021a4:	e016      	b.n	80021d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa48 	bl	8002644 <DMA_CalcBaseAndBitshift>
 80021b4:	4603      	mov	r3, r0
 80021b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	223f      	movs	r2, #63	; 0x3f
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	f010803f 	.word	0xf010803f

080021e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_DMA_Start_IT+0x26>
 8002202:	2302      	movs	r3, #2
 8002204:	e040      	b.n	8002288 <HAL_DMA_Start_IT+0xa8>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d12f      	bne.n	800227a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f9da 	bl	80025e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002238:	223f      	movs	r2, #63	; 0x3f
 800223a:	409a      	lsls	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0216 	orr.w	r2, r2, #22
 800224e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	d007      	beq.n	8002268 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	e005      	b.n	8002286 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002282:	2302      	movs	r3, #2
 8002284:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002286:	7dfb      	ldrb	r3, [r7, #23]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d004      	beq.n	80022ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e00c      	b.n	80022c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2205      	movs	r2, #5
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_DMA_IRQHandler+0x258>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_DMA_IRQHandler+0x25c>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2208      	movs	r2, #8
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2210      	movs	r2, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d043      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03c      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2210      	movs	r2, #16
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d108      	bne.n	8002404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d024      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
 8002402:	e01f      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e016      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2220      	movs	r2, #32
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808e 	beq.w	8002572 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8086 	beq.w	8002572 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2220      	movs	r2, #32
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d136      	bne.n	80024ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0216 	bic.w	r2, r2, #22
 800248c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_DMA_IRQHandler+0x1da>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	223f      	movs	r2, #63	; 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07d      	beq.n	80025de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
        }
        return;
 80024ea:	e078      	b.n	80025de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01c      	beq.n	8002534 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	2b00      	cmp	r3, #0
 800250e:	d030      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e02b      	b.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d027      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e022      	b.n	8002572 <HAL_DMA_IRQHandler+0x29e>
 800252c:	20000000 	.word	0x20000000
 8002530:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0210 	bic.w	r2, r2, #16
 8002550:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d032      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d022      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2205      	movs	r2, #5
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d307      	bcc.n	80025ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f2      	bne.n	800259e <HAL_DMA_IRQHandler+0x2ca>
 80025b8:	e000      	b.n	80025bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e000      	b.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025de:	bf00      	nop
    }
  }
}
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop

080025e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d108      	bne.n	8002628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002626:	e007      	b.n	8002638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d909      	bls.n	8002686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	; 0x58
 8002684:	e007      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	08005c70 	.word	0x08005c70

080026b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d855      	bhi.n	800277c <DMA_CheckFifoParam+0xcc>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <DMA_CheckFifoParam+0x28>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	080026e9 	.word	0x080026e9
 80026e4:	0800277d 	.word	0x0800277d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d045      	beq.n	8002780 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e042      	b.n	8002780 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002702:	d13f      	bne.n	8002784 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e03c      	b.n	8002784 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d121      	bne.n	8002758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d836      	bhi.n	8002788 <DMA_CheckFifoParam+0xd8>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x70>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	08002731 	.word	0x08002731
 800272c:	08002749 	.word	0x08002749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e02f      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d024      	beq.n	800278c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e021      	b.n	800278c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002750:	d11e      	bne.n	8002790 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002756:	e01b      	b.n	8002790 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <DMA_CheckFifoParam+0xb4>
 800275e:	2b03      	cmp	r3, #3
 8002760:	d003      	beq.n	800276a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002762:	e018      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      break;
 8002768:	e015      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
      break;
 800277a:	e00b      	b.n	8002794 <DMA_CheckFifoParam+0xe4>
      break;
 800277c:	bf00      	nop
 800277e:	e00a      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002780:	bf00      	nop
 8002782:	e008      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002784:	bf00      	nop
 8002786:	e006      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002788:	bf00      	nop
 800278a:	e004      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 800278c:	bf00      	nop
 800278e:	e002      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;   
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002794:	bf00      	nop
    }
  } 
  
  return status; 
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e177      	b.n	8002ab0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f040 8166 	bne.w	8002aaa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00b      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f2:	2b11      	cmp	r3, #17
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0xfc>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d123      	bne.n	80028e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80c0 	beq.w	8002aaa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_GPIO_Init+0x320>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a64      	ldr	r2, [pc, #400]	; (8002ac4 <HAL_GPIO_Init+0x320>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b62      	ldr	r3, [pc, #392]	; (8002ac4 <HAL_GPIO_Init+0x320>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002946:	4a60      	ldr	r2, [pc, #384]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a57      	ldr	r2, [pc, #348]	; (8002acc <HAL_GPIO_Init+0x328>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d037      	beq.n	80029e2 <HAL_GPIO_Init+0x23e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a56      	ldr	r2, [pc, #344]	; (8002ad0 <HAL_GPIO_Init+0x32c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d031      	beq.n	80029de <HAL_GPIO_Init+0x23a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a55      	ldr	r2, [pc, #340]	; (8002ad4 <HAL_GPIO_Init+0x330>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d02b      	beq.n	80029da <HAL_GPIO_Init+0x236>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a54      	ldr	r2, [pc, #336]	; (8002ad8 <HAL_GPIO_Init+0x334>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d025      	beq.n	80029d6 <HAL_GPIO_Init+0x232>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a53      	ldr	r2, [pc, #332]	; (8002adc <HAL_GPIO_Init+0x338>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01f      	beq.n	80029d2 <HAL_GPIO_Init+0x22e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x33c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d019      	beq.n	80029ce <HAL_GPIO_Init+0x22a>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x340>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d013      	beq.n	80029ca <HAL_GPIO_Init+0x226>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_GPIO_Init+0x344>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00d      	beq.n	80029c6 <HAL_GPIO_Init+0x222>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_GPIO_Init+0x348>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <HAL_GPIO_Init+0x21e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_GPIO_Init+0x34c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_GPIO_Init+0x21a>
 80029ba:	2309      	movs	r3, #9
 80029bc:	e012      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029be:	230a      	movs	r3, #10
 80029c0:	e010      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029c2:	2308      	movs	r3, #8
 80029c4:	e00e      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029c6:	2307      	movs	r3, #7
 80029c8:	e00c      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029ca:	2306      	movs	r3, #6
 80029cc:	e00a      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029ce:	2305      	movs	r3, #5
 80029d0:	e008      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029d2:	2304      	movs	r3, #4
 80029d4:	e006      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029d6:	2303      	movs	r3, #3
 80029d8:	e004      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029da:	2302      	movs	r3, #2
 80029dc:	e002      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_GPIO_Init+0x240>
 80029e2:	2300      	movs	r3, #0
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f002 0203 	and.w	r2, r2, #3
 80029ea:	0092      	lsls	r2, r2, #2
 80029ec:	4093      	lsls	r3, r2
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f4:	4934      	ldr	r1, [pc, #208]	; (8002ac8 <HAL_GPIO_Init+0x324>)
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	3302      	adds	r3, #2
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a26:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a50:	4a28      	ldr	r2, [pc, #160]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_GPIO_Init+0x350>)
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b0f      	cmp	r3, #15
 8002ab4:	f67f ae84 	bls.w	80027c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3724      	adds	r7, #36	; 0x24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40013800 	.word	0x40013800
 8002acc:	40020000 	.word	0x40020000
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020800 	.word	0x40020800
 8002ad8:	40020c00 	.word	0x40020c00
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40021400 	.word	0x40021400
 8002ae4:	40021800 	.word	0x40021800
 8002ae8:	40021c00 	.word	0x40021c00
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022400 	.word	0x40022400
 8002af4:	40013c00 	.word	0x40013c00

08002af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
 8002b04:	4613      	mov	r3, r2
 8002b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	787b      	ldrb	r3, [r7, #1]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b14:	e003      	b.n	8002b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	041a      	lsls	r2, r3, #16
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	401a      	ands	r2, r3
 8002b3e:	887b      	ldrh	r3, [r7, #2]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d104      	bne.n	8002b4e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b4e:	887a      	ldrh	r2, [r7, #2]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e25b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d075      	beq.n	8002c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b7e:	4ba3      	ldr	r3, [pc, #652]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d112      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4b9d      	ldr	r3, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	4b99      	ldr	r3, [pc, #612]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x108>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d157      	bne.n	8002c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e236      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x74>
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x98>
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a8a      	ldr	r2, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a83      	ldr	r2, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fcf0 	bl	80015fc <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe fcec 	bl	80015fc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1fb      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xc0>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fcdc 	bl	80015fc <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe fcd8 	bl	80015fc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1e7      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0xe8>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1bb      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4952      	ldr	r1, [pc, #328]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fc91 	bl	80015fc <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cde:	f7fe fc8d 	bl	80015fc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e19c      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4940      	ldr	r1, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0x2b0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fc70 	bl	80015fc <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d20:	f7fe fc6c 	bl	80015fc <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e17b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <HAL_RCC_OscConfig+0x2b4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7fe fc50 	bl	80015fc <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7fe fc4c 	bl	80015fc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e15b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x200>
 8002d7e:	e015      	b.n	8002dac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x2b4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fc39 	bl	80015fc <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fc35 	bl	80015fc <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e144      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a0 	beq.w	8002efa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d121      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fe fbfb 	bl	80015fc <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e011      	b.n	8002e2e <HAL_RCC_OscConfig+0x2ce>
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	42470000 	.word	0x42470000
 8002e14:	42470e80 	.word	0x42470e80
 8002e18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1c:	f7fe fbee 	bl	80015fc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0fd      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2f0>
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x312>
 8002e58:	4b77      	ldr	r3, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a76      	ldr	r2, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a73      	ldr	r2, [pc, #460]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x32a>
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a70      	ldr	r2, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe fbb3 	bl	80015fc <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fbaf 	bl	80015fc <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0bc      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x33a>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fb9d 	bl	80015fc <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe fb99 	bl	80015fc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0a6      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a51      	ldr	r2, [pc, #324]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8092 	beq.w	8003028 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d05c      	beq.n	8002fca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d141      	bne.n	8002f9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fb6d 	bl	80015fc <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe fb69 	bl	80015fc <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e078      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	019b      	lsls	r3, r3, #6
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	4933      	ldr	r1, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fb42 	bl	80015fc <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fb3e 	bl	80015fc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04d      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x41c>
 8002f9a:	e045      	b.n	8003028 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fb2b 	bl	80015fc <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe fb27 	bl	80015fc <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e036      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x44a>
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e029      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000
 8003038:	40023800 	.word	0x40023800
 800303c:	42470060 	.word	0x42470060

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0cc      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d90c      	bls.n	800307c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d044      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d119      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e067      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4934      	ldr	r1, [pc, #208]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7fe fa64 	bl	80015fc <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fe fa60 	bl	80015fc <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e04f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d20c      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4601      	mov	r1, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	fa21 f303 	lsr.w	r3, r1, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f9c4 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	08005c58 	.word	0x08005c58
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003222:	4b63      	ldr	r3, [pc, #396]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d007      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x32>
 800322e:	2b08      	cmp	r3, #8
 8003230:	d008      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x38>
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 80b4 	bne.w	80033a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800323a:	60bb      	str	r3, [r7, #8]
       break;
 800323c:	e0b3      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800323e:	4b5e      	ldr	r3, [pc, #376]	; (80033b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003240:	60bb      	str	r3, [r7, #8]
      break;
 8003242:	e0b0      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003244:	4b5a      	ldr	r3, [pc, #360]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d04a      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b55      	ldr	r3, [pc, #340]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	f04f 0400 	mov.w	r4, #0
 8003264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	ea03 0501 	and.w	r5, r3, r1
 8003270:	ea04 0602 	and.w	r6, r4, r2
 8003274:	4629      	mov	r1, r5
 8003276:	4632      	mov	r2, r6
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	0154      	lsls	r4, r2, #5
 8003282:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003286:	014b      	lsls	r3, r1, #5
 8003288:	4619      	mov	r1, r3
 800328a:	4622      	mov	r2, r4
 800328c:	1b49      	subs	r1, r1, r5
 800328e:	eb62 0206 	sbc.w	r2, r2, r6
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	f04f 0400 	mov.w	r4, #0
 800329a:	0194      	lsls	r4, r2, #6
 800329c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032a0:	018b      	lsls	r3, r1, #6
 80032a2:	1a5b      	subs	r3, r3, r1
 80032a4:	eb64 0402 	sbc.w	r4, r4, r2
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	00e2      	lsls	r2, r4, #3
 80032b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032b6:	00d9      	lsls	r1, r3, #3
 80032b8:	460b      	mov	r3, r1
 80032ba:	4614      	mov	r4, r2
 80032bc:	195b      	adds	r3, r3, r5
 80032be:	eb44 0406 	adc.w	r4, r4, r6
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	0262      	lsls	r2, r4, #9
 80032cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032d0:	0259      	lsls	r1, r3, #9
 80032d2:	460b      	mov	r3, r1
 80032d4:	4614      	mov	r4, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	4621      	mov	r1, r4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f04f 0400 	mov.w	r4, #0
 80032e0:	461a      	mov	r2, r3
 80032e2:	4623      	mov	r3, r4
 80032e4:	f7fc ffd4 	bl	8000290 <__aeabi_uldivmod>
 80032e8:	4603      	mov	r3, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e049      	b.n	8003384 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b2f      	ldr	r3, [pc, #188]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	f04f 0400 	mov.w	r4, #0
 80032fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	ea03 0501 	and.w	r5, r3, r1
 8003306:	ea04 0602 	and.w	r6, r4, r2
 800330a:	4629      	mov	r1, r5
 800330c:	4632      	mov	r2, r6
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	f04f 0400 	mov.w	r4, #0
 8003316:	0154      	lsls	r4, r2, #5
 8003318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800331c:	014b      	lsls	r3, r1, #5
 800331e:	4619      	mov	r1, r3
 8003320:	4622      	mov	r2, r4
 8003322:	1b49      	subs	r1, r1, r5
 8003324:	eb62 0206 	sbc.w	r2, r2, r6
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	f04f 0400 	mov.w	r4, #0
 8003330:	0194      	lsls	r4, r2, #6
 8003332:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003336:	018b      	lsls	r3, r1, #6
 8003338:	1a5b      	subs	r3, r3, r1
 800333a:	eb64 0402 	sbc.w	r4, r4, r2
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	00e2      	lsls	r2, r4, #3
 8003348:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800334c:	00d9      	lsls	r1, r3, #3
 800334e:	460b      	mov	r3, r1
 8003350:	4614      	mov	r4, r2
 8003352:	195b      	adds	r3, r3, r5
 8003354:	eb44 0406 	adc.w	r4, r4, r6
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	02a2      	lsls	r2, r4, #10
 8003362:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003366:	0299      	lsls	r1, r3, #10
 8003368:	460b      	mov	r3, r1
 800336a:	4614      	mov	r4, r2
 800336c:	4618      	mov	r0, r3
 800336e:	4621      	mov	r1, r4
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f04f 0400 	mov.w	r4, #0
 8003376:	461a      	mov	r2, r3
 8003378:	4623      	mov	r3, r4
 800337a:	f7fc ff89 	bl	8000290 <__aeabi_uldivmod>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	3301      	adds	r3, #1
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	60bb      	str	r3, [r7, #8]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033a2:	60bb      	str	r3, [r7, #8]
      break;
 80033a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033a6:	68bb      	ldr	r3, [r7, #8]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033b0:	40023800 	.word	0x40023800
 80033b4:	00f42400 	.word	0x00f42400
 80033b8:	007a1200 	.word	0x007a1200

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c0:	4b03      	ldr	r3, [pc, #12]	; (80033d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000

080033d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033d8:	f7ff fff0 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80033dc:	4601      	mov	r1, r0
 80033de:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	0a9b      	lsrs	r3, r3, #10
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	4a03      	ldr	r2, [pc, #12]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40023800 	.word	0x40023800
 80033f8:	08005c68 	.word	0x08005c68

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003400:	f7ff ffdc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0b5b      	lsrs	r3, r3, #13
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4a03      	ldr	r2, [pc, #12]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003418:	4618      	mov	r0, r3
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40023800 	.word	0x40023800
 8003420:	08005c68 	.word	0x08005c68

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e01d      	b.n	8003472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7fd feac 	bl	80011a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3304      	adds	r3, #4
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f000 fcb8 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b085      	sub	sp, #20
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b06      	cmp	r3, #6
 80034a2:	d007      	beq.n	80034b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e01d      	b.n	8003510 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f815 	bl	8003518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2202      	movs	r2, #2
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f000 fc69 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d101      	bne.n	800354a <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	e0f3      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10b      	bne.n	800356e <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <HAL_TIM_PWM_Start_DMA+0x3a>
 800355c:	887b      	ldrh	r3, [r7, #2]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e0e5      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b0c      	cmp	r3, #12
 8003572:	f200 80ad 	bhi.w	80036d0 <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003576:	a201      	add	r2, pc, #4	; (adr r2, 800357c <HAL_TIM_PWM_Start_DMA+0x50>)
 8003578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357c:	080035b1 	.word	0x080035b1
 8003580:	080036d1 	.word	0x080036d1
 8003584:	080036d1 	.word	0x080036d1
 8003588:	080036d1 	.word	0x080036d1
 800358c:	080035f9 	.word	0x080035f9
 8003590:	080036d1 	.word	0x080036d1
 8003594:	080036d1 	.word	0x080036d1
 8003598:	080036d1 	.word	0x080036d1
 800359c:	08003641 	.word	0x08003641
 80035a0:	080036d1 	.word	0x080036d1
 80035a4:	080036d1 	.word	0x080036d1
 80035a8:	080036d1 	.word	0x080036d1
 80035ac:	08003689 	.word	0x08003689
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	4a61      	ldr	r2, [pc, #388]	; (800373c <HAL_TIM_PWM_Start_DMA+0x210>)
 80035b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	4a60      	ldr	r2, [pc, #384]	; (8003740 <HAL_TIM_PWM_Start_DMA+0x214>)
 80035be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	4a5f      	ldr	r2, [pc, #380]	; (8003744 <HAL_TIM_PWM_Start_DMA+0x218>)
 80035c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	3334      	adds	r3, #52	; 0x34
 80035d4:	461a      	mov	r2, r3
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	f7fe fe02 	bl	80021e0 <HAL_DMA_Start_IT>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0a5      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f4:	60da      	str	r2, [r3, #12]
      break;
 80035f6:	e06c      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	4a4f      	ldr	r2, [pc, #316]	; (800373c <HAL_TIM_PWM_Start_DMA+0x210>)
 80035fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	4a4e      	ldr	r2, [pc, #312]	; (8003740 <HAL_TIM_PWM_Start_DMA+0x214>)
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	4a4d      	ldr	r2, [pc, #308]	; (8003744 <HAL_TIM_PWM_Start_DMA+0x218>)
 800360e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3338      	adds	r3, #56	; 0x38
 800361c:	461a      	mov	r2, r3
 800361e:	887b      	ldrh	r3, [r7, #2]
 8003620:	f7fe fdde 	bl	80021e0 <HAL_DMA_Start_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800363c:	60da      	str	r2, [r3, #12]
      break;
 800363e:	e048      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	4a3d      	ldr	r2, [pc, #244]	; (800373c <HAL_TIM_PWM_Start_DMA+0x210>)
 8003646:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4a3c      	ldr	r2, [pc, #240]	; (8003740 <HAL_TIM_PWM_Start_DMA+0x214>)
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003656:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	333c      	adds	r3, #60	; 0x3c
 8003664:	461a      	mov	r2, r3
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	f7fe fdba 	bl	80021e0 <HAL_DMA_Start_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e05d      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003684:	60da      	str	r2, [r3, #12]
      break;
 8003686:	e024      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <HAL_TIM_PWM_Start_DMA+0x210>)
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <HAL_TIM_PWM_Start_DMA+0x214>)
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	4a29      	ldr	r2, [pc, #164]	; (8003744 <HAL_TIM_PWM_Start_DMA+0x218>)
 800369e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3340      	adds	r3, #64	; 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	887b      	ldrh	r3, [r7, #2]
 80036b0:	f7fe fd96 	bl	80021e0 <HAL_DMA_Start_IT>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e039      	b.n	8003732 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68da      	ldr	r2, [r3, #12]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036cc:	60da      	str	r2, [r3, #12]
      break;
 80036ce:	e000      	b.n	80036d2 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80036d0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fe66 	bl	80043ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <HAL_TIM_PWM_Start_DMA+0x21c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d004      	beq.n	80036f4 <HAL_TIM_PWM_Start_DMA+0x1c8>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_TIM_PWM_Start_DMA+0x220>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_TIM_PWM_Start_DMA+0x1cc>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_TIM_PWM_Start_DMA+0x1ce>
 80036f8:	2300      	movs	r3, #0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b06      	cmp	r3, #6
 800371e:	d007      	beq.n	8003730 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	08003cf7 	.word	0x08003cf7
 8003740:	08003d67 	.word	0x08003d67
 8003744:	08003cd3 	.word	0x08003cd3
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b02      	cmp	r3, #2
 8003764:	d122      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11b      	bne.n	80037ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0202 	mvn.w	r2, #2
 800377c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa6b 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 8003798:	e005      	b.n	80037a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa5d 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fa6e 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d122      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d11b      	bne.n	8003800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0204 	mvn.w	r2, #4
 80037d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fa41 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 80037ec:	e005      	b.n	80037fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa33 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fa44 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b08      	cmp	r3, #8
 800380c:	d122      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d11b      	bne.n	8003854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0208 	mvn.w	r2, #8
 8003824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d003      	beq.n	8003842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 fa17 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 8003840:	e005      	b.n	800384e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fa09 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fa1a 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b10      	cmp	r3, #16
 8003860:	d122      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b10      	cmp	r3, #16
 800386e:	d11b      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0210 	mvn.w	r2, #16
 8003878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2208      	movs	r2, #8
 800387e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f9ed 	bl	8003c6e <HAL_TIM_IC_CaptureCallback>
 8003894:	e005      	b.n	80038a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9df 	bl	8003c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f9f0 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0201 	mvn.w	r2, #1
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fc fe5e 	bl	8000590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b80      	cmp	r3, #128	; 0x80
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fe02 	bl	8004504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9bf 	bl	8003caa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b20      	cmp	r3, #32
 8003938:	d10e      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b20      	cmp	r3, #32
 8003946:	d107      	bne.n	8003958 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0220 	mvn.w	r2, #32
 8003950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fdcc 	bl	80044f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003976:	2302      	movs	r3, #2
 8003978:	e0b4      	b.n	8003ae4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2202      	movs	r2, #2
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b0c      	cmp	r3, #12
 800398e:	f200 809f 	bhi.w	8003ad0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039cd 	.word	0x080039cd
 800399c:	08003ad1 	.word	0x08003ad1
 80039a0:	08003ad1 	.word	0x08003ad1
 80039a4:	08003ad1 	.word	0x08003ad1
 80039a8:	08003a0d 	.word	0x08003a0d
 80039ac:	08003ad1 	.word	0x08003ad1
 80039b0:	08003ad1 	.word	0x08003ad1
 80039b4:	08003ad1 	.word	0x08003ad1
 80039b8:	08003a4f 	.word	0x08003a4f
 80039bc:	08003ad1 	.word	0x08003ad1
 80039c0:	08003ad1 	.word	0x08003ad1
 80039c4:	08003ad1 	.word	0x08003ad1
 80039c8:	08003a8f 	.word	0x08003a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68b9      	ldr	r1, [r7, #8]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 faa0 	bl	8003f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0208 	orr.w	r2, r2, #8
 80039e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0204 	bic.w	r2, r2, #4
 80039f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6999      	ldr	r1, [r3, #24]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	619a      	str	r2, [r3, #24]
      break;
 8003a0a:	e062      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 faf0 	bl	8003ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	699a      	ldr	r2, [r3, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	021a      	lsls	r2, r3, #8
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	619a      	str	r2, [r3, #24]
      break;
 8003a4c:	e041      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fb45 	bl	80040e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0208 	orr.w	r2, r2, #8
 8003a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0204 	bic.w	r2, r2, #4
 8003a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69d9      	ldr	r1, [r3, #28]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	61da      	str	r2, [r3, #28]
      break;
 8003a8c:	e021      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 fb99 	bl	80041cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69da      	ldr	r2, [r3, #28]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	021a      	lsls	r2, r3, #8
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	61da      	str	r2, [r3, #28]
      break;
 8003ace:	e000      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ad0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_TIM_ConfigClockSource+0x18>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0a6      	b.n	8003c52 <HAL_TIM_ConfigClockSource+0x166>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d067      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0x120>
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d80b      	bhi.n	8003b58 <HAL_TIM_ConfigClockSource+0x6c>
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d073      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d802      	bhi.n	8003b4e <HAL_TIM_ConfigClockSource+0x62>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d06f      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003b4c:	e078      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d06c      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
 8003b52:	2b30      	cmp	r3, #48	; 0x30
 8003b54:	d06a      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003b56:	e073      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b58:	2b70      	cmp	r3, #112	; 0x70
 8003b5a:	d00d      	beq.n	8003b78 <HAL_TIM_ConfigClockSource+0x8c>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d804      	bhi.n	8003b6a <HAL_TIM_ConfigClockSource+0x7e>
 8003b60:	2b50      	cmp	r3, #80	; 0x50
 8003b62:	d033      	beq.n	8003bcc <HAL_TIM_ConfigClockSource+0xe0>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d041      	beq.n	8003bec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003b68:	e06a      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d066      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x152>
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d017      	beq.n	8003ba6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003b76:	e063      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6899      	ldr	r1, [r3, #8]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f000 fbf0 	bl	800436c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b9a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	609a      	str	r2, [r3, #8]
      break;
 8003ba4:	e04c      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f000 fbd9 	bl	800436c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bc8:	609a      	str	r2, [r3, #8]
      break;
 8003bca:	e039      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f000 fb4d 	bl	8004278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2150      	movs	r1, #80	; 0x50
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fba6 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8003bea:	e029      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f000 fb6c 	bl	80042d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2160      	movs	r1, #96	; 0x60
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fb96 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8003c0a:	e019      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 fb2d 	bl	8004278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fb86 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e009      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fb7d 	bl	8004336 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e000      	b.n	8003c40 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff ffe8 	bl	8003cbe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d103      	bne.n	8003d1e <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	771a      	strb	r2, [r3, #28]
 8003d1c:	e019      	b.n	8003d52 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d103      	bne.n	8003d30 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	771a      	strb	r2, [r3, #28]
 8003d2e:	e010      	b.n	8003d52 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d103      	bne.n	8003d42 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	771a      	strb	r2, [r3, #28]
 8003d40:	e007      	b.n	8003d52 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d102      	bne.n	8003d52 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff ff95 	bl	8003c82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	771a      	strb	r2, [r3, #28]
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d103      	bne.n	8003d8e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	771a      	strb	r2, [r3, #28]
 8003d8c:	e019      	b.n	8003dc2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d103      	bne.n	8003da0 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	771a      	strb	r2, [r3, #28]
 8003d9e:	e010      	b.n	8003dc2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d103      	bne.n	8003db2 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2204      	movs	r2, #4
 8003dae:	771a      	strb	r2, [r3, #28]
 8003db0:	e007      	b.n	8003dc2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d102      	bne.n	8003dc2 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ff67 	bl	8003c96 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a40      	ldr	r2, [pc, #256]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d027      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d023      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d017      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <TIM_Base_SetConfig+0x128>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <TIM_Base_SetConfig+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <TIM_Base_SetConfig+0x130>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <TIM_Base_SetConfig+0x134>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <TIM_Base_SetConfig+0x138>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <TIM_Base_SetConfig+0x13c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0xf8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d103      	bne.n	8003ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	615a      	str	r2, [r3, #20]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40010400 	.word	0x40010400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40001800 	.word	0x40001800
 8003f10:	40001c00 	.word	0x40001c00
 8003f14:	40002000 	.word	0x40002000

08003f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	f023 0201 	bic.w	r2, r3, #1
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 0302 	bic.w	r3, r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a20      	ldr	r2, [pc, #128]	; (8003ff0 <TIM_OC1_SetConfig+0xd8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC1_SetConfig+0x64>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <TIM_OC1_SetConfig+0xdc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10c      	bne.n	8003f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0308 	bic.w	r3, r3, #8
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a15      	ldr	r2, [pc, #84]	; (8003ff0 <TIM_OC1_SetConfig+0xd8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <TIM_OC1_SetConfig+0x8e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <TIM_OC1_SetConfig+0xdc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d111      	bne.n	8003fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	621a      	str	r2, [r3, #32]
}
 8003fe4:	bf00      	nop
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0210 	bic.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	021b      	lsls	r3, r3, #8
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0320 	bic.w	r3, r3, #32
 8004042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a22      	ldr	r2, [pc, #136]	; (80040dc <TIM_OC2_SetConfig+0xe4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_OC2_SetConfig+0x68>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_OC2_SetConfig+0xe8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10d      	bne.n	800407c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800407a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC2_SetConfig+0xe4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_OC2_SetConfig+0x94>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC2_SetConfig+0xe8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d113      	bne.n	80040b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40010400 	.word	0x40010400

080040e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800412c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <TIM_OC3_SetConfig+0xe0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_OC3_SetConfig+0x66>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <TIM_OC3_SetConfig+0xe4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d10d      	bne.n	8004166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	4313      	orrs	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <TIM_OC3_SetConfig+0xe0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_OC3_SetConfig+0x92>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <TIM_OC3_SetConfig+0xe4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d113      	bne.n	800419e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <TIM_OC4_SetConfig+0xa4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC4_SetConfig+0x68>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a11      	ldr	r2, [pc, #68]	; (8004274 <TIM_OC4_SetConfig+0xa8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d109      	bne.n	8004248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40010000 	.word	0x40010000
 8004274:	40010400 	.word	0x40010400

08004278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 030a 	bic.w	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	697a      	ldr	r2, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b087      	sub	sp, #28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	f023 0210 	bic.w	r2, r3, #16
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004300:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	031b      	lsls	r3, r3, #12
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004312:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4313      	orrs	r3, r2
 8004354:	f043 0307 	orr.w	r3, r3, #7
 8004358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	431a      	orrs	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2201      	movs	r2, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a1a      	ldr	r2, [r3, #32]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	43db      	mvns	r3, r3
 80043ce:	401a      	ands	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	431a      	orrs	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e05a      	b.n	80044c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d022      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445c:	d01d      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d018      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1a      	ldr	r2, [pc, #104]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00e      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a18      	ldr	r2, [pc, #96]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d009      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a17      	ldr	r2, [pc, #92]	; (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d004      	beq.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a15      	ldr	r2, [pc, #84]	; (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10c      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40010000 	.word	0x40010000
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800
 80044e0:	40000c00 	.word	0x40000c00
 80044e4:	40010400 	.word	0x40010400
 80044e8:	40014000 	.word	0x40014000
 80044ec:	40001800 	.word	0x40001800

080044f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e03f      	b.n	80045aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fc fede 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800455a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 faf9 	bl	8004b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695a      	ldr	r2, [r3, #20]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	4613      	mov	r3, r2
 80045be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d130      	bne.n	800462e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_UART_Transmit_IT+0x26>
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e029      	b.n	8004630 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit_IT+0x38>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e022      	b.n	8004630 <HAL_UART_Transmit_IT+0x7e>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2221      	movs	r2, #33	; 0x21
 800460e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004628:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800462e:	2302      	movs	r3, #2
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b20      	cmp	r3, #32
 8004654:	d140      	bne.n	80046d8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d002      	beq.n	8004662 <HAL_UART_Receive_IT+0x26>
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e039      	b.n	80046da <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_UART_Receive_IT+0x38>
 8004670:	2302      	movs	r3, #2
 8004672:	e032      	b.n	80046da <HAL_UART_Receive_IT+0x9e>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2222      	movs	r2, #34	; 0x22
 8004698:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695a      	ldr	r2, [r3, #20]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0220 	orr.w	r2, r2, #32
 80046d2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800470c:	2300      	movs	r3, #0
 800470e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 030f 	and.w	r3, r3, #15
 8004716:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x52>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f98c 	bl	8004a50 <UART_Receive_IT>
      return;
 8004738:	e0d1      	b.n	80048de <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80b0 	beq.w	80048a2 <HAL_UART_IRQHandler+0x1ba>
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_UART_IRQHandler+0x70>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80a5 	beq.w	80048a2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00a      	beq.n	8004778 <HAL_UART_IRQHandler+0x90>
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_UART_IRQHandler+0xb0>
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	f043 0202 	orr.w	r2, r3, #2
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_UART_IRQHandler+0xd0>
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b0:	f043 0204 	orr.w	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00f      	beq.n	80047e2 <HAL_UART_IRQHandler+0xfa>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_UART_IRQHandler+0xee>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	f043 0208 	orr.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d078      	beq.n	80048dc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_UART_IRQHandler+0x11c>
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f926 	bl	8004a50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <HAL_UART_IRQHandler+0x144>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d031      	beq.n	8004890 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f86f 	bl	8004910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d123      	bne.n	8004888 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004854:	2b00      	cmp	r3, #0
 8004856:	d013      	beq.n	8004880 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485c:	4a21      	ldr	r2, [pc, #132]	; (80048e4 <HAL_UART_IRQHandler+0x1fc>)
 800485e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fd13 	bl	8002290 <HAL_DMA_Abort_IT>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d016      	beq.n	800489e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800487a:	4610      	mov	r0, r2
 800487c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487e:	e00e      	b.n	800489e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f83b 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004886:	e00a      	b.n	800489e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f837 	bl	80048fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488e:	e006      	b.n	800489e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f833 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800489c:	e01e      	b.n	80048dc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800489e:	bf00      	nop
    return;
 80048a0:	e01c      	b.n	80048dc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_UART_IRQHandler+0x1d6>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f85c 	bl	8004974 <UART_Transmit_IT>
    return;
 80048bc:	e00f      	b.n	80048de <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_UART_IRQHandler+0x1f6>
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f8a4 	bl	8004a20 <UART_EndTransmit_IT>
    return;
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <HAL_UART_IRQHandler+0x1f6>
    return;
 80048dc:	bf00      	nop
  }
}
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	0800494d 	.word	0x0800494d

080048e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68da      	ldr	r2, [r3, #12]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004926:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff ffc8 	bl	80048fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b21      	cmp	r3, #33	; 0x21
 8004986:	d144      	bne.n	8004a12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004990:	d11a      	bne.n	80049c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	1c9a      	adds	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]
 80049ba:	e00e      	b.n	80049da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	621a      	str	r2, [r3, #32]
 80049c6:	e008      	b.n	80049da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6211      	str	r1, [r2, #32]
 80049d2:	781a      	ldrb	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4619      	mov	r1, r3
 80049e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10f      	bne.n	8004a0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	e000      	b.n	8004a14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff ff51 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b22      	cmp	r3, #34	; 0x22
 8004a62:	d171      	bne.n	8004b48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6c:	d123      	bne.n	8004ab6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10e      	bne.n	8004a9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	1c9a      	adds	r2, r3, #2
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
 8004a98:	e029      	b.n	8004aee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab4:	e01b      	b.n	8004aee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6858      	ldr	r0, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6291      	str	r1, [r2, #40]	; 0x28
 8004ace:	b2c2      	uxtb	r2, r0
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e00c      	b.n	8004aee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae0:	1c58      	adds	r0, r3, #1
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	6288      	str	r0, [r1, #40]	; 0x28
 8004ae6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4619      	mov	r1, r3
 8004afc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d120      	bne.n	8004b44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68da      	ldr	r2, [r3, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0220 	bic.w	r2, r2, #32
 8004b10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 0201 	bic.w	r2, r2, #1
 8004b30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fb fd38 	bl	80005b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	e002      	b.n	8004b4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e000      	b.n	8004b4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b96:	f023 030c 	bic.w	r3, r3, #12
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6812      	ldr	r2, [r2, #0]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699a      	ldr	r2, [r3, #24]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc2:	f040 818b 	bne.w	8004edc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4ac1      	ldr	r2, [pc, #772]	; (8004ed0 <UART_SetConfig+0x37c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d005      	beq.n	8004bdc <UART_SetConfig+0x88>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4abf      	ldr	r2, [pc, #764]	; (8004ed4 <UART_SetConfig+0x380>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	f040 80bd 	bne.w	8004d56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fc0e 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004be0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	461d      	mov	r5, r3
 8004be6:	f04f 0600 	mov.w	r6, #0
 8004bea:	46a8      	mov	r8, r5
 8004bec:	46b1      	mov	r9, r6
 8004bee:	eb18 0308 	adds.w	r3, r8, r8
 8004bf2:	eb49 0409 	adc.w	r4, r9, r9
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	46a1      	mov	r9, r4
 8004bfa:	eb18 0805 	adds.w	r8, r8, r5
 8004bfe:	eb49 0906 	adc.w	r9, r9, r6
 8004c02:	f04f 0100 	mov.w	r1, #0
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c16:	4688      	mov	r8, r1
 8004c18:	4691      	mov	r9, r2
 8004c1a:	eb18 0005 	adds.w	r0, r8, r5
 8004c1e:	eb49 0106 	adc.w	r1, r9, r6
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	461d      	mov	r5, r3
 8004c28:	f04f 0600 	mov.w	r6, #0
 8004c2c:	196b      	adds	r3, r5, r5
 8004c2e:	eb46 0406 	adc.w	r4, r6, r6
 8004c32:	461a      	mov	r2, r3
 8004c34:	4623      	mov	r3, r4
 8004c36:	f7fb fb2b 	bl	8000290 <__aeabi_uldivmod>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4ba5      	ldr	r3, [pc, #660]	; (8004ed8 <UART_SetConfig+0x384>)
 8004c42:	fba3 2302 	umull	r2, r3, r3, r2
 8004c46:	095b      	lsrs	r3, r3, #5
 8004c48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	461d      	mov	r5, r3
 8004c50:	f04f 0600 	mov.w	r6, #0
 8004c54:	46a9      	mov	r9, r5
 8004c56:	46b2      	mov	sl, r6
 8004c58:	eb19 0309 	adds.w	r3, r9, r9
 8004c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c60:	4699      	mov	r9, r3
 8004c62:	46a2      	mov	sl, r4
 8004c64:	eb19 0905 	adds.w	r9, r9, r5
 8004c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c80:	4689      	mov	r9, r1
 8004c82:	4692      	mov	sl, r2
 8004c84:	eb19 0005 	adds.w	r0, r9, r5
 8004c88:	eb4a 0106 	adc.w	r1, sl, r6
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	461d      	mov	r5, r3
 8004c92:	f04f 0600 	mov.w	r6, #0
 8004c96:	196b      	adds	r3, r5, r5
 8004c98:	eb46 0406 	adc.w	r4, r6, r6
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	f7fb faf6 	bl	8000290 <__aeabi_uldivmod>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b8b      	ldr	r3, [pc, #556]	; (8004ed8 <UART_SetConfig+0x384>)
 8004cac:	fba3 1302 	umull	r1, r3, r3, r2
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	2164      	movs	r1, #100	; 0x64
 8004cb4:	fb01 f303 	mul.w	r3, r1, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	00db      	lsls	r3, r3, #3
 8004cbc:	3332      	adds	r3, #50	; 0x32
 8004cbe:	4a86      	ldr	r2, [pc, #536]	; (8004ed8 <UART_SetConfig+0x384>)
 8004cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc4:	095b      	lsrs	r3, r3, #5
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ccc:	4498      	add	r8, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	f04f 0600 	mov.w	r6, #0
 8004cd6:	46a9      	mov	r9, r5
 8004cd8:	46b2      	mov	sl, r6
 8004cda:	eb19 0309 	adds.w	r3, r9, r9
 8004cde:	eb4a 040a 	adc.w	r4, sl, sl
 8004ce2:	4699      	mov	r9, r3
 8004ce4:	46a2      	mov	sl, r4
 8004ce6:	eb19 0905 	adds.w	r9, r9, r5
 8004cea:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cee:	f04f 0100 	mov.w	r1, #0
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d02:	4689      	mov	r9, r1
 8004d04:	4692      	mov	sl, r2
 8004d06:	eb19 0005 	adds.w	r0, r9, r5
 8004d0a:	eb4a 0106 	adc.w	r1, sl, r6
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	461d      	mov	r5, r3
 8004d14:	f04f 0600 	mov.w	r6, #0
 8004d18:	196b      	adds	r3, r5, r5
 8004d1a:	eb46 0406 	adc.w	r4, r6, r6
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4623      	mov	r3, r4
 8004d22:	f7fb fab5 	bl	8000290 <__aeabi_uldivmod>
 8004d26:	4603      	mov	r3, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	4b6a      	ldr	r3, [pc, #424]	; (8004ed8 <UART_SetConfig+0x384>)
 8004d2e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2164      	movs	r1, #100	; 0x64
 8004d36:	fb01 f303 	mul.w	r3, r1, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	3332      	adds	r3, #50	; 0x32
 8004d40:	4a65      	ldr	r2, [pc, #404]	; (8004ed8 <UART_SetConfig+0x384>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f003 0207 	and.w	r2, r3, #7
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4442      	add	r2, r8
 8004d52:	609a      	str	r2, [r3, #8]
 8004d54:	e26f      	b.n	8005236 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d56:	f7fe fb3d 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8004d5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	461d      	mov	r5, r3
 8004d60:	f04f 0600 	mov.w	r6, #0
 8004d64:	46a8      	mov	r8, r5
 8004d66:	46b1      	mov	r9, r6
 8004d68:	eb18 0308 	adds.w	r3, r8, r8
 8004d6c:	eb49 0409 	adc.w	r4, r9, r9
 8004d70:	4698      	mov	r8, r3
 8004d72:	46a1      	mov	r9, r4
 8004d74:	eb18 0805 	adds.w	r8, r8, r5
 8004d78:	eb49 0906 	adc.w	r9, r9, r6
 8004d7c:	f04f 0100 	mov.w	r1, #0
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d90:	4688      	mov	r8, r1
 8004d92:	4691      	mov	r9, r2
 8004d94:	eb18 0005 	adds.w	r0, r8, r5
 8004d98:	eb49 0106 	adc.w	r1, r9, r6
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	461d      	mov	r5, r3
 8004da2:	f04f 0600 	mov.w	r6, #0
 8004da6:	196b      	adds	r3, r5, r5
 8004da8:	eb46 0406 	adc.w	r4, r6, r6
 8004dac:	461a      	mov	r2, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	f7fb fa6e 	bl	8000290 <__aeabi_uldivmod>
 8004db4:	4603      	mov	r3, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <UART_SetConfig+0x384>)
 8004dbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f04f 0600 	mov.w	r6, #0
 8004dce:	46a9      	mov	r9, r5
 8004dd0:	46b2      	mov	sl, r6
 8004dd2:	eb19 0309 	adds.w	r3, r9, r9
 8004dd6:	eb4a 040a 	adc.w	r4, sl, sl
 8004dda:	4699      	mov	r9, r3
 8004ddc:	46a2      	mov	sl, r4
 8004dde:	eb19 0905 	adds.w	r9, r9, r5
 8004de2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004df6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dfa:	4689      	mov	r9, r1
 8004dfc:	4692      	mov	sl, r2
 8004dfe:	eb19 0005 	adds.w	r0, r9, r5
 8004e02:	eb4a 0106 	adc.w	r1, sl, r6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	461d      	mov	r5, r3
 8004e0c:	f04f 0600 	mov.w	r6, #0
 8004e10:	196b      	adds	r3, r5, r5
 8004e12:	eb46 0406 	adc.w	r4, r6, r6
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	f7fb fa39 	bl	8000290 <__aeabi_uldivmod>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	461a      	mov	r2, r3
 8004e24:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <UART_SetConfig+0x384>)
 8004e26:	fba3 1302 	umull	r1, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2164      	movs	r1, #100	; 0x64
 8004e2e:	fb01 f303 	mul.w	r3, r1, r3
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	3332      	adds	r3, #50	; 0x32
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <UART_SetConfig+0x384>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e46:	4498      	add	r8, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	f04f 0600 	mov.w	r6, #0
 8004e50:	46a9      	mov	r9, r5
 8004e52:	46b2      	mov	sl, r6
 8004e54:	eb19 0309 	adds.w	r3, r9, r9
 8004e58:	eb4a 040a 	adc.w	r4, sl, sl
 8004e5c:	4699      	mov	r9, r3
 8004e5e:	46a2      	mov	sl, r4
 8004e60:	eb19 0905 	adds.w	r9, r9, r5
 8004e64:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e7c:	4689      	mov	r9, r1
 8004e7e:	4692      	mov	sl, r2
 8004e80:	eb19 0005 	adds.w	r0, r9, r5
 8004e84:	eb4a 0106 	adc.w	r1, sl, r6
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	f04f 0600 	mov.w	r6, #0
 8004e92:	196b      	adds	r3, r5, r5
 8004e94:	eb46 0406 	adc.w	r4, r6, r6
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	f7fb f9f8 	bl	8000290 <__aeabi_uldivmod>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <UART_SetConfig+0x384>)
 8004ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2164      	movs	r1, #100	; 0x64
 8004eb0:	fb01 f303 	mul.w	r3, r1, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3332      	adds	r3, #50	; 0x32
 8004eba:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <UART_SetConfig+0x384>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	f003 0207 	and.w	r2, r3, #7
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4442      	add	r2, r8
 8004ecc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ece:	e1b2      	b.n	8005236 <UART_SetConfig+0x6e2>
 8004ed0:	40011000 	.word	0x40011000
 8004ed4:	40011400 	.word	0x40011400
 8004ed8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4ad7      	ldr	r2, [pc, #860]	; (8005240 <UART_SetConfig+0x6ec>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d005      	beq.n	8004ef2 <UART_SetConfig+0x39e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4ad6      	ldr	r2, [pc, #856]	; (8005244 <UART_SetConfig+0x6f0>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	f040 80d1 	bne.w	8005094 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ef2:	f7fe fa83 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004ef6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	469a      	mov	sl, r3
 8004efc:	f04f 0b00 	mov.w	fp, #0
 8004f00:	46d0      	mov	r8, sl
 8004f02:	46d9      	mov	r9, fp
 8004f04:	eb18 0308 	adds.w	r3, r8, r8
 8004f08:	eb49 0409 	adc.w	r4, r9, r9
 8004f0c:	4698      	mov	r8, r3
 8004f0e:	46a1      	mov	r9, r4
 8004f10:	eb18 080a 	adds.w	r8, r8, sl
 8004f14:	eb49 090b 	adc.w	r9, r9, fp
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f2c:	4688      	mov	r8, r1
 8004f2e:	4691      	mov	r9, r2
 8004f30:	eb1a 0508 	adds.w	r5, sl, r8
 8004f34:	eb4b 0609 	adc.w	r6, fp, r9
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	f04f 0400 	mov.w	r4, #0
 8004f4a:	0094      	lsls	r4, r2, #2
 8004f4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f50:	008b      	lsls	r3, r1, #2
 8004f52:	461a      	mov	r2, r3
 8004f54:	4623      	mov	r3, r4
 8004f56:	4628      	mov	r0, r5
 8004f58:	4631      	mov	r1, r6
 8004f5a:	f7fb f999 	bl	8000290 <__aeabi_uldivmod>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	461a      	mov	r2, r3
 8004f64:	4bb8      	ldr	r3, [pc, #736]	; (8005248 <UART_SetConfig+0x6f4>)
 8004f66:	fba3 2302 	umull	r2, r3, r3, r2
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	469b      	mov	fp, r3
 8004f74:	f04f 0c00 	mov.w	ip, #0
 8004f78:	46d9      	mov	r9, fp
 8004f7a:	46e2      	mov	sl, ip
 8004f7c:	eb19 0309 	adds.w	r3, r9, r9
 8004f80:	eb4a 040a 	adc.w	r4, sl, sl
 8004f84:	4699      	mov	r9, r3
 8004f86:	46a2      	mov	sl, r4
 8004f88:	eb19 090b 	adds.w	r9, r9, fp
 8004f8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f90:	f04f 0100 	mov.w	r1, #0
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fa4:	4689      	mov	r9, r1
 8004fa6:	4692      	mov	sl, r2
 8004fa8:	eb1b 0509 	adds.w	r5, fp, r9
 8004fac:	eb4c 060a 	adc.w	r6, ip, sl
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	f04f 0400 	mov.w	r4, #0
 8004fc2:	0094      	lsls	r4, r2, #2
 8004fc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fc8:	008b      	lsls	r3, r1, #2
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4623      	mov	r3, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	f7fb f95d 	bl	8000290 <__aeabi_uldivmod>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	460c      	mov	r4, r1
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b9a      	ldr	r3, [pc, #616]	; (8005248 <UART_SetConfig+0x6f4>)
 8004fde:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	2164      	movs	r1, #100	; 0x64
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	3332      	adds	r3, #50	; 0x32
 8004ff0:	4a95      	ldr	r2, [pc, #596]	; (8005248 <UART_SetConfig+0x6f4>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ffc:	4498      	add	r8, r3
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	469b      	mov	fp, r3
 8005002:	f04f 0c00 	mov.w	ip, #0
 8005006:	46d9      	mov	r9, fp
 8005008:	46e2      	mov	sl, ip
 800500a:	eb19 0309 	adds.w	r3, r9, r9
 800500e:	eb4a 040a 	adc.w	r4, sl, sl
 8005012:	4699      	mov	r9, r3
 8005014:	46a2      	mov	sl, r4
 8005016:	eb19 090b 	adds.w	r9, r9, fp
 800501a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800502a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800502e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005032:	4689      	mov	r9, r1
 8005034:	4692      	mov	sl, r2
 8005036:	eb1b 0509 	adds.w	r5, fp, r9
 800503a:	eb4c 060a 	adc.w	r6, ip, sl
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0094      	lsls	r4, r2, #2
 8005052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005056:	008b      	lsls	r3, r1, #2
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	4628      	mov	r0, r5
 800505e:	4631      	mov	r1, r6
 8005060:	f7fb f916 	bl	8000290 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	461a      	mov	r2, r3
 800506a:	4b77      	ldr	r3, [pc, #476]	; (8005248 <UART_SetConfig+0x6f4>)
 800506c:	fba3 1302 	umull	r1, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	2164      	movs	r1, #100	; 0x64
 8005074:	fb01 f303 	mul.w	r3, r1, r3
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	3332      	adds	r3, #50	; 0x32
 800507e:	4a72      	ldr	r2, [pc, #456]	; (8005248 <UART_SetConfig+0x6f4>)
 8005080:	fba2 2303 	umull	r2, r3, r2, r3
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	f003 020f 	and.w	r2, r3, #15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4442      	add	r2, r8
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	e0d0      	b.n	8005236 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe f99e 	bl	80033d4 <HAL_RCC_GetPCLK1Freq>
 8005098:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	469a      	mov	sl, r3
 800509e:	f04f 0b00 	mov.w	fp, #0
 80050a2:	46d0      	mov	r8, sl
 80050a4:	46d9      	mov	r9, fp
 80050a6:	eb18 0308 	adds.w	r3, r8, r8
 80050aa:	eb49 0409 	adc.w	r4, r9, r9
 80050ae:	4698      	mov	r8, r3
 80050b0:	46a1      	mov	r9, r4
 80050b2:	eb18 080a 	adds.w	r8, r8, sl
 80050b6:	eb49 090b 	adc.w	r9, r9, fp
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	f04f 0200 	mov.w	r2, #0
 80050c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050ce:	4688      	mov	r8, r1
 80050d0:	4691      	mov	r9, r2
 80050d2:	eb1a 0508 	adds.w	r5, sl, r8
 80050d6:	eb4b 0609 	adc.w	r6, fp, r9
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4619      	mov	r1, r3
 80050e0:	f04f 0200 	mov.w	r2, #0
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f04f 0400 	mov.w	r4, #0
 80050ec:	0094      	lsls	r4, r2, #2
 80050ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050f2:	008b      	lsls	r3, r1, #2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	4628      	mov	r0, r5
 80050fa:	4631      	mov	r1, r6
 80050fc:	f7fb f8c8 	bl	8000290 <__aeabi_uldivmod>
 8005100:	4603      	mov	r3, r0
 8005102:	460c      	mov	r4, r1
 8005104:	461a      	mov	r2, r3
 8005106:	4b50      	ldr	r3, [pc, #320]	; (8005248 <UART_SetConfig+0x6f4>)
 8005108:	fba3 2302 	umull	r2, r3, r3, r2
 800510c:	095b      	lsrs	r3, r3, #5
 800510e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	469b      	mov	fp, r3
 8005116:	f04f 0c00 	mov.w	ip, #0
 800511a:	46d9      	mov	r9, fp
 800511c:	46e2      	mov	sl, ip
 800511e:	eb19 0309 	adds.w	r3, r9, r9
 8005122:	eb4a 040a 	adc.w	r4, sl, sl
 8005126:	4699      	mov	r9, r3
 8005128:	46a2      	mov	sl, r4
 800512a:	eb19 090b 	adds.w	r9, r9, fp
 800512e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800513e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005146:	4689      	mov	r9, r1
 8005148:	4692      	mov	sl, r2
 800514a:	eb1b 0509 	adds.w	r5, fp, r9
 800514e:	eb4c 060a 	adc.w	r6, ip, sl
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	f04f 0400 	mov.w	r4, #0
 8005164:	0094      	lsls	r4, r2, #2
 8005166:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800516a:	008b      	lsls	r3, r1, #2
 800516c:	461a      	mov	r2, r3
 800516e:	4623      	mov	r3, r4
 8005170:	4628      	mov	r0, r5
 8005172:	4631      	mov	r1, r6
 8005174:	f7fb f88c 	bl	8000290 <__aeabi_uldivmod>
 8005178:	4603      	mov	r3, r0
 800517a:	460c      	mov	r4, r1
 800517c:	461a      	mov	r2, r3
 800517e:	4b32      	ldr	r3, [pc, #200]	; (8005248 <UART_SetConfig+0x6f4>)
 8005180:	fba3 1302 	umull	r1, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	2164      	movs	r1, #100	; 0x64
 8005188:	fb01 f303 	mul.w	r3, r1, r3
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	3332      	adds	r3, #50	; 0x32
 8005192:	4a2d      	ldr	r2, [pc, #180]	; (8005248 <UART_SetConfig+0x6f4>)
 8005194:	fba2 2303 	umull	r2, r3, r2, r3
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800519e:	4498      	add	r8, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	469b      	mov	fp, r3
 80051a4:	f04f 0c00 	mov.w	ip, #0
 80051a8:	46d9      	mov	r9, fp
 80051aa:	46e2      	mov	sl, ip
 80051ac:	eb19 0309 	adds.w	r3, r9, r9
 80051b0:	eb4a 040a 	adc.w	r4, sl, sl
 80051b4:	4699      	mov	r9, r3
 80051b6:	46a2      	mov	sl, r4
 80051b8:	eb19 090b 	adds.w	r9, r9, fp
 80051bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051c0:	f04f 0100 	mov.w	r1, #0
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051d4:	4689      	mov	r9, r1
 80051d6:	4692      	mov	sl, r2
 80051d8:	eb1b 0509 	adds.w	r5, fp, r9
 80051dc:	eb4c 060a 	adc.w	r6, ip, sl
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4619      	mov	r1, r3
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f04f 0400 	mov.w	r4, #0
 80051f2:	0094      	lsls	r4, r2, #2
 80051f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051f8:	008b      	lsls	r3, r1, #2
 80051fa:	461a      	mov	r2, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	4628      	mov	r0, r5
 8005200:	4631      	mov	r1, r6
 8005202:	f7fb f845 	bl	8000290 <__aeabi_uldivmod>
 8005206:	4603      	mov	r3, r0
 8005208:	460c      	mov	r4, r1
 800520a:	461a      	mov	r2, r3
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <UART_SetConfig+0x6f4>)
 800520e:	fba3 1302 	umull	r1, r3, r3, r2
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2164      	movs	r1, #100	; 0x64
 8005216:	fb01 f303 	mul.w	r3, r1, r3
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	3332      	adds	r3, #50	; 0x32
 8005220:	4a09      	ldr	r2, [pc, #36]	; (8005248 <UART_SetConfig+0x6f4>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4442      	add	r2, r8
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	e7ff      	b.n	8005236 <UART_SetConfig+0x6e2>
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005240:	40011000 	.word	0x40011000
 8005244:	40011400 	.word	0x40011400
 8005248:	51eb851f 	.word	0x51eb851f

0800524c <atoi>:
 800524c:	220a      	movs	r2, #10
 800524e:	2100      	movs	r1, #0
 8005250:	f000 b8ce 	b.w	80053f0 <strtol>

08005254 <__errno>:
 8005254:	4b01      	ldr	r3, [pc, #4]	; (800525c <__errno+0x8>)
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000000c 	.word	0x2000000c

08005260 <__libc_init_array>:
 8005260:	b570      	push	{r4, r5, r6, lr}
 8005262:	4e0d      	ldr	r6, [pc, #52]	; (8005298 <__libc_init_array+0x38>)
 8005264:	4c0d      	ldr	r4, [pc, #52]	; (800529c <__libc_init_array+0x3c>)
 8005266:	1ba4      	subs	r4, r4, r6
 8005268:	10a4      	asrs	r4, r4, #2
 800526a:	2500      	movs	r5, #0
 800526c:	42a5      	cmp	r5, r4
 800526e:	d109      	bne.n	8005284 <__libc_init_array+0x24>
 8005270:	4e0b      	ldr	r6, [pc, #44]	; (80052a0 <__libc_init_array+0x40>)
 8005272:	4c0c      	ldr	r4, [pc, #48]	; (80052a4 <__libc_init_array+0x44>)
 8005274:	f000 fcdc 	bl	8005c30 <_init>
 8005278:	1ba4      	subs	r4, r4, r6
 800527a:	10a4      	asrs	r4, r4, #2
 800527c:	2500      	movs	r5, #0
 800527e:	42a5      	cmp	r5, r4
 8005280:	d105      	bne.n	800528e <__libc_init_array+0x2e>
 8005282:	bd70      	pop	{r4, r5, r6, pc}
 8005284:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005288:	4798      	blx	r3
 800528a:	3501      	adds	r5, #1
 800528c:	e7ee      	b.n	800526c <__libc_init_array+0xc>
 800528e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005292:	4798      	blx	r3
 8005294:	3501      	adds	r5, #1
 8005296:	e7f2      	b.n	800527e <__libc_init_array+0x1e>
 8005298:	08005dc0 	.word	0x08005dc0
 800529c:	08005dc0 	.word	0x08005dc0
 80052a0:	08005dc0 	.word	0x08005dc0
 80052a4:	08005dc4 	.word	0x08005dc4

080052a8 <memset>:
 80052a8:	4402      	add	r2, r0
 80052aa:	4603      	mov	r3, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <siprintf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	b500      	push	{lr}
 80052bc:	b09c      	sub	sp, #112	; 0x70
 80052be:	ab1d      	add	r3, sp, #116	; 0x74
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	9006      	str	r0, [sp, #24]
 80052c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052c8:	4809      	ldr	r0, [pc, #36]	; (80052f0 <siprintf+0x38>)
 80052ca:	9107      	str	r1, [sp, #28]
 80052cc:	9104      	str	r1, [sp, #16]
 80052ce:	4909      	ldr	r1, [pc, #36]	; (80052f4 <siprintf+0x3c>)
 80052d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d4:	9105      	str	r1, [sp, #20]
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	a902      	add	r1, sp, #8
 80052dc:	f000 f90e 	bl	80054fc <_svfiprintf_r>
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	b01c      	add	sp, #112	; 0x70
 80052e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ec:	b003      	add	sp, #12
 80052ee:	4770      	bx	lr
 80052f0:	2000000c 	.word	0x2000000c
 80052f4:	ffff0208 	.word	0xffff0208

080052f8 <_strtol_l.isra.0>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	4680      	mov	r8, r0
 80052fe:	4689      	mov	r9, r1
 8005300:	4692      	mov	sl, r2
 8005302:	461e      	mov	r6, r3
 8005304:	460f      	mov	r7, r1
 8005306:	463d      	mov	r5, r7
 8005308:	9808      	ldr	r0, [sp, #32]
 800530a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800530e:	f000 f885 	bl	800541c <__locale_ctype_ptr_l>
 8005312:	4420      	add	r0, r4
 8005314:	7843      	ldrb	r3, [r0, #1]
 8005316:	f013 0308 	ands.w	r3, r3, #8
 800531a:	d132      	bne.n	8005382 <_strtol_l.isra.0+0x8a>
 800531c:	2c2d      	cmp	r4, #45	; 0x2d
 800531e:	d132      	bne.n	8005386 <_strtol_l.isra.0+0x8e>
 8005320:	787c      	ldrb	r4, [r7, #1]
 8005322:	1cbd      	adds	r5, r7, #2
 8005324:	2201      	movs	r2, #1
 8005326:	2e00      	cmp	r6, #0
 8005328:	d05d      	beq.n	80053e6 <_strtol_l.isra.0+0xee>
 800532a:	2e10      	cmp	r6, #16
 800532c:	d109      	bne.n	8005342 <_strtol_l.isra.0+0x4a>
 800532e:	2c30      	cmp	r4, #48	; 0x30
 8005330:	d107      	bne.n	8005342 <_strtol_l.isra.0+0x4a>
 8005332:	782b      	ldrb	r3, [r5, #0]
 8005334:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005338:	2b58      	cmp	r3, #88	; 0x58
 800533a:	d14f      	bne.n	80053dc <_strtol_l.isra.0+0xe4>
 800533c:	786c      	ldrb	r4, [r5, #1]
 800533e:	2610      	movs	r6, #16
 8005340:	3502      	adds	r5, #2
 8005342:	2a00      	cmp	r2, #0
 8005344:	bf14      	ite	ne
 8005346:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800534a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800534e:	2700      	movs	r7, #0
 8005350:	fbb1 fcf6 	udiv	ip, r1, r6
 8005354:	4638      	mov	r0, r7
 8005356:	fb06 1e1c 	mls	lr, r6, ip, r1
 800535a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800535e:	2b09      	cmp	r3, #9
 8005360:	d817      	bhi.n	8005392 <_strtol_l.isra.0+0x9a>
 8005362:	461c      	mov	r4, r3
 8005364:	42a6      	cmp	r6, r4
 8005366:	dd23      	ble.n	80053b0 <_strtol_l.isra.0+0xb8>
 8005368:	1c7b      	adds	r3, r7, #1
 800536a:	d007      	beq.n	800537c <_strtol_l.isra.0+0x84>
 800536c:	4584      	cmp	ip, r0
 800536e:	d31c      	bcc.n	80053aa <_strtol_l.isra.0+0xb2>
 8005370:	d101      	bne.n	8005376 <_strtol_l.isra.0+0x7e>
 8005372:	45a6      	cmp	lr, r4
 8005374:	db19      	blt.n	80053aa <_strtol_l.isra.0+0xb2>
 8005376:	fb00 4006 	mla	r0, r0, r6, r4
 800537a:	2701      	movs	r7, #1
 800537c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005380:	e7eb      	b.n	800535a <_strtol_l.isra.0+0x62>
 8005382:	462f      	mov	r7, r5
 8005384:	e7bf      	b.n	8005306 <_strtol_l.isra.0+0xe>
 8005386:	2c2b      	cmp	r4, #43	; 0x2b
 8005388:	bf04      	itt	eq
 800538a:	1cbd      	addeq	r5, r7, #2
 800538c:	787c      	ldrbeq	r4, [r7, #1]
 800538e:	461a      	mov	r2, r3
 8005390:	e7c9      	b.n	8005326 <_strtol_l.isra.0+0x2e>
 8005392:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005396:	2b19      	cmp	r3, #25
 8005398:	d801      	bhi.n	800539e <_strtol_l.isra.0+0xa6>
 800539a:	3c37      	subs	r4, #55	; 0x37
 800539c:	e7e2      	b.n	8005364 <_strtol_l.isra.0+0x6c>
 800539e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80053a2:	2b19      	cmp	r3, #25
 80053a4:	d804      	bhi.n	80053b0 <_strtol_l.isra.0+0xb8>
 80053a6:	3c57      	subs	r4, #87	; 0x57
 80053a8:	e7dc      	b.n	8005364 <_strtol_l.isra.0+0x6c>
 80053aa:	f04f 37ff 	mov.w	r7, #4294967295
 80053ae:	e7e5      	b.n	800537c <_strtol_l.isra.0+0x84>
 80053b0:	1c7b      	adds	r3, r7, #1
 80053b2:	d108      	bne.n	80053c6 <_strtol_l.isra.0+0xce>
 80053b4:	2322      	movs	r3, #34	; 0x22
 80053b6:	f8c8 3000 	str.w	r3, [r8]
 80053ba:	4608      	mov	r0, r1
 80053bc:	f1ba 0f00 	cmp.w	sl, #0
 80053c0:	d107      	bne.n	80053d2 <_strtol_l.isra.0+0xda>
 80053c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c6:	b102      	cbz	r2, 80053ca <_strtol_l.isra.0+0xd2>
 80053c8:	4240      	negs	r0, r0
 80053ca:	f1ba 0f00 	cmp.w	sl, #0
 80053ce:	d0f8      	beq.n	80053c2 <_strtol_l.isra.0+0xca>
 80053d0:	b10f      	cbz	r7, 80053d6 <_strtol_l.isra.0+0xde>
 80053d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80053d6:	f8ca 9000 	str.w	r9, [sl]
 80053da:	e7f2      	b.n	80053c2 <_strtol_l.isra.0+0xca>
 80053dc:	2430      	movs	r4, #48	; 0x30
 80053de:	2e00      	cmp	r6, #0
 80053e0:	d1af      	bne.n	8005342 <_strtol_l.isra.0+0x4a>
 80053e2:	2608      	movs	r6, #8
 80053e4:	e7ad      	b.n	8005342 <_strtol_l.isra.0+0x4a>
 80053e6:	2c30      	cmp	r4, #48	; 0x30
 80053e8:	d0a3      	beq.n	8005332 <_strtol_l.isra.0+0x3a>
 80053ea:	260a      	movs	r6, #10
 80053ec:	e7a9      	b.n	8005342 <_strtol_l.isra.0+0x4a>
	...

080053f0 <strtol>:
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <strtol+0x24>)
 80053f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053f4:	681c      	ldr	r4, [r3, #0]
 80053f6:	4d08      	ldr	r5, [pc, #32]	; (8005418 <strtol+0x28>)
 80053f8:	6a23      	ldr	r3, [r4, #32]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf08      	it	eq
 80053fe:	462b      	moveq	r3, r5
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	4613      	mov	r3, r2
 8005404:	460a      	mov	r2, r1
 8005406:	4601      	mov	r1, r0
 8005408:	4620      	mov	r0, r4
 800540a:	f7ff ff75 	bl	80052f8 <_strtol_l.isra.0>
 800540e:	b003      	add	sp, #12
 8005410:	bd30      	pop	{r4, r5, pc}
 8005412:	bf00      	nop
 8005414:	2000000c 	.word	0x2000000c
 8005418:	20000070 	.word	0x20000070

0800541c <__locale_ctype_ptr_l>:
 800541c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005420:	4770      	bx	lr

08005422 <__ascii_mbtowc>:
 8005422:	b082      	sub	sp, #8
 8005424:	b901      	cbnz	r1, 8005428 <__ascii_mbtowc+0x6>
 8005426:	a901      	add	r1, sp, #4
 8005428:	b142      	cbz	r2, 800543c <__ascii_mbtowc+0x1a>
 800542a:	b14b      	cbz	r3, 8005440 <__ascii_mbtowc+0x1e>
 800542c:	7813      	ldrb	r3, [r2, #0]
 800542e:	600b      	str	r3, [r1, #0]
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	1c10      	adds	r0, r2, #0
 8005434:	bf18      	it	ne
 8005436:	2001      	movne	r0, #1
 8005438:	b002      	add	sp, #8
 800543a:	4770      	bx	lr
 800543c:	4610      	mov	r0, r2
 800543e:	e7fb      	b.n	8005438 <__ascii_mbtowc+0x16>
 8005440:	f06f 0001 	mvn.w	r0, #1
 8005444:	e7f8      	b.n	8005438 <__ascii_mbtowc+0x16>

08005446 <__ssputs_r>:
 8005446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800544a:	688e      	ldr	r6, [r1, #8]
 800544c:	429e      	cmp	r6, r3
 800544e:	4682      	mov	sl, r0
 8005450:	460c      	mov	r4, r1
 8005452:	4690      	mov	r8, r2
 8005454:	4699      	mov	r9, r3
 8005456:	d837      	bhi.n	80054c8 <__ssputs_r+0x82>
 8005458:	898a      	ldrh	r2, [r1, #12]
 800545a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800545e:	d031      	beq.n	80054c4 <__ssputs_r+0x7e>
 8005460:	6825      	ldr	r5, [r4, #0]
 8005462:	6909      	ldr	r1, [r1, #16]
 8005464:	1a6f      	subs	r7, r5, r1
 8005466:	6965      	ldr	r5, [r4, #20]
 8005468:	2302      	movs	r3, #2
 800546a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800546e:	fb95 f5f3 	sdiv	r5, r5, r3
 8005472:	f109 0301 	add.w	r3, r9, #1
 8005476:	443b      	add	r3, r7
 8005478:	429d      	cmp	r5, r3
 800547a:	bf38      	it	cc
 800547c:	461d      	movcc	r5, r3
 800547e:	0553      	lsls	r3, r2, #21
 8005480:	d530      	bpl.n	80054e4 <__ssputs_r+0x9e>
 8005482:	4629      	mov	r1, r5
 8005484:	f000 fb3a 	bl	8005afc <_malloc_r>
 8005488:	4606      	mov	r6, r0
 800548a:	b950      	cbnz	r0, 80054a2 <__ssputs_r+0x5c>
 800548c:	230c      	movs	r3, #12
 800548e:	f8ca 3000 	str.w	r3, [sl]
 8005492:	89a3      	ldrh	r3, [r4, #12]
 8005494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a2:	463a      	mov	r2, r7
 80054a4:	6921      	ldr	r1, [r4, #16]
 80054a6:	f000 fab6 	bl	8005a16 <memcpy>
 80054aa:	89a3      	ldrh	r3, [r4, #12]
 80054ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b4:	81a3      	strh	r3, [r4, #12]
 80054b6:	6126      	str	r6, [r4, #16]
 80054b8:	6165      	str	r5, [r4, #20]
 80054ba:	443e      	add	r6, r7
 80054bc:	1bed      	subs	r5, r5, r7
 80054be:	6026      	str	r6, [r4, #0]
 80054c0:	60a5      	str	r5, [r4, #8]
 80054c2:	464e      	mov	r6, r9
 80054c4:	454e      	cmp	r6, r9
 80054c6:	d900      	bls.n	80054ca <__ssputs_r+0x84>
 80054c8:	464e      	mov	r6, r9
 80054ca:	4632      	mov	r2, r6
 80054cc:	4641      	mov	r1, r8
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	f000 faac 	bl	8005a2c <memmove>
 80054d4:	68a3      	ldr	r3, [r4, #8]
 80054d6:	1b9b      	subs	r3, r3, r6
 80054d8:	60a3      	str	r3, [r4, #8]
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	441e      	add	r6, r3
 80054de:	6026      	str	r6, [r4, #0]
 80054e0:	2000      	movs	r0, #0
 80054e2:	e7dc      	b.n	800549e <__ssputs_r+0x58>
 80054e4:	462a      	mov	r2, r5
 80054e6:	f000 fb63 	bl	8005bb0 <_realloc_r>
 80054ea:	4606      	mov	r6, r0
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d1e2      	bne.n	80054b6 <__ssputs_r+0x70>
 80054f0:	6921      	ldr	r1, [r4, #16]
 80054f2:	4650      	mov	r0, sl
 80054f4:	f000 fab4 	bl	8005a60 <_free_r>
 80054f8:	e7c8      	b.n	800548c <__ssputs_r+0x46>
	...

080054fc <_svfiprintf_r>:
 80054fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005500:	461d      	mov	r5, r3
 8005502:	898b      	ldrh	r3, [r1, #12]
 8005504:	061f      	lsls	r7, r3, #24
 8005506:	b09d      	sub	sp, #116	; 0x74
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	4616      	mov	r6, r2
 800550e:	d50f      	bpl.n	8005530 <_svfiprintf_r+0x34>
 8005510:	690b      	ldr	r3, [r1, #16]
 8005512:	b96b      	cbnz	r3, 8005530 <_svfiprintf_r+0x34>
 8005514:	2140      	movs	r1, #64	; 0x40
 8005516:	f000 faf1 	bl	8005afc <_malloc_r>
 800551a:	6020      	str	r0, [r4, #0]
 800551c:	6120      	str	r0, [r4, #16]
 800551e:	b928      	cbnz	r0, 800552c <_svfiprintf_r+0x30>
 8005520:	230c      	movs	r3, #12
 8005522:	f8c8 3000 	str.w	r3, [r8]
 8005526:	f04f 30ff 	mov.w	r0, #4294967295
 800552a:	e0c8      	b.n	80056be <_svfiprintf_r+0x1c2>
 800552c:	2340      	movs	r3, #64	; 0x40
 800552e:	6163      	str	r3, [r4, #20]
 8005530:	2300      	movs	r3, #0
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
 8005534:	2320      	movs	r3, #32
 8005536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800553a:	2330      	movs	r3, #48	; 0x30
 800553c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005540:	9503      	str	r5, [sp, #12]
 8005542:	f04f 0b01 	mov.w	fp, #1
 8005546:	4637      	mov	r7, r6
 8005548:	463d      	mov	r5, r7
 800554a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800554e:	b10b      	cbz	r3, 8005554 <_svfiprintf_r+0x58>
 8005550:	2b25      	cmp	r3, #37	; 0x25
 8005552:	d13e      	bne.n	80055d2 <_svfiprintf_r+0xd6>
 8005554:	ebb7 0a06 	subs.w	sl, r7, r6
 8005558:	d00b      	beq.n	8005572 <_svfiprintf_r+0x76>
 800555a:	4653      	mov	r3, sl
 800555c:	4632      	mov	r2, r6
 800555e:	4621      	mov	r1, r4
 8005560:	4640      	mov	r0, r8
 8005562:	f7ff ff70 	bl	8005446 <__ssputs_r>
 8005566:	3001      	adds	r0, #1
 8005568:	f000 80a4 	beq.w	80056b4 <_svfiprintf_r+0x1b8>
 800556c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800556e:	4453      	add	r3, sl
 8005570:	9309      	str	r3, [sp, #36]	; 0x24
 8005572:	783b      	ldrb	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 809d 	beq.w	80056b4 <_svfiprintf_r+0x1b8>
 800557a:	2300      	movs	r3, #0
 800557c:	f04f 32ff 	mov.w	r2, #4294967295
 8005580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005584:	9304      	str	r3, [sp, #16]
 8005586:	9307      	str	r3, [sp, #28]
 8005588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800558c:	931a      	str	r3, [sp, #104]	; 0x68
 800558e:	462f      	mov	r7, r5
 8005590:	2205      	movs	r2, #5
 8005592:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005596:	4850      	ldr	r0, [pc, #320]	; (80056d8 <_svfiprintf_r+0x1dc>)
 8005598:	f7fa fe2a 	bl	80001f0 <memchr>
 800559c:	9b04      	ldr	r3, [sp, #16]
 800559e:	b9d0      	cbnz	r0, 80055d6 <_svfiprintf_r+0xda>
 80055a0:	06d9      	lsls	r1, r3, #27
 80055a2:	bf44      	itt	mi
 80055a4:	2220      	movmi	r2, #32
 80055a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055aa:	071a      	lsls	r2, r3, #28
 80055ac:	bf44      	itt	mi
 80055ae:	222b      	movmi	r2, #43	; 0x2b
 80055b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055b4:	782a      	ldrb	r2, [r5, #0]
 80055b6:	2a2a      	cmp	r2, #42	; 0x2a
 80055b8:	d015      	beq.n	80055e6 <_svfiprintf_r+0xea>
 80055ba:	9a07      	ldr	r2, [sp, #28]
 80055bc:	462f      	mov	r7, r5
 80055be:	2000      	movs	r0, #0
 80055c0:	250a      	movs	r5, #10
 80055c2:	4639      	mov	r1, r7
 80055c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055c8:	3b30      	subs	r3, #48	; 0x30
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d94d      	bls.n	800566a <_svfiprintf_r+0x16e>
 80055ce:	b1b8      	cbz	r0, 8005600 <_svfiprintf_r+0x104>
 80055d0:	e00f      	b.n	80055f2 <_svfiprintf_r+0xf6>
 80055d2:	462f      	mov	r7, r5
 80055d4:	e7b8      	b.n	8005548 <_svfiprintf_r+0x4c>
 80055d6:	4a40      	ldr	r2, [pc, #256]	; (80056d8 <_svfiprintf_r+0x1dc>)
 80055d8:	1a80      	subs	r0, r0, r2
 80055da:	fa0b f000 	lsl.w	r0, fp, r0
 80055de:	4318      	orrs	r0, r3
 80055e0:	9004      	str	r0, [sp, #16]
 80055e2:	463d      	mov	r5, r7
 80055e4:	e7d3      	b.n	800558e <_svfiprintf_r+0x92>
 80055e6:	9a03      	ldr	r2, [sp, #12]
 80055e8:	1d11      	adds	r1, r2, #4
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	9103      	str	r1, [sp, #12]
 80055ee:	2a00      	cmp	r2, #0
 80055f0:	db01      	blt.n	80055f6 <_svfiprintf_r+0xfa>
 80055f2:	9207      	str	r2, [sp, #28]
 80055f4:	e004      	b.n	8005600 <_svfiprintf_r+0x104>
 80055f6:	4252      	negs	r2, r2
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	9207      	str	r2, [sp, #28]
 80055fe:	9304      	str	r3, [sp, #16]
 8005600:	783b      	ldrb	r3, [r7, #0]
 8005602:	2b2e      	cmp	r3, #46	; 0x2e
 8005604:	d10c      	bne.n	8005620 <_svfiprintf_r+0x124>
 8005606:	787b      	ldrb	r3, [r7, #1]
 8005608:	2b2a      	cmp	r3, #42	; 0x2a
 800560a:	d133      	bne.n	8005674 <_svfiprintf_r+0x178>
 800560c:	9b03      	ldr	r3, [sp, #12]
 800560e:	1d1a      	adds	r2, r3, #4
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	9203      	str	r2, [sp, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	bfb8      	it	lt
 8005618:	f04f 33ff 	movlt.w	r3, #4294967295
 800561c:	3702      	adds	r7, #2
 800561e:	9305      	str	r3, [sp, #20]
 8005620:	4d2e      	ldr	r5, [pc, #184]	; (80056dc <_svfiprintf_r+0x1e0>)
 8005622:	7839      	ldrb	r1, [r7, #0]
 8005624:	2203      	movs	r2, #3
 8005626:	4628      	mov	r0, r5
 8005628:	f7fa fde2 	bl	80001f0 <memchr>
 800562c:	b138      	cbz	r0, 800563e <_svfiprintf_r+0x142>
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	1b40      	subs	r0, r0, r5
 8005632:	fa03 f000 	lsl.w	r0, r3, r0
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	4303      	orrs	r3, r0
 800563a:	3701      	adds	r7, #1
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	7839      	ldrb	r1, [r7, #0]
 8005640:	4827      	ldr	r0, [pc, #156]	; (80056e0 <_svfiprintf_r+0x1e4>)
 8005642:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005646:	2206      	movs	r2, #6
 8005648:	1c7e      	adds	r6, r7, #1
 800564a:	f7fa fdd1 	bl	80001f0 <memchr>
 800564e:	2800      	cmp	r0, #0
 8005650:	d038      	beq.n	80056c4 <_svfiprintf_r+0x1c8>
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <_svfiprintf_r+0x1e8>)
 8005654:	bb13      	cbnz	r3, 800569c <_svfiprintf_r+0x1a0>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	3307      	adds	r3, #7
 800565a:	f023 0307 	bic.w	r3, r3, #7
 800565e:	3308      	adds	r3, #8
 8005660:	9303      	str	r3, [sp, #12]
 8005662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005664:	444b      	add	r3, r9
 8005666:	9309      	str	r3, [sp, #36]	; 0x24
 8005668:	e76d      	b.n	8005546 <_svfiprintf_r+0x4a>
 800566a:	fb05 3202 	mla	r2, r5, r2, r3
 800566e:	2001      	movs	r0, #1
 8005670:	460f      	mov	r7, r1
 8005672:	e7a6      	b.n	80055c2 <_svfiprintf_r+0xc6>
 8005674:	2300      	movs	r3, #0
 8005676:	3701      	adds	r7, #1
 8005678:	9305      	str	r3, [sp, #20]
 800567a:	4619      	mov	r1, r3
 800567c:	250a      	movs	r5, #10
 800567e:	4638      	mov	r0, r7
 8005680:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005684:	3a30      	subs	r2, #48	; 0x30
 8005686:	2a09      	cmp	r2, #9
 8005688:	d903      	bls.n	8005692 <_svfiprintf_r+0x196>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d0c8      	beq.n	8005620 <_svfiprintf_r+0x124>
 800568e:	9105      	str	r1, [sp, #20]
 8005690:	e7c6      	b.n	8005620 <_svfiprintf_r+0x124>
 8005692:	fb05 2101 	mla	r1, r5, r1, r2
 8005696:	2301      	movs	r3, #1
 8005698:	4607      	mov	r7, r0
 800569a:	e7f0      	b.n	800567e <_svfiprintf_r+0x182>
 800569c:	ab03      	add	r3, sp, #12
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	4622      	mov	r2, r4
 80056a2:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <_svfiprintf_r+0x1ec>)
 80056a4:	a904      	add	r1, sp, #16
 80056a6:	4640      	mov	r0, r8
 80056a8:	f3af 8000 	nop.w
 80056ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056b0:	4681      	mov	r9, r0
 80056b2:	d1d6      	bne.n	8005662 <_svfiprintf_r+0x166>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	065b      	lsls	r3, r3, #25
 80056b8:	f53f af35 	bmi.w	8005526 <_svfiprintf_r+0x2a>
 80056bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056be:	b01d      	add	sp, #116	; 0x74
 80056c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	ab03      	add	r3, sp, #12
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4622      	mov	r2, r4
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <_svfiprintf_r+0x1ec>)
 80056cc:	a904      	add	r1, sp, #16
 80056ce:	4640      	mov	r0, r8
 80056d0:	f000 f882 	bl	80057d8 <_printf_i>
 80056d4:	e7ea      	b.n	80056ac <_svfiprintf_r+0x1b0>
 80056d6:	bf00      	nop
 80056d8:	08005c82 	.word	0x08005c82
 80056dc:	08005c88 	.word	0x08005c88
 80056e0:	08005c8c 	.word	0x08005c8c
 80056e4:	00000000 	.word	0x00000000
 80056e8:	08005447 	.word	0x08005447

080056ec <_printf_common>:
 80056ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f0:	4691      	mov	r9, r2
 80056f2:	461f      	mov	r7, r3
 80056f4:	688a      	ldr	r2, [r1, #8]
 80056f6:	690b      	ldr	r3, [r1, #16]
 80056f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfb8      	it	lt
 8005700:	4613      	movlt	r3, r2
 8005702:	f8c9 3000 	str.w	r3, [r9]
 8005706:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	b112      	cbz	r2, 8005716 <_printf_common+0x2a>
 8005710:	3301      	adds	r3, #1
 8005712:	f8c9 3000 	str.w	r3, [r9]
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	0699      	lsls	r1, r3, #26
 800571a:	bf42      	ittt	mi
 800571c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005720:	3302      	addmi	r3, #2
 8005722:	f8c9 3000 	strmi.w	r3, [r9]
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	f015 0506 	ands.w	r5, r5, #6
 800572c:	d107      	bne.n	800573e <_printf_common+0x52>
 800572e:	f104 0a19 	add.w	sl, r4, #25
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	f8d9 2000 	ldr.w	r2, [r9]
 8005738:	1a9b      	subs	r3, r3, r2
 800573a:	42ab      	cmp	r3, r5
 800573c:	dc28      	bgt.n	8005790 <_printf_common+0xa4>
 800573e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	3300      	adds	r3, #0
 8005746:	bf18      	it	ne
 8005748:	2301      	movne	r3, #1
 800574a:	0692      	lsls	r2, r2, #26
 800574c:	d42d      	bmi.n	80057aa <_printf_common+0xbe>
 800574e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005752:	4639      	mov	r1, r7
 8005754:	4630      	mov	r0, r6
 8005756:	47c0      	blx	r8
 8005758:	3001      	adds	r0, #1
 800575a:	d020      	beq.n	800579e <_printf_common+0xb2>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	68e5      	ldr	r5, [r4, #12]
 8005760:	f8d9 2000 	ldr.w	r2, [r9]
 8005764:	f003 0306 	and.w	r3, r3, #6
 8005768:	2b04      	cmp	r3, #4
 800576a:	bf08      	it	eq
 800576c:	1aad      	subeq	r5, r5, r2
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	bf0c      	ite	eq
 8005774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005778:	2500      	movne	r5, #0
 800577a:	4293      	cmp	r3, r2
 800577c:	bfc4      	itt	gt
 800577e:	1a9b      	subgt	r3, r3, r2
 8005780:	18ed      	addgt	r5, r5, r3
 8005782:	f04f 0900 	mov.w	r9, #0
 8005786:	341a      	adds	r4, #26
 8005788:	454d      	cmp	r5, r9
 800578a:	d11a      	bne.n	80057c2 <_printf_common+0xd6>
 800578c:	2000      	movs	r0, #0
 800578e:	e008      	b.n	80057a2 <_printf_common+0xb6>
 8005790:	2301      	movs	r3, #1
 8005792:	4652      	mov	r2, sl
 8005794:	4639      	mov	r1, r7
 8005796:	4630      	mov	r0, r6
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d103      	bne.n	80057a6 <_printf_common+0xba>
 800579e:	f04f 30ff 	mov.w	r0, #4294967295
 80057a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a6:	3501      	adds	r5, #1
 80057a8:	e7c3      	b.n	8005732 <_printf_common+0x46>
 80057aa:	18e1      	adds	r1, r4, r3
 80057ac:	1c5a      	adds	r2, r3, #1
 80057ae:	2030      	movs	r0, #48	; 0x30
 80057b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b4:	4422      	add	r2, r4
 80057b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057be:	3302      	adds	r3, #2
 80057c0:	e7c5      	b.n	800574e <_printf_common+0x62>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4622      	mov	r2, r4
 80057c6:	4639      	mov	r1, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d0e6      	beq.n	800579e <_printf_common+0xb2>
 80057d0:	f109 0901 	add.w	r9, r9, #1
 80057d4:	e7d8      	b.n	8005788 <_printf_common+0x9c>
	...

080057d8 <_printf_i>:
 80057d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80057e0:	460c      	mov	r4, r1
 80057e2:	7e09      	ldrb	r1, [r1, #24]
 80057e4:	b085      	sub	sp, #20
 80057e6:	296e      	cmp	r1, #110	; 0x6e
 80057e8:	4617      	mov	r7, r2
 80057ea:	4606      	mov	r6, r0
 80057ec:	4698      	mov	r8, r3
 80057ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f0:	f000 80b3 	beq.w	800595a <_printf_i+0x182>
 80057f4:	d822      	bhi.n	800583c <_printf_i+0x64>
 80057f6:	2963      	cmp	r1, #99	; 0x63
 80057f8:	d036      	beq.n	8005868 <_printf_i+0x90>
 80057fa:	d80a      	bhi.n	8005812 <_printf_i+0x3a>
 80057fc:	2900      	cmp	r1, #0
 80057fe:	f000 80b9 	beq.w	8005974 <_printf_i+0x19c>
 8005802:	2958      	cmp	r1, #88	; 0x58
 8005804:	f000 8083 	beq.w	800590e <_printf_i+0x136>
 8005808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800580c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005810:	e032      	b.n	8005878 <_printf_i+0xa0>
 8005812:	2964      	cmp	r1, #100	; 0x64
 8005814:	d001      	beq.n	800581a <_printf_i+0x42>
 8005816:	2969      	cmp	r1, #105	; 0x69
 8005818:	d1f6      	bne.n	8005808 <_printf_i+0x30>
 800581a:	6820      	ldr	r0, [r4, #0]
 800581c:	6813      	ldr	r3, [r2, #0]
 800581e:	0605      	lsls	r5, r0, #24
 8005820:	f103 0104 	add.w	r1, r3, #4
 8005824:	d52a      	bpl.n	800587c <_printf_i+0xa4>
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6011      	str	r1, [r2, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da03      	bge.n	8005836 <_printf_i+0x5e>
 800582e:	222d      	movs	r2, #45	; 0x2d
 8005830:	425b      	negs	r3, r3
 8005832:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005836:	486f      	ldr	r0, [pc, #444]	; (80059f4 <_printf_i+0x21c>)
 8005838:	220a      	movs	r2, #10
 800583a:	e039      	b.n	80058b0 <_printf_i+0xd8>
 800583c:	2973      	cmp	r1, #115	; 0x73
 800583e:	f000 809d 	beq.w	800597c <_printf_i+0x1a4>
 8005842:	d808      	bhi.n	8005856 <_printf_i+0x7e>
 8005844:	296f      	cmp	r1, #111	; 0x6f
 8005846:	d020      	beq.n	800588a <_printf_i+0xb2>
 8005848:	2970      	cmp	r1, #112	; 0x70
 800584a:	d1dd      	bne.n	8005808 <_printf_i+0x30>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	f043 0320 	orr.w	r3, r3, #32
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	e003      	b.n	800585e <_printf_i+0x86>
 8005856:	2975      	cmp	r1, #117	; 0x75
 8005858:	d017      	beq.n	800588a <_printf_i+0xb2>
 800585a:	2978      	cmp	r1, #120	; 0x78
 800585c:	d1d4      	bne.n	8005808 <_printf_i+0x30>
 800585e:	2378      	movs	r3, #120	; 0x78
 8005860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005864:	4864      	ldr	r0, [pc, #400]	; (80059f8 <_printf_i+0x220>)
 8005866:	e055      	b.n	8005914 <_printf_i+0x13c>
 8005868:	6813      	ldr	r3, [r2, #0]
 800586a:	1d19      	adds	r1, r3, #4
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6011      	str	r1, [r2, #0]
 8005870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005878:	2301      	movs	r3, #1
 800587a:	e08c      	b.n	8005996 <_printf_i+0x1be>
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6011      	str	r1, [r2, #0]
 8005880:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005884:	bf18      	it	ne
 8005886:	b21b      	sxthne	r3, r3
 8005888:	e7cf      	b.n	800582a <_printf_i+0x52>
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	6825      	ldr	r5, [r4, #0]
 800588e:	1d18      	adds	r0, r3, #4
 8005890:	6010      	str	r0, [r2, #0]
 8005892:	0628      	lsls	r0, r5, #24
 8005894:	d501      	bpl.n	800589a <_printf_i+0xc2>
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	e002      	b.n	80058a0 <_printf_i+0xc8>
 800589a:	0668      	lsls	r0, r5, #25
 800589c:	d5fb      	bpl.n	8005896 <_printf_i+0xbe>
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	4854      	ldr	r0, [pc, #336]	; (80059f4 <_printf_i+0x21c>)
 80058a2:	296f      	cmp	r1, #111	; 0x6f
 80058a4:	bf14      	ite	ne
 80058a6:	220a      	movne	r2, #10
 80058a8:	2208      	moveq	r2, #8
 80058aa:	2100      	movs	r1, #0
 80058ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058b0:	6865      	ldr	r5, [r4, #4]
 80058b2:	60a5      	str	r5, [r4, #8]
 80058b4:	2d00      	cmp	r5, #0
 80058b6:	f2c0 8095 	blt.w	80059e4 <_printf_i+0x20c>
 80058ba:	6821      	ldr	r1, [r4, #0]
 80058bc:	f021 0104 	bic.w	r1, r1, #4
 80058c0:	6021      	str	r1, [r4, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d13d      	bne.n	8005942 <_printf_i+0x16a>
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	f040 808e 	bne.w	80059e8 <_printf_i+0x210>
 80058cc:	4665      	mov	r5, ip
 80058ce:	2a08      	cmp	r2, #8
 80058d0:	d10b      	bne.n	80058ea <_printf_i+0x112>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	07db      	lsls	r3, r3, #31
 80058d6:	d508      	bpl.n	80058ea <_printf_i+0x112>
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	bfde      	ittt	le
 80058e0:	2330      	movle	r3, #48	; 0x30
 80058e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ea:	ebac 0305 	sub.w	r3, ip, r5
 80058ee:	6123      	str	r3, [r4, #16]
 80058f0:	f8cd 8000 	str.w	r8, [sp]
 80058f4:	463b      	mov	r3, r7
 80058f6:	aa03      	add	r2, sp, #12
 80058f8:	4621      	mov	r1, r4
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7ff fef6 	bl	80056ec <_printf_common>
 8005900:	3001      	adds	r0, #1
 8005902:	d14d      	bne.n	80059a0 <_printf_i+0x1c8>
 8005904:	f04f 30ff 	mov.w	r0, #4294967295
 8005908:	b005      	add	sp, #20
 800590a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800590e:	4839      	ldr	r0, [pc, #228]	; (80059f4 <_printf_i+0x21c>)
 8005910:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005914:	6813      	ldr	r3, [r2, #0]
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	1d1d      	adds	r5, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6015      	str	r5, [r2, #0]
 800591e:	060a      	lsls	r2, r1, #24
 8005920:	d50b      	bpl.n	800593a <_printf_i+0x162>
 8005922:	07ca      	lsls	r2, r1, #31
 8005924:	bf44      	itt	mi
 8005926:	f041 0120 	orrmi.w	r1, r1, #32
 800592a:	6021      	strmi	r1, [r4, #0]
 800592c:	b91b      	cbnz	r3, 8005936 <_printf_i+0x15e>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	f022 0220 	bic.w	r2, r2, #32
 8005934:	6022      	str	r2, [r4, #0]
 8005936:	2210      	movs	r2, #16
 8005938:	e7b7      	b.n	80058aa <_printf_i+0xd2>
 800593a:	064d      	lsls	r5, r1, #25
 800593c:	bf48      	it	mi
 800593e:	b29b      	uxthmi	r3, r3
 8005940:	e7ef      	b.n	8005922 <_printf_i+0x14a>
 8005942:	4665      	mov	r5, ip
 8005944:	fbb3 f1f2 	udiv	r1, r3, r2
 8005948:	fb02 3311 	mls	r3, r2, r1, r3
 800594c:	5cc3      	ldrb	r3, [r0, r3]
 800594e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005952:	460b      	mov	r3, r1
 8005954:	2900      	cmp	r1, #0
 8005956:	d1f5      	bne.n	8005944 <_printf_i+0x16c>
 8005958:	e7b9      	b.n	80058ce <_printf_i+0xf6>
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	6961      	ldr	r1, [r4, #20]
 8005960:	1d18      	adds	r0, r3, #4
 8005962:	6010      	str	r0, [r2, #0]
 8005964:	0628      	lsls	r0, r5, #24
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	d501      	bpl.n	800596e <_printf_i+0x196>
 800596a:	6019      	str	r1, [r3, #0]
 800596c:	e002      	b.n	8005974 <_printf_i+0x19c>
 800596e:	066a      	lsls	r2, r5, #25
 8005970:	d5fb      	bpl.n	800596a <_printf_i+0x192>
 8005972:	8019      	strh	r1, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	4665      	mov	r5, ip
 800597a:	e7b9      	b.n	80058f0 <_printf_i+0x118>
 800597c:	6813      	ldr	r3, [r2, #0]
 800597e:	1d19      	adds	r1, r3, #4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	681d      	ldr	r5, [r3, #0]
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	2100      	movs	r1, #0
 8005988:	4628      	mov	r0, r5
 800598a:	f7fa fc31 	bl	80001f0 <memchr>
 800598e:	b108      	cbz	r0, 8005994 <_printf_i+0x1bc>
 8005990:	1b40      	subs	r0, r0, r5
 8005992:	6060      	str	r0, [r4, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599e:	e7a7      	b.n	80058f0 <_printf_i+0x118>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	462a      	mov	r2, r5
 80059a4:	4639      	mov	r1, r7
 80059a6:	4630      	mov	r0, r6
 80059a8:	47c0      	blx	r8
 80059aa:	3001      	adds	r0, #1
 80059ac:	d0aa      	beq.n	8005904 <_printf_i+0x12c>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	079b      	lsls	r3, r3, #30
 80059b2:	d413      	bmi.n	80059dc <_printf_i+0x204>
 80059b4:	68e0      	ldr	r0, [r4, #12]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	4298      	cmp	r0, r3
 80059ba:	bfb8      	it	lt
 80059bc:	4618      	movlt	r0, r3
 80059be:	e7a3      	b.n	8005908 <_printf_i+0x130>
 80059c0:	2301      	movs	r3, #1
 80059c2:	464a      	mov	r2, r9
 80059c4:	4639      	mov	r1, r7
 80059c6:	4630      	mov	r0, r6
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d09a      	beq.n	8005904 <_printf_i+0x12c>
 80059ce:	3501      	adds	r5, #1
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	9a03      	ldr	r2, [sp, #12]
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	dcf2      	bgt.n	80059c0 <_printf_i+0x1e8>
 80059da:	e7eb      	b.n	80059b4 <_printf_i+0x1dc>
 80059dc:	2500      	movs	r5, #0
 80059de:	f104 0919 	add.w	r9, r4, #25
 80059e2:	e7f5      	b.n	80059d0 <_printf_i+0x1f8>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1ac      	bne.n	8005942 <_printf_i+0x16a>
 80059e8:	7803      	ldrb	r3, [r0, #0]
 80059ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059f2:	e76c      	b.n	80058ce <_printf_i+0xf6>
 80059f4:	08005c93 	.word	0x08005c93
 80059f8:	08005ca4 	.word	0x08005ca4

080059fc <__ascii_wctomb>:
 80059fc:	b149      	cbz	r1, 8005a12 <__ascii_wctomb+0x16>
 80059fe:	2aff      	cmp	r2, #255	; 0xff
 8005a00:	bf85      	ittet	hi
 8005a02:	238a      	movhi	r3, #138	; 0x8a
 8005a04:	6003      	strhi	r3, [r0, #0]
 8005a06:	700a      	strbls	r2, [r1, #0]
 8005a08:	f04f 30ff 	movhi.w	r0, #4294967295
 8005a0c:	bf98      	it	ls
 8005a0e:	2001      	movls	r0, #1
 8005a10:	4770      	bx	lr
 8005a12:	4608      	mov	r0, r1
 8005a14:	4770      	bx	lr

08005a16 <memcpy>:
 8005a16:	b510      	push	{r4, lr}
 8005a18:	1e43      	subs	r3, r0, #1
 8005a1a:	440a      	add	r2, r1
 8005a1c:	4291      	cmp	r1, r2
 8005a1e:	d100      	bne.n	8005a22 <memcpy+0xc>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2a:	e7f7      	b.n	8005a1c <memcpy+0x6>

08005a2c <memmove>:
 8005a2c:	4288      	cmp	r0, r1
 8005a2e:	b510      	push	{r4, lr}
 8005a30:	eb01 0302 	add.w	r3, r1, r2
 8005a34:	d807      	bhi.n	8005a46 <memmove+0x1a>
 8005a36:	1e42      	subs	r2, r0, #1
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	d00a      	beq.n	8005a52 <memmove+0x26>
 8005a3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a44:	e7f8      	b.n	8005a38 <memmove+0xc>
 8005a46:	4283      	cmp	r3, r0
 8005a48:	d9f5      	bls.n	8005a36 <memmove+0xa>
 8005a4a:	1881      	adds	r1, r0, r2
 8005a4c:	1ad2      	subs	r2, r2, r3
 8005a4e:	42d3      	cmn	r3, r2
 8005a50:	d100      	bne.n	8005a54 <memmove+0x28>
 8005a52:	bd10      	pop	{r4, pc}
 8005a54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a5c:	e7f7      	b.n	8005a4e <memmove+0x22>
	...

08005a60 <_free_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4605      	mov	r5, r0
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d045      	beq.n	8005af4 <_free_r+0x94>
 8005a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a6c:	1f0c      	subs	r4, r1, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	bfb8      	it	lt
 8005a72:	18e4      	addlt	r4, r4, r3
 8005a74:	f000 f8d2 	bl	8005c1c <__malloc_lock>
 8005a78:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <_free_r+0x98>)
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	b933      	cbnz	r3, 8005a8e <_free_r+0x2e>
 8005a80:	6063      	str	r3, [r4, #4]
 8005a82:	6014      	str	r4, [r2, #0]
 8005a84:	4628      	mov	r0, r5
 8005a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8a:	f000 b8c8 	b.w	8005c1e <__malloc_unlock>
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	d90c      	bls.n	8005aac <_free_r+0x4c>
 8005a92:	6821      	ldr	r1, [r4, #0]
 8005a94:	1862      	adds	r2, r4, r1
 8005a96:	4293      	cmp	r3, r2
 8005a98:	bf04      	itt	eq
 8005a9a:	681a      	ldreq	r2, [r3, #0]
 8005a9c:	685b      	ldreq	r3, [r3, #4]
 8005a9e:	6063      	str	r3, [r4, #4]
 8005aa0:	bf04      	itt	eq
 8005aa2:	1852      	addeq	r2, r2, r1
 8005aa4:	6022      	streq	r2, [r4, #0]
 8005aa6:	6004      	str	r4, [r0, #0]
 8005aa8:	e7ec      	b.n	8005a84 <_free_r+0x24>
 8005aaa:	4613      	mov	r3, r2
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	b10a      	cbz	r2, 8005ab4 <_free_r+0x54>
 8005ab0:	42a2      	cmp	r2, r4
 8005ab2:	d9fa      	bls.n	8005aaa <_free_r+0x4a>
 8005ab4:	6819      	ldr	r1, [r3, #0]
 8005ab6:	1858      	adds	r0, r3, r1
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d10b      	bne.n	8005ad4 <_free_r+0x74>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	4401      	add	r1, r0
 8005ac0:	1858      	adds	r0, r3, r1
 8005ac2:	4282      	cmp	r2, r0
 8005ac4:	6019      	str	r1, [r3, #0]
 8005ac6:	d1dd      	bne.n	8005a84 <_free_r+0x24>
 8005ac8:	6810      	ldr	r0, [r2, #0]
 8005aca:	6852      	ldr	r2, [r2, #4]
 8005acc:	605a      	str	r2, [r3, #4]
 8005ace:	4401      	add	r1, r0
 8005ad0:	6019      	str	r1, [r3, #0]
 8005ad2:	e7d7      	b.n	8005a84 <_free_r+0x24>
 8005ad4:	d902      	bls.n	8005adc <_free_r+0x7c>
 8005ad6:	230c      	movs	r3, #12
 8005ad8:	602b      	str	r3, [r5, #0]
 8005ada:	e7d3      	b.n	8005a84 <_free_r+0x24>
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	1821      	adds	r1, r4, r0
 8005ae0:	428a      	cmp	r2, r1
 8005ae2:	bf04      	itt	eq
 8005ae4:	6811      	ldreq	r1, [r2, #0]
 8005ae6:	6852      	ldreq	r2, [r2, #4]
 8005ae8:	6062      	str	r2, [r4, #4]
 8005aea:	bf04      	itt	eq
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	605c      	str	r4, [r3, #4]
 8005af2:	e7c7      	b.n	8005a84 <_free_r+0x24>
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	bf00      	nop
 8005af8:	20000210 	.word	0x20000210

08005afc <_malloc_r>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	1ccd      	adds	r5, r1, #3
 8005b00:	f025 0503 	bic.w	r5, r5, #3
 8005b04:	3508      	adds	r5, #8
 8005b06:	2d0c      	cmp	r5, #12
 8005b08:	bf38      	it	cc
 8005b0a:	250c      	movcc	r5, #12
 8005b0c:	2d00      	cmp	r5, #0
 8005b0e:	4606      	mov	r6, r0
 8005b10:	db01      	blt.n	8005b16 <_malloc_r+0x1a>
 8005b12:	42a9      	cmp	r1, r5
 8005b14:	d903      	bls.n	8005b1e <_malloc_r+0x22>
 8005b16:	230c      	movs	r3, #12
 8005b18:	6033      	str	r3, [r6, #0]
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	f000 f87d 	bl	8005c1c <__malloc_lock>
 8005b22:	4a21      	ldr	r2, [pc, #132]	; (8005ba8 <_malloc_r+0xac>)
 8005b24:	6814      	ldr	r4, [r2, #0]
 8005b26:	4621      	mov	r1, r4
 8005b28:	b991      	cbnz	r1, 8005b50 <_malloc_r+0x54>
 8005b2a:	4c20      	ldr	r4, [pc, #128]	; (8005bac <_malloc_r+0xb0>)
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	b91b      	cbnz	r3, 8005b38 <_malloc_r+0x3c>
 8005b30:	4630      	mov	r0, r6
 8005b32:	f000 f863 	bl	8005bfc <_sbrk_r>
 8005b36:	6020      	str	r0, [r4, #0]
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f000 f85e 	bl	8005bfc <_sbrk_r>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d124      	bne.n	8005b8e <_malloc_r+0x92>
 8005b44:	230c      	movs	r3, #12
 8005b46:	6033      	str	r3, [r6, #0]
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f000 f868 	bl	8005c1e <__malloc_unlock>
 8005b4e:	e7e4      	b.n	8005b1a <_malloc_r+0x1e>
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	1b5b      	subs	r3, r3, r5
 8005b54:	d418      	bmi.n	8005b88 <_malloc_r+0x8c>
 8005b56:	2b0b      	cmp	r3, #11
 8005b58:	d90f      	bls.n	8005b7a <_malloc_r+0x7e>
 8005b5a:	600b      	str	r3, [r1, #0]
 8005b5c:	50cd      	str	r5, [r1, r3]
 8005b5e:	18cc      	adds	r4, r1, r3
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f85c 	bl	8005c1e <__malloc_unlock>
 8005b66:	f104 000b 	add.w	r0, r4, #11
 8005b6a:	1d23      	adds	r3, r4, #4
 8005b6c:	f020 0007 	bic.w	r0, r0, #7
 8005b70:	1ac3      	subs	r3, r0, r3
 8005b72:	d0d3      	beq.n	8005b1c <_malloc_r+0x20>
 8005b74:	425a      	negs	r2, r3
 8005b76:	50e2      	str	r2, [r4, r3]
 8005b78:	e7d0      	b.n	8005b1c <_malloc_r+0x20>
 8005b7a:	428c      	cmp	r4, r1
 8005b7c:	684b      	ldr	r3, [r1, #4]
 8005b7e:	bf16      	itet	ne
 8005b80:	6063      	strne	r3, [r4, #4]
 8005b82:	6013      	streq	r3, [r2, #0]
 8005b84:	460c      	movne	r4, r1
 8005b86:	e7eb      	b.n	8005b60 <_malloc_r+0x64>
 8005b88:	460c      	mov	r4, r1
 8005b8a:	6849      	ldr	r1, [r1, #4]
 8005b8c:	e7cc      	b.n	8005b28 <_malloc_r+0x2c>
 8005b8e:	1cc4      	adds	r4, r0, #3
 8005b90:	f024 0403 	bic.w	r4, r4, #3
 8005b94:	42a0      	cmp	r0, r4
 8005b96:	d005      	beq.n	8005ba4 <_malloc_r+0xa8>
 8005b98:	1a21      	subs	r1, r4, r0
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f000 f82e 	bl	8005bfc <_sbrk_r>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d0cf      	beq.n	8005b44 <_malloc_r+0x48>
 8005ba4:	6025      	str	r5, [r4, #0]
 8005ba6:	e7db      	b.n	8005b60 <_malloc_r+0x64>
 8005ba8:	20000210 	.word	0x20000210
 8005bac:	20000214 	.word	0x20000214

08005bb0 <_realloc_r>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	460e      	mov	r6, r1
 8005bb8:	b921      	cbnz	r1, 8005bc4 <_realloc_r+0x14>
 8005bba:	4611      	mov	r1, r2
 8005bbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bc0:	f7ff bf9c 	b.w	8005afc <_malloc_r>
 8005bc4:	b922      	cbnz	r2, 8005bd0 <_realloc_r+0x20>
 8005bc6:	f7ff ff4b 	bl	8005a60 <_free_r>
 8005bca:	4625      	mov	r5, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd0:	f000 f826 	bl	8005c20 <_malloc_usable_size_r>
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d20f      	bcs.n	8005bf8 <_realloc_r+0x48>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f7ff ff8e 	bl	8005afc <_malloc_r>
 8005be0:	4605      	mov	r5, r0
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d0f2      	beq.n	8005bcc <_realloc_r+0x1c>
 8005be6:	4631      	mov	r1, r6
 8005be8:	4622      	mov	r2, r4
 8005bea:	f7ff ff14 	bl	8005a16 <memcpy>
 8005bee:	4631      	mov	r1, r6
 8005bf0:	4638      	mov	r0, r7
 8005bf2:	f7ff ff35 	bl	8005a60 <_free_r>
 8005bf6:	e7e9      	b.n	8005bcc <_realloc_r+0x1c>
 8005bf8:	4635      	mov	r5, r6
 8005bfa:	e7e7      	b.n	8005bcc <_realloc_r+0x1c>

08005bfc <_sbrk_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	4c06      	ldr	r4, [pc, #24]	; (8005c18 <_sbrk_r+0x1c>)
 8005c00:	2300      	movs	r3, #0
 8005c02:	4605      	mov	r5, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	f7fb fc1c 	bl	8001444 <_sbrk>
 8005c0c:	1c43      	adds	r3, r0, #1
 8005c0e:	d102      	bne.n	8005c16 <_sbrk_r+0x1a>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	b103      	cbz	r3, 8005c16 <_sbrk_r+0x1a>
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	bd38      	pop	{r3, r4, r5, pc}
 8005c18:	20000450 	.word	0x20000450

08005c1c <__malloc_lock>:
 8005c1c:	4770      	bx	lr

08005c1e <__malloc_unlock>:
 8005c1e:	4770      	bx	lr

08005c20 <_malloc_usable_size_r>:
 8005c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c24:	1f18      	subs	r0, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bfbc      	itt	lt
 8005c2a:	580b      	ldrlt	r3, [r1, r0]
 8005c2c:	18c0      	addlt	r0, r0, r3
 8005c2e:	4770      	bx	lr

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
